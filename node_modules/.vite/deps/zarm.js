import {
  require_ListCache,
  require_Map,
  require_MapCache,
  require_Symbol,
  require_arrayMap,
  require_assignValue,
  require_baseAssignValue,
  require_baseGet,
  require_baseGetTag,
  require_castPath,
  require_defineProperty,
  require_eq,
  require_freeGlobal,
  require_getNative,
  require_isArray,
  require_isFunction,
  require_isIndex,
  require_isObject,
  require_isObjectLike,
  require_root,
  require_toKey,
  require_toSource
} from "./chunk-WG6L655G.js";
import {
  require_hoist_non_react_statics_cjs
} from "./chunk-I7WKKBCJ.js";
import {
  require_react_dom
} from "./chunk-NXHO55A3.js";
import {
  require_react
} from "./chunk-HO44DXLL.js";
import {
  require_classnames
} from "./chunk-6H4HCXUI.js";
import "./chunk-SE54Z3DN.js";
import "./chunk-Z3ZF6JNT.js";
import {
  __commonJS,
  __toESM
} from "./chunk-4EOJPDL2.js";

// node_modules/performance-now/lib/performance-now.js
var require_performance_now = __commonJS({
  "node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/raf/index.js
var require_raf = __commonJS({
  "node_modules/raf/index.js"(exports, module) {
    var now = require_performance_now();
    var root = typeof window === "undefined" ? global : window;
    var vendors = ["moz", "webkit"];
    var suffix = "AnimationFrame";
    var raf2 = root["request" + suffix];
    var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
    for (i = 0; !raf2 && i < vendors.length; i++) {
      raf2 = root[vendors[i] + "Request" + suffix];
      caf = root[vendors[i] + "Cancel" + suffix] || root[vendors[i] + "CancelRequest" + suffix];
    }
    var i;
    if (!raf2 || !caf) {
      last = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
      raf2 = function(callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function() {
            var cp = queue.slice(0);
            queue.length = 0;
            for (var i2 = 0; i2 < cp.length; i2++) {
              if (!cp[i2].cancelled) {
                try {
                  cp[i2].callback(last);
                } catch (e) {
                  setTimeout(function() {
                    throw e;
                  }, 0);
                }
              }
            }
          }, Math.round(next));
        }
        queue.push({
          handle: ++id,
          callback,
          cancelled: false
        });
        return id;
      };
      caf = function(handle) {
        for (var i2 = 0; i2 < queue.length; i2++) {
          if (queue[i2].handle === handle) {
            queue[i2].cancelled = true;
          }
        }
      };
    }
    var last;
    var id;
    var queue;
    var frameDuration;
    module.exports = function(fn) {
      return raf2.call(root, fn);
    };
    module.exports.cancel = function() {
      caf.apply(root, arguments);
    };
    module.exports.polyfill = function(object) {
      if (!object) {
        object = root;
      }
      object.requestAnimationFrame = raf2;
      object.cancelAnimationFrame = caf;
    };
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports, module) {
    "use strict";
    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({
  "node_modules/is-arrayish/index.js"(exports, module) {
    module.exports = function isArrayish(obj) {
      if (!obj || typeof obj === "string") {
        return false;
      }
      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
    };
  }
});

// node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS({
  "node_modules/simple-swizzle/index.js"(exports, module) {
    "use strict";
    var isArrayish = require_is_arrayish();
    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;
    var swizzle = module.exports = function swizzle2(args) {
      var results = [];
      for (var i = 0, len = args.length; i < len; i++) {
        var arg = args[i];
        if (isArrayish(arg)) {
          results = concat.call(results, slice.call(arg));
        } else {
          results.push(arg);
        }
      }
      return results;
    };
    swizzle.wrap = function(fn) {
      return function() {
        return fn(swizzle(arguments));
      };
    };
  }
});

// node_modules/color-string/index.js
var require_color_string = __commonJS({
  "node_modules/color-string/index.js"(exports, module) {
    var colorNames = require_color_name();
    var swizzle = require_simple_swizzle();
    var hasOwnProperty = Object.hasOwnProperty;
    var reverseNames = /* @__PURE__ */ Object.create(null);
    for (name in colorNames) {
      if (hasOwnProperty.call(colorNames, name)) {
        reverseNames[colorNames[name]] = name;
      }
    }
    var name;
    var cs = module.exports = {
      to: {},
      get: {}
    };
    cs.get = function(string) {
      var prefix = string.substring(0, 3).toLowerCase();
      var val;
      var model;
      switch (prefix) {
        case "hsl":
          val = cs.get.hsl(string);
          model = "hsl";
          break;
        case "hwb":
          val = cs.get.hwb(string);
          model = "hwb";
          break;
        default:
          val = cs.get.rgb(string);
          model = "rgb";
          break;
      }
      if (!val) {
        return null;
      }
      return { model, value: val };
    };
    cs.get.rgb = function(string) {
      if (!string) {
        return null;
      }
      var abbr = /^#([a-f0-9]{3,4})$/i;
      var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
      var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var keyword = /^(\w+)$/;
      var rgb = [0, 0, 0, 1];
      var match;
      var i;
      var hexAlpha;
      if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for (i = 0; i < 3; i++) {
          var i2 = i * 2;
          rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha, 16) / 255;
        }
      } else if (match = string.match(abbr)) {
        match = match[1];
        hexAlpha = match[3];
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
        }
      } else if (match = string.match(rgba)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match[i + 1], 0);
        }
        if (match[4]) {
          if (match[5]) {
            rgb[3] = parseFloat(match[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match[4]);
          }
        }
      } else if (match = string.match(per)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        if (match[4]) {
          if (match[5]) {
            rgb[3] = parseFloat(match[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match[4]);
          }
        }
      } else if (match = string.match(keyword)) {
        if (match[1] === "transparent") {
          return [0, 0, 0, 0];
        }
        if (!hasOwnProperty.call(colorNames, match[1])) {
          return null;
        }
        rgb = colorNames[match[1]];
        rgb[3] = 1;
        return rgb;
      } else {
        return null;
      }
      for (i = 0; i < 3; i++) {
        rgb[i] = clamp(rgb[i], 0, 255);
      }
      rgb[3] = clamp(rgb[3], 0, 1);
      return rgb;
    };
    cs.get.hsl = function(string) {
      if (!string) {
        return null;
      }
      var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match = string.match(hsl);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = (parseFloat(match[1]) % 360 + 360) % 360;
        var s = clamp(parseFloat(match[2]), 0, 100);
        var l = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
      }
      return null;
    };
    cs.get.hwb = function(string) {
      if (!string) {
        return null;
      }
      var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match = string.match(hwb);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = (parseFloat(match[1]) % 360 + 360) % 360;
        var w = clamp(parseFloat(match[2]), 0, 100);
        var b = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
      return null;
    };
    cs.to.hex = function() {
      var rgba = swizzle(arguments);
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
    };
    cs.to.rgb = function() {
      var rgba = swizzle(arguments);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
    };
    cs.to.rgb.percent = function() {
      var rgba = swizzle(arguments);
      var r = Math.round(rgba[0] / 255 * 100);
      var g = Math.round(rgba[1] / 255 * 100);
      var b = Math.round(rgba[2] / 255 * 100);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
    };
    cs.to.hsl = function() {
      var hsla = swizzle(arguments);
      return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
    };
    cs.to.hwb = function() {
      var hwba = swizzle(arguments);
      var a = "";
      if (hwba.length >= 4 && hwba[3] !== 1) {
        a = ", " + hwba[3];
      }
      return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
    };
    cs.to.keyword = function(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    };
    function clamp(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }
    function hexDouble(num) {
      var str = Math.round(num).toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    }
  }
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js"(exports, module) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color-convert/route.js"(exports, module) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js"(exports, module) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
  }
});

// node_modules/color/index.js
var require_color = __commonJS({
  "node_modules/color/index.js"(exports, module) {
    "use strict";
    var colorString = require_color_string();
    var convert = require_color_convert();
    var _slice = [].slice;
    var skippedModels = [
      // to be honest, I don't really feel like keyword belongs in color convert, but eh.
      "keyword",
      // gray conflicts with some method names, and has its own method defined.
      "gray",
      // shouldn't really be in color-convert either...
      "hex"
    ];
    var hashedModelKeys = {};
    Object.keys(convert).forEach(function(model) {
      hashedModelKeys[_slice.call(convert[model].labels).sort().join("")] = model;
    });
    var limiters = {};
    function Color2(obj, model) {
      if (!(this instanceof Color2)) {
        return new Color2(obj, model);
      }
      if (model && model in skippedModels) {
        model = null;
      }
      if (model && !(model in convert)) {
        throw new Error("Unknown model: " + model);
      }
      var i;
      var channels;
      if (obj == null) {
        this.model = "rgb";
        this.color = [0, 0, 0];
        this.valpha = 1;
      } else if (obj instanceof Color2) {
        this.model = obj.model;
        this.color = obj.color.slice();
        this.valpha = obj.valpha;
      } else if (typeof obj === "string") {
        var result = colorString.get(obj);
        if (result === null) {
          throw new Error("Unable to parse color from string: " + obj);
        }
        this.model = result.model;
        channels = convert[this.model].channels;
        this.color = result.value.slice(0, channels);
        this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
      } else if (obj.length) {
        this.model = model || "rgb";
        channels = convert[this.model].channels;
        var newArr = _slice.call(obj, 0, channels);
        this.color = zeroArray(newArr, channels);
        this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
      } else if (typeof obj === "number") {
        obj &= 16777215;
        this.model = "rgb";
        this.color = [
          obj >> 16 & 255,
          obj >> 8 & 255,
          obj & 255
        ];
        this.valpha = 1;
      } else {
        this.valpha = 1;
        var keys = Object.keys(obj);
        if ("alpha" in obj) {
          keys.splice(keys.indexOf("alpha"), 1);
          this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
        }
        var hashedKeys = keys.sort().join("");
        if (!(hashedKeys in hashedModelKeys)) {
          throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
        }
        this.model = hashedModelKeys[hashedKeys];
        var labels = convert[this.model].labels;
        var color = [];
        for (i = 0; i < labels.length; i++) {
          color.push(obj[labels[i]]);
        }
        this.color = zeroArray(color);
      }
      if (limiters[this.model]) {
        channels = convert[this.model].channels;
        for (i = 0; i < channels; i++) {
          var limit = limiters[this.model][i];
          if (limit) {
            this.color[i] = limit(this.color[i]);
          }
        }
      }
      this.valpha = Math.max(0, Math.min(1, this.valpha));
      if (Object.freeze) {
        Object.freeze(this);
      }
    }
    Color2.prototype = {
      toString: function() {
        return this.string();
      },
      toJSON: function() {
        return this[this.model]();
      },
      string: function(places) {
        var self = this.model in colorString.to ? this : this.rgb();
        self = self.round(typeof places === "number" ? places : 1);
        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
        return colorString.to[self.model](args);
      },
      percentString: function(places) {
        var self = this.rgb().round(typeof places === "number" ? places : 1);
        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
        return colorString.to.rgb.percent(args);
      },
      array: function() {
        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
      },
      object: function() {
        var result = {};
        var channels = convert[this.model].channels;
        var labels = convert[this.model].labels;
        for (var i = 0; i < channels; i++) {
          result[labels[i]] = this.color[i];
        }
        if (this.valpha !== 1) {
          result.alpha = this.valpha;
        }
        return result;
      },
      unitArray: function() {
        var rgb = this.rgb().color;
        rgb[0] /= 255;
        rgb[1] /= 255;
        rgb[2] /= 255;
        if (this.valpha !== 1) {
          rgb.push(this.valpha);
        }
        return rgb;
      },
      unitObject: function() {
        var rgb = this.rgb().object();
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        if (this.valpha !== 1) {
          rgb.alpha = this.valpha;
        }
        return rgb;
      },
      round: function(places) {
        places = Math.max(places || 0, 0);
        return new Color2(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
      },
      alpha: function(val) {
        if (arguments.length) {
          return new Color2(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
        }
        return this.valpha;
      },
      // rgb
      red: getset("rgb", 0, maxfn(255)),
      green: getset("rgb", 1, maxfn(255)),
      blue: getset("rgb", 2, maxfn(255)),
      hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function(val) {
        return (val % 360 + 360) % 360;
      }),
      // eslint-disable-line brace-style
      saturationl: getset("hsl", 1, maxfn(100)),
      lightness: getset("hsl", 2, maxfn(100)),
      saturationv: getset("hsv", 1, maxfn(100)),
      value: getset("hsv", 2, maxfn(100)),
      chroma: getset("hcg", 1, maxfn(100)),
      gray: getset("hcg", 2, maxfn(100)),
      white: getset("hwb", 1, maxfn(100)),
      wblack: getset("hwb", 2, maxfn(100)),
      cyan: getset("cmyk", 0, maxfn(100)),
      magenta: getset("cmyk", 1, maxfn(100)),
      yellow: getset("cmyk", 2, maxfn(100)),
      black: getset("cmyk", 3, maxfn(100)),
      x: getset("xyz", 0, maxfn(100)),
      y: getset("xyz", 1, maxfn(100)),
      z: getset("xyz", 2, maxfn(100)),
      l: getset("lab", 0, maxfn(100)),
      a: getset("lab", 1),
      b: getset("lab", 2),
      keyword: function(val) {
        if (arguments.length) {
          return new Color2(val);
        }
        return convert[this.model].keyword(this.color);
      },
      hex: function(val) {
        if (arguments.length) {
          return new Color2(val);
        }
        return colorString.to.hex(this.rgb().round().color);
      },
      rgbNumber: function() {
        var rgb = this.rgb().color;
        return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
      },
      luminosity: function() {
        var rgb = this.rgb().color;
        var lum = [];
        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function(color2) {
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function(color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
          return "AAA";
        }
        return contrastRatio >= 4.5 ? "AA" : "";
      },
      isDark: function() {
        var rgb = this.rgb().color;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
        return yiq < 128;
      },
      isLight: function() {
        return !this.isDark();
      },
      negate: function() {
        var rgb = this.rgb();
        for (var i = 0; i < 3; i++) {
          rgb.color[i] = 255 - rgb.color[i];
        }
        return rgb;
      },
      lighten: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] += hsl.color[2] * ratio;
        return hsl;
      },
      darken: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] -= hsl.color[2] * ratio;
        return hsl;
      },
      saturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] += hsl.color[1] * ratio;
        return hsl;
      },
      desaturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] -= hsl.color[1] * ratio;
        return hsl;
      },
      whiten: function(ratio) {
        var hwb = this.hwb();
        hwb.color[1] += hwb.color[1] * ratio;
        return hwb;
      },
      blacken: function(ratio) {
        var hwb = this.hwb();
        hwb.color[2] += hwb.color[2] * ratio;
        return hwb;
      },
      grayscale: function() {
        var rgb = this.rgb().color;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        return Color2.rgb(val, val, val);
      },
      fade: function(ratio) {
        return this.alpha(this.valpha - this.valpha * ratio);
      },
      opaquer: function(ratio) {
        return this.alpha(this.valpha + this.valpha * ratio);
      },
      rotate: function(degrees) {
        var hsl = this.hsl();
        var hue = hsl.color[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        hsl.color[0] = hue;
        return hsl;
      },
      mix: function(mixinColor, weight) {
        if (!mixinColor || !mixinColor.rgb) {
          throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
        }
        var color1 = mixinColor.rgb();
        var color2 = this.rgb();
        var p = weight === void 0 ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
        var w2 = 1 - w1;
        return Color2.rgb(
          w1 * color1.red() + w2 * color2.red(),
          w1 * color1.green() + w2 * color2.green(),
          w1 * color1.blue() + w2 * color2.blue(),
          color1.alpha() * p + color2.alpha() * (1 - p)
        );
      }
    };
    Object.keys(convert).forEach(function(model) {
      if (skippedModels.indexOf(model) !== -1) {
        return;
      }
      var channels = convert[model].channels;
      Color2.prototype[model] = function() {
        if (this.model === model) {
          return new Color2(this);
        }
        if (arguments.length) {
          return new Color2(arguments, model);
        }
        var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
        return new Color2(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
      };
      Color2[model] = function(color) {
        if (typeof color === "number") {
          color = zeroArray(_slice.call(arguments), channels);
        }
        return new Color2(color, model);
      };
    });
    function roundTo(num, places) {
      return Number(num.toFixed(places));
    }
    function roundToPlace(places) {
      return function(num) {
        return roundTo(num, places);
      };
    }
    function getset(model, channel, modifier) {
      model = Array.isArray(model) ? model : [model];
      model.forEach(function(m) {
        (limiters[m] || (limiters[m] = []))[channel] = modifier;
      });
      model = model[0];
      return function(val) {
        var result;
        if (arguments.length) {
          if (modifier) {
            val = modifier(val);
          }
          result = this[model]();
          result.color[channel] = val;
          return result;
        }
        result = this[model]().color[channel];
        if (modifier) {
          result = modifier(result);
        }
        return result;
      };
    }
    function maxfn(max) {
      return function(v) {
        return Math.max(0, Math.min(max, v));
      };
    }
    function assertArray(val) {
      return Array.isArray(val) ? val : [val];
    }
    function zeroArray(arr, length) {
      for (var i = 0; i < length; i++) {
        if (typeof arr[i] !== "number") {
          arr[i] = 0;
        }
      }
      return arr;
    }
    module.exports = Color2;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset3 = array.length;
      while (++index < length) {
        array[offset3 + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray3 = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray3(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray3 = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray3(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray3 = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray3(object), othIsArr = isArray3(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual7(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual7;
  }
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  "node_modules/lodash/_arrayEach.js"(exports, module) {
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module.exports = arrayEach;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  "node_modules/lodash/_baseAssign.js"(exports, module) {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module.exports = baseAssign;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject3 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject3(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  "node_modules/lodash/_baseAssignIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module.exports = baseAssignIn;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  "node_modules/lodash/_copySymbols.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module.exports = copySymbols;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  "node_modules/lodash/_copySymbolsIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module.exports = copySymbolsIn;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  "node_modules/lodash/_initCloneArray.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  "node_modules/lodash/_cloneDataView.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  }
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/lodash/_cloneRegExp.js"(exports, module) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  }
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  "node_modules/lodash/_cloneSymbol.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  "node_modules/lodash/_initCloneByTag.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module.exports = initCloneByTag;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject3 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject3(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  "node_modules/lodash/_baseIsMap.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  }
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  "node_modules/lodash/isMap.js"(exports, module) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  }
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  "node_modules/lodash/_baseIsSet.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  }
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  "node_modules/lodash/isSet.js"(exports, module) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  }
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  "node_modules/lodash/_baseClone.js"(exports, module) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray3 = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject3 = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject3(value)) {
        return value;
      }
      var isArr = isArray3(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module) {
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    module.exports = baseSlice;
  }
});

// node_modules/lodash/_parent.js
var require_parent = __commonJS({
  "node_modules/lodash/_parent.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSlice = require_baseSlice();
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    module.exports = parent;
  }
});

// node_modules/lodash/_baseUnset.js
var require_baseUnset = __commonJS({
  "node_modules/lodash/_baseUnset.js"(exports, module) {
    var castPath = require_castPath();
    var last = require_last();
    var parent = require_parent();
    var toKey = require_toKey();
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }
    module.exports = baseUnset;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  }
});

// node_modules/lodash/_customOmitClone.js
var require_customOmitClone = __commonJS({
  "node_modules/lodash/_customOmitClone.js"(exports, module) {
    var isPlainObject = require_isPlainObject();
    function customOmitClone(value) {
      return isPlainObject(value) ? void 0 : value;
    }
    module.exports = customOmitClone;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray3 = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray3(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/lodash/flatten.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module.exports = flatten;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform2) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform2(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty2 = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty2 ? identity : function(func, string) {
      return defineProperty2(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "node_modules/lodash/_flatRest.js"(exports, module) {
    var flatten = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    module.exports = flatRest;
  }
});

// node_modules/lodash/omit.js
var require_omit = __commonJS({
  "node_modules/lodash/omit.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseClone = require_baseClone();
    var baseUnset = require_baseUnset();
    var castPath = require_castPath();
    var copyObject = require_copyObject();
    var customOmitClone = require_customOmitClone();
    var flatRest = require_flatRest();
    var getAllKeysIn = require_getAllKeysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var omit2 = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    module.exports = omit2;
  }
});

// node_modules/classnames/dedupe.js
var require_dedupe = __commonJS({
  "node_modules/classnames/dedupe.js"(exports, module) {
    (function() {
      "use strict";
      var classNames2 = function() {
        function StorageObject() {
        }
        StorageObject.prototype = /* @__PURE__ */ Object.create(null);
        function _parseArray(resultSet, array) {
          var length = array.length;
          for (var i = 0; i < length; ++i) {
            _parse(resultSet, array[i]);
          }
        }
        var hasOwn = {}.hasOwnProperty;
        function _parseNumber(resultSet, num) {
          resultSet[num] = true;
        }
        function _parseObject(resultSet, object) {
          for (var k in object) {
            if (hasOwn.call(object, k)) {
              resultSet[k] = !!object[k];
            }
          }
        }
        var SPACE = /\s+/;
        function _parseString(resultSet, str) {
          var array = str.split(SPACE);
          var length = array.length;
          for (var i = 0; i < length; ++i) {
            resultSet[array[i]] = true;
          }
        }
        function _parse(resultSet, arg) {
          if (!arg)
            return;
          var argType = typeof arg;
          if (argType === "string") {
            _parseString(resultSet, arg);
          } else if (Array.isArray(arg)) {
            _parseArray(resultSet, arg);
          } else if (argType === "object") {
            _parseObject(resultSet, arg);
          } else if (argType === "number") {
            _parseNumber(resultSet, arg);
          }
        }
        function _classNames() {
          var len = arguments.length;
          var args = Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
          var classSet = new StorageObject();
          _parseArray(classSet, args);
          var list = [];
          for (var k in classSet) {
            if (classSet[k]) {
              list.push(k);
            }
          }
          return list.join(" ");
        }
        return _classNames;
      }();
      if (typeof module !== "undefined" && module.exports) {
        classNames2.default = classNames2;
        module.exports = classNames2;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames2;
        });
      } else {
        window.classNames = classNames2;
      }
    })();
  }
});

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/zarm/es/collapse/Collapse.js
var import_react = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getActiveKey = function getActiveKey2(props) {
  var multiple = props.multiple, activeKey = props.activeKey, defaultActiveKey = props.defaultActiveKey;
  var value;
  if (typeof activeKey !== "undefined") {
    value = activeKey;
  }
  if (typeof defaultActiveKey !== "undefined") {
    value = defaultActiveKey;
  }
  if (value) {
    return multiple ? [].concat(value) : value;
  }
  return multiple ? [] : void 0;
};
var Collapse = function(_Component) {
  _inherits(Collapse2, _Component);
  var _super = _createSuper(Collapse2);
  function Collapse2() {
    var _this2;
    _classCallCheck(this, Collapse2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      activeKey: getActiveKey(_this2.props)
    };
    _this2.onItemChange = function(onItemChange, key) {
      if (!key) {
        return;
      }
      var activeKey = _this2.state.activeKey;
      var _this$props = _this2.props, onChange2 = _this$props.onChange, multiple = _this$props.multiple;
      var isActive;
      var newActiveKey;
      if (multiple) {
        newActiveKey = [];
        activeKey = activeKey || [];
        if (activeKey.indexOf(key) > -1) {
          newActiveKey = activeKey.filter(function(i) {
            return i !== key;
          });
        } else {
          newActiveKey = activeKey.slice(0);
          newActiveKey.push(key);
        }
        isActive = newActiveKey.indexOf(key) > -1;
      } else {
        activeKey = activeKey;
        newActiveKey = activeKey === key ? void 0 : key;
        isActive = activeKey === key;
      }
      if (!("activeKey" in _this2.props)) {
        _this2.setState({
          activeKey: newActiveKey
        });
      }
      typeof onItemChange === "function" && onItemChange(isActive);
      typeof onChange2 === "function" && onChange2(newActiveKey);
    };
    _this2.renderItems = function() {
      var _this$state = _this2.state, activeKey = _this$state.activeKey, multiple = _this$state.multiple, animated = _this$state.animated;
      return import_react.Children.map(_this2.props.children, function(ele) {
        var _ele$props = ele.props, disabled = _ele$props.disabled, _onChange = _ele$props.onChange;
        var key = ele.key;
        var isActive = multiple ? (activeKey || []).indexOf(key) > -1 : activeKey === key;
        return (0, import_react.cloneElement)(ele, {
          animated,
          isActive,
          onChange: function onChange2() {
            return !disabled && _this2.onItemChange(_onChange, key);
          }
        });
      });
    };
    return _this2;
  }
  _createClass(Collapse2, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, onChange2 = _this$props2.onChange, animated = _this$props2.animated, activeKey = _this$props2.activeKey, defaultActiveKey = _this$props2.defaultActiveKey, rest = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "onChange", "animated", "activeKey", "defaultActiveKey"]);
      var animatedState = this.state.animated;
      var cls = (0, import_classnames.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--animated"), animatedState));
      return import_react.default.createElement("div", _extends({
        className: cls
      }, rest), this.renderItems());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      var newState = {};
      if ("activeKey" in nextProps && nextProps.activeKey !== state.prevActiveKey) {
        newState.activeKey = getActiveKey(nextProps);
        newState.prevActiveKey = nextProps.activeKey;
      }
      if ("animated" in nextProps) {
        newState.animated = nextProps.animated;
      }
      if ("multiple" in nextProps) {
        newState.multiple = nextProps.multiple;
      }
      return "activeKey" in newState || "animated" in newState || "multiple" in newState ? newState : null;
    }
  }]);
  return Collapse2;
}(import_react.Component);
Collapse.defaultProps = {
  prefixCls: "za-collapse",
  multiple: false,
  animated: false,
  onChange: function onChange() {
  }
};
Collapse.Item = void 0;

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// node_modules/zarm/es/collapse/CollapseItem.js
var import_react2 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CollapseItem = function(_PureComponent) {
  _inherits(CollapseItem2, _PureComponent);
  var _super = _createSuper2(CollapseItem2);
  function CollapseItem2() {
    var _this2;
    _classCallCheck(this, CollapseItem2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.content = void 0;
    _this2.state = {
      active: _this2.props.isActive
    };
    _this2.onClickItem = function() {
      var _this$props = _this2.props, onChange2 = _this$props.onChange, disabled = _this$props.disabled;
      var active = _this2.state.active;
      if (disabled)
        return;
      typeof onChange2 === "function" && onChange2(active);
    };
    _this2.setStyle = function() {
      if (!_this2.content)
        return;
      var active = _this2.state.active;
      _this2.content.style.height = active ? "".concat(_this2.getContentHeight(_this2.content), "px") : "0px";
    };
    _this2.getContentHeight = function(content) {
      var children = _toConsumableArray(content.children);
      return children.reduce(function(res, next) {
        res += next.offsetHeight;
        return res;
      }, 0);
    };
    return _this2;
  }
  _createClass(CollapseItem2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setStyle();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.setStyle();
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, title = _this$props2.title, className = _this$props2.className, disabled = _this$props2.disabled, animated = _this$props2.animated, isActive = _this$props2.isActive, children = _this$props2.children, onChange2 = _this$props2.onChange, rest = _objectWithoutProperties(_this$props2, ["prefixCls", "title", "className", "disabled", "animated", "isActive", "children", "onChange"]);
      var active = this.state.active;
      var cls = (0, import_classnames2.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--active"), active), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _classnames));
      return import_react2.default.createElement("div", _extends({
        className: cls
      }, rest), import_react2.default.createElement("div", {
        className: "".concat(prefixCls, "__header"),
        onClick: this.onClickItem
      }, import_react2.default.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title), import_react2.default.createElement("div", {
        className: "".concat(prefixCls, "__arrow")
      })), import_react2.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        ref: function ref(content) {
          _this2.content = content;
        }
      }, import_react2.default.createElement("div", {
        className: "".concat(prefixCls, "__content__inner")
      }, children)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("isActive" in nextProps && nextProps.isActive !== state.prevActive) {
        return {
          active: nextProps.isActive,
          prevActive: nextProps.isActive
        };
      }
      return null;
    }
  }]);
  return CollapseItem2;
}(import_react2.PureComponent);
CollapseItem.defaultProps = {
  prefixCls: "za-collapse-item",
  animated: false,
  disabled: false
};

// node_modules/zarm/es/collapse/index.js
Collapse.Item = CollapseItem;
var collapse_default = Collapse;

// node_modules/zarm/es/action-sheet/ActionSheet.js
var import_react8 = __toESM(require_react());
var import_classnames5 = __toESM(require_classnames());

// node_modules/zarm/es/utils/warnIfDeprecated.js
var import_react3 = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || "Component";
}
function warnIfDeprecated(deprecations) {
  return function Wrapper(WrappedComponent) {
    var WarnIfDeprecatedComp = function(_Component) {
      _inherits(WarnIfDeprecatedComp2, _Component);
      var _super = _createSuper3(WarnIfDeprecatedComp2);
      function WarnIfDeprecatedComp2(props) {
        var _this2;
        _classCallCheck(this, WarnIfDeprecatedComp2);
        _this2 = _super.call(this, props);
        if (deprecations.length) {
          var count = 0;
          deprecations.forEach(function(item) {
            if (item.oldProp && item.newProp && _this2.props[item.oldProp]) {
              console.warn("Warning: ".concat(item.oldProp, " has been renamed, and is not recommended for use.\n\n* Rename ").concat(item.oldProp, " to ").concat(item.newProp, " to suppress this warning."));
              count += 1;
            }
            if (getDisplayName(WrappedComponent) === item.oldComponent) {
              console.warn("Warning: ".concat(item.oldComponent, " has been renamed, and is not recommended for use.\n\n* Rename ").concat(item.oldComponent, " to ").concat(item.newComponent, " to suppress this warning."));
              count += 1;
            }
          });
          if (count) {
            console.warn("Please update the following components: ".concat(getDisplayName(WrappedComponent)));
          }
        }
        return _this2;
      }
      _createClass(WarnIfDeprecatedComp2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, forwardedRef = _this$props.forwardedRef, other = _objectWithoutProperties(_this$props, ["forwardedRef"]);
          var rest = other;
          return import_react3.default.createElement(WrappedComponent, _extends({
            ref: forwardedRef
          }, rest));
        }
      }]);
      return WarnIfDeprecatedComp2;
    }(import_react3.Component);
    var forwardRefComp = function forwardRefComp2(props, ref) {
      return import_react3.default.createElement(WarnIfDeprecatedComp, _extends({}, props, {
        forwardedRef: ref
      }));
    };
    forwardRefComp.displayName = "ForwardedRefComp";
    (0, import_hoist_non_react_statics.default)(forwardRefComp, WrappedComponent);
    var forwardCps = import_react3.default.forwardRef(forwardRefComp);
    return forwardCps;
  };
}

// node_modules/zarm/es/popup/Popup.js
var import_react7 = __toESM(require_react());

// node_modules/zarm/es/popup/Portal.js
var import_react6 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var import_classnames4 = __toESM(require_classnames());

// node_modules/zarm/es/utils/noop.js
function noop() {
}

// node_modules/zarm/es/utils/events.js
var supportsPassive = false;
try {
  opts = Object.defineProperty({}, "passive", {
    get: function get() {
      supportsPassive = true;
      return true;
    }
  });
  window.addEventListener("test", noop, opts);
} catch (e) {
}
var opts;
var events_default = {
  supportsPassiveEvents: supportsPassive,
  on: function on(el, type, callback) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      passive: false
    };
    if (el.addEventListener) {
      el.addEventListener(type, callback, supportsPassive ? options : false);
    } else {
      el.attachEvent("on".concat(type), function() {
        callback.call(el);
      });
    }
  },
  off: function off(el, type, callback) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      passive: false
    };
    if (el.removeEventListener) {
      el.removeEventListener(type, callback, supportsPassive ? options : false);
    } else {
      el.detachEvent("on".concat(type), callback);
    }
  },
  once: function once(el, type, callback) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      passive: false
    };
    var typeArray = type.split(" ");
    var recursiveFunction = function recursiveFunction2(e) {
      if (e.target) {
        e.target.removeEventListener(e.type, recursiveFunction2, supportsPassive ? options : false);
      }
      return callback(e);
    };
    for (var i = typeArray.length - 1; i >= 0; i -= 1) {
      this.on(el, typeArray[i], recursiveFunction);
    }
  }
};

// node_modules/zarm/es/utils/dom.js
var import_raf = __toESM(require_raf());
var getOuterSizes = function getOuterSizes2(ele) {
  var _display = ele.style.display;
  var _visibility = ele.style.visibility;
  ele.style.display = "block";
  ele.style.visibility = "hidden";
  var styles = window.getComputedStyle(ele);
  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
  var result = {
    width: ele.offsetWidth + y,
    height: ele.offsetHeight + x
  };
  ele.style.display = _display;
  ele.style.visibility = _visibility;
  return result;
};
var getScrollTop = function getScrollTop2(ele) {
  if (ele === document.documentElement) {
    return (document.scrollingElement || document.documentElement).scrollTop;
  }
  if (ele === window) {
    return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
  }
  return ele.scrollTop;
};
var getScrollLeft = function getScrollLeft2(ele) {
  if (ele === document.documentElement) {
    return (document.scrollingElement || document.documentElement).scrollLeft;
  }
  if (ele === window) {
    return Math.max(window.pageYOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
  }
  return ele.scrollLeft;
};
var getMountContainer = function getMountContainer2(mountContainer) {
  if (mountContainer) {
    if (typeof mountContainer === "function") {
      return mountContainer();
    }
    if (_typeof(mountContainer) === "object" && mountContainer instanceof HTMLElement) {
      return mountContainer;
    }
  }
  return document.body;
};
var getScrollContainer = function getScrollContainer2(mountContainer) {
  var container = getMountContainer(mountContainer);
  return container === document.body ? window : container;
};
var scrollRafId;
var scrollList = {};
function scrollTo(scrollContainer, top, left, duration) {
  if ((scrollList === null || scrollList === void 0 ? void 0 : scrollList[scrollRafId]) === scrollContainer) {
    import_raf.default.cancel(scrollRafId);
  }
  var count = 0;
  var fromLeft = 0;
  var fromTop = 0;
  if (scrollContainer === window) {
    fromLeft = getScrollLeft(scrollContainer);
    fromTop = getScrollTop(scrollContainer);
  } else {
    fromLeft = scrollContainer.scrollLeft;
    fromTop = scrollContainer.scrollTop;
  }
  var frames = duration === 0 ? 1 : Math.round(duration * 1e3 / 16);
  function animate() {
    if (scrollContainer === window) {
      var x = getScrollLeft(scrollContainer) + (left - fromLeft) / frames;
      var y = getScrollTop(scrollContainer) + (top - fromTop) / frames;
      scrollContainer.scrollTo(x, y);
    } else {
      scrollContainer.scrollLeft += (left - fromLeft) / frames;
      scrollContainer.scrollTop += (top - fromTop) / frames;
    }
    count += 1;
    if (count < frames) {
      scrollRafId = (0, import_raf.default)(animate);
      scrollList[scrollRafId] = scrollContainer;
    }
  }
  animate();
}
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);

// node_modules/zarm/es/mask/index.js
var import_react4 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Mask = function(_PureComponent) {
  _inherits(Mask2, _PureComponent);
  var _super = _createSuper4(Mask2);
  function Mask2() {
    _classCallCheck(this, Mask2);
    return _super.apply(this, arguments);
  }
  _createClass(Mask2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, visible = _this$props.visible, type = _this$props.type, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "visible", "type"]);
      var markCls = (0, import_classnames3.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--").concat(type), !!type));
      return visible && import_react4.default.createElement("div", _extends({
        className: markCls
      }, others));
    }
  }]);
  return Mask2;
}(import_react4.PureComponent);
Mask.defaultProps = {
  prefixCls: "za-mask",
  visible: false,
  type: "normal"
};

// node_modules/zarm/es/trigger/trigger.js
var import_react5 = __toESM(require_react());
function _createSuper5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Trigger = function(_Component) {
  _inherits(Trigger2, _Component);
  var _super = _createSuper5(Trigger2);
  function Trigger2() {
    var _this2;
    _classCallCheck(this, Trigger2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {};
    return _this2;
  }
  _createClass(Trigger2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (Trigger2.count === 0) {
        document.body.addEventListener("keydown", Trigger2.onKeydown);
      }
      Trigger2.count += 1;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var onClose = this.props.onClose;
      var index = Trigger2.instanceList.findIndex(function(c) {
        return c === onClose;
      });
      if (index > -1) {
        Trigger2.instanceList.splice(index, 1);
      }
      Trigger2.count -= 1;
      if (Trigger2.count === 0) {
        document.body.removeEventListener("keydown", Trigger2.onKeydown);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return import_react5.default.createElement(import_react5.default.Fragment, null, children);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      var visible = nextProps.visible, onClose = nextProps.onClose, disabled = nextProps.disabled;
      onClose && (onClose.disabled = disabled);
      if (visible === true && typeof onClose === "function") {
        if (!Trigger2.instanceList.includes(onClose)) {
          Trigger2.instanceList.push(onClose);
        }
      } else {
        var index = Trigger2.instanceList.findIndex(function(c) {
          return c === onClose;
        });
        if (index > -1) {
          Trigger2.instanceList.splice(index, 1);
        }
      }
      return null;
    }
  }, {
    key: "onKeydown",
    value: function onKeydown(e) {
      if (e.keyCode === 27) {
        var lens = Trigger2.instanceList.length;
        var last = Trigger2.instanceList[lens - 1];
        if (last) {
          if (last.disabled) {
            return;
          }
          last();
        }
      }
    }
  }]);
  return Trigger2;
}(import_react5.Component);
Trigger.defaultProps = {
  disabled: false
};
Trigger.count = 0;
Trigger.instanceList = [];
var trigger_default = Trigger;

// node_modules/zarm/es/trigger/index.js
var trigger_default2 = trigger_default;

// node_modules/zarm/es/popup/Portal.js
function _createSuper6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var IS_REACT_16 = !!import_react_dom.default.createPortal;
var Portal = function(_PureComponent) {
  _inherits(Portal2, _PureComponent);
  var _super = _createSuper6(Portal2);
  function Portal2(props) {
    var _this2;
    _classCallCheck(this, Portal2);
    _this2 = _super.call(this, props);
    _this2.enterTimer = void 0;
    _this2.mountNode = void 0;
    _this2._container = void 0;
    _this2._reflow = void 0;
    _this2.popup = void 0;
    _this2.animationEnd = function(e) {
      if (e.target !== _this2.popup) {
        return;
      }
      e.stopPropagation();
      var _this$props = _this2.props, afterClose = _this$props.afterClose, afterOpen = _this$props.afterOpen, handlePortalUnmount = _this$props.handlePortalUnmount, visible = _this$props.visible, prefixCls = _this$props.prefixCls;
      var animationState = visible ? "enter" : "leave";
      if (animationState === "leave") {
        _this2._container && _this2._container.classList.add("".concat(prefixCls, "--hidden"));
        if (typeof handlePortalUnmount === "function") {
          handlePortalUnmount();
        }
        if (typeof afterClose === "function") {
          afterClose();
        }
      } else if (typeof afterOpen === "function") {
        afterOpen();
      }
    };
    _this2.renderMask = function() {
      var _this$props2 = _this2.props, mask = _this$props2.mask, maskType = _this$props2.maskType, animationDuration = _this$props2.animationDuration, visible = _this$props2.visible;
      var isPending = _this2.state.isPending;
      var animationState = visible ? "enter" : "leave";
      var maskCls = (0, import_classnames4.default)(_defineProperty({}, "za-fade-".concat(animationState), isPending));
      var maskStyle = {
        WebkitAnimationDuration: "".concat(animationDuration, "ms"),
        animationDuration: "".concat(animationDuration, "ms")
      };
      return mask && import_react6.default.createElement(Mask, {
        className: maskCls,
        style: maskStyle,
        visible: true,
        type: maskType
      });
    };
    _this2.onEsc = function() {
      var onEsc = _this2.props.onEsc;
      onEsc && onEsc();
    };
    _this2.handleMaskClick = function(e) {
      e.stopPropagation();
      var onMaskClick = _this2.props.onMaskClick;
      if (typeof onMaskClick === "function" && _this2.popup !== e.target && _this2.popup && !_this2.popup.contains(e.target)) {
        onMaskClick();
      }
    };
    _this2.getComponent = function() {
      var _classnames3;
      var _this$props3 = _this2.props, prefixCls = _this$props3.prefixCls, animationType = _this$props3.animationType, animationDuration = _this$props3.animationDuration, direction = _this$props3.direction, mask = _this$props3.mask, children = _this$props3.children, width = _this$props3.width, visible = _this$props3.visible;
      var isPending = _this2.state.isPending;
      var animationState = visible ? "enter" : "leave";
      var cls = {
        wrapper: (0, import_classnames4.default)("".concat(prefixCls, "__wrapper"), _defineProperty({}, "za-fade-".concat(animationState), direction === "center" && isPending)),
        popup: (0, import_classnames4.default)(prefixCls, (_classnames3 = {}, _defineProperty(_classnames3, "".concat(prefixCls, "--").concat(direction), !!direction), _defineProperty(_classnames3, "".concat(prefixCls, "--nomask"), direction === "center" && !mask), _defineProperty(_classnames3, "za-".concat(animationType, "-").concat(animationState), direction === "center" && isPending), _classnames3))
      };
      var wrapStyle = direction === "center" ? {
        WebkitAnimationDuration: "".concat(animationDuration, "ms"),
        animationDuration: "".concat(animationDuration, "ms")
      } : {};
      var popupStyle = direction === "center" ? {
        width,
        WebkitAnimationDuration: "".concat(animationDuration, "ms"),
        animationDuration: "".concat(animationDuration, "ms")
      } : {
        WebkitTransitionDuration: "".concat(animationDuration, "ms"),
        transitionDuration: "".concat(animationDuration, "ms"),
        WebkitTransitionProperty: "transform",
        transitionProperty: "transform"
      };
      if (!mask) {
        return import_react6.default.createElement("div", {
          className: cls.popup,
          style: popupStyle,
          role: "dialog",
          ref: function ref(_ref) {
            _this2.popup = _ref;
          }
        }, children);
      }
      return import_react6.default.createElement(import_react6.default.Fragment, null, _this2.renderMask(), import_react6.default.createElement("div", {
        role: "dialog",
        className: cls.wrapper,
        style: wrapStyle,
        "data-width": _this2._reflow,
        onClick: function onClick2(e) {
          _this2.handleMaskClick(e);
        }
      }, import_react6.default.createElement("div", {
        ref: function ref(_ref2) {
          _this2.popup = _ref2;
        },
        "data-width": _this2._reflow,
        className: cls.popup,
        style: popupStyle,
        role: "document"
      }, children)));
    };
    _this2.handleAnimation = function() {
      var _this$props4 = _this2.props, visible = _this$props4.visible, prefixCls = _this$props4.prefixCls;
      if (visible) {
        if (_this2.popup) {
          _this2._container && _this2._container.classList.remove("".concat(prefixCls, "--hidden"));
          _this2.setState({
            isPending: true
          });
          _this2._reflow = _this2.popup.offsetWidth;
          _this2.popup.classList.add("".concat(prefixCls, "--show"));
        }
      } else {
        _this2.setState({
          isPending: true
        });
        if (_this2.popup) {
          _this2.popup.classList.remove("".concat(prefixCls, "--show"));
        }
      }
    };
    _this2.renderPortal = function() {
      var mountContainer = _this2.props.mountContainer;
      if (!canUseDOM) {
        return null;
      }
      if (mountContainer === false) {
        return _this2.getComponent();
      }
      if (_this2._container) {
        if (!IS_REACT_16) {
          import_react_dom.default.unstable_renderSubtreeIntoContainer(_assertThisInitialized(_this2), _this2.getComponent(), _this2._container);
          return null;
        }
        return import_react_dom.default.createPortal(_this2.getComponent(), _this2._container);
      }
      return null;
    };
    _this2.createContainer = function() {
      var _this$props5 = _this2.props, _this$props5$classNam = _this$props5.className, className = _this$props5$classNam === void 0 ? "" : _this$props5$classNam, prefixCls = _this$props5.prefixCls, mountContainer = _this$props5.mountContainer;
      if (mountContainer === false) {
        return;
      }
      if (!_this2._container) {
        _this2._container = document.createElement("div");
        _this2._container.className += (0, import_classnames4.default)(["".concat(prefixCls, "-container"), className]);
        _this2.mountNode = getMountContainer(mountContainer);
        _this2.mountNode.appendChild(_this2._container);
      }
      return _this2._container;
    };
    _this2.state = {
      isPending: false
    };
    if (props.mountContainer !== false) {
      _this2.createContainer();
    }
    return _this2;
  }
  _createClass(Portal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.popup) {
        events_default.on(this.popup, "webkitTransitionEnd", this.animationEnd);
        events_default.on(this.popup, "transitionend", this.animationEnd);
        events_default.on(this.popup, "webkitAnimationEnd", this.animationEnd);
        events_default.on(this.popup, "animationend", this.animationEnd);
      }
      this.handleAnimation();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;
      if (prevProps.visible !== visible) {
        this.handleAnimation();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.popup) {
        events_default.off(this.popup, "webkitTransitionEnd", this.animationEnd);
        events_default.off(this.popup, "transitionend", this.animationEnd);
        events_default.off(this.popup, "webkitAnimationEnd", this.animationEnd);
        events_default.off(this.popup, "animationend", this.animationEnd);
      }
      clearTimeout(this.enterTimer);
      if (this._container && this.mountNode) {
        this.mountNode.removeChild(this._container);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var visible = this.props.visible;
      return import_react6.default.createElement(trigger_default2, {
        visible,
        onClose: this.onEsc
      }, this.renderPortal());
    }
  }]);
  return Portal2;
}(import_react6.PureComponent);
Portal.defaultProps = {
  prefixCls: "za-popup",
  visible: false,
  mask: true,
  direction: "bottom",
  animationType: "fade",
  animationDuration: 200,
  maskType: Mask.defaultProps.type
};

// node_modules/zarm/es/popup/Popup.js
function _createSuper7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Popup = function(_PureComponent) {
  _inherits(Popup2, _PureComponent);
  var _super = _createSuper7(Popup2);
  function Popup2(props) {
    var _this2;
    _classCallCheck(this, Popup2);
    _this2 = _super.call(this, props);
    _this2.portalRef = void 0;
    _this2.state = {
      renderPortal: false,
      portalVisible: false
    };
    _this2.handlePortalUnmount = _this2.handlePortalUnmount.bind(_assertThisInitialized(_this2));
    return _this2;
  }
  _createClass(Popup2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var visible = this.props.visible;
      if (visible) {
        this.setState({
          renderPortal: true,
          portalVisible: true
        });
      }
    }
  }, {
    key: "handlePortalUnmount",
    value: function handlePortalUnmount() {
      var destroy2 = this.props.destroy;
      if (destroy2) {
        this.setState({
          renderPortal: false
        });
      } else {
        this.setState({
          renderPortal: true,
          portalVisible: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$state = this.state, renderPortal = _this$state.renderPortal, portalVisible = _this$state.portalVisible;
      return renderPortal && import_react7.default.createElement(Portal, _extends({
        ref: function ref(_ref) {
          _this2.portalRef = _ref;
        }
      }, this.props, {
        visible: portalVisible,
        handlePortalUnmount: this.handlePortalUnmount
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.visible !== state.portalVisible) {
        if (props.visible) {
          return {
            renderPortal: true,
            portalVisible: true
          };
        }
        return {
          portalVisible: false
        };
      }
      return null;
    }
  }]);
  return Popup2;
}(import_react7.PureComponent);
Popup.defaultProps = {
  prefixCls: "za-popup",
  destroy: true,
  visible: false
};

// node_modules/zarm/es/popup/index.js
var popup_default = warnIfDeprecated([{
  oldProp: "getContainer",
  newProp: "mountContainer"
}])(Popup);

// node_modules/zarm/es/action-sheet/ActionSheet.js
function _createSuper8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ActionSheet = function(_PureComponent) {
  _inherits(ActionSheet2, _PureComponent);
  var _super = _createSuper8(ActionSheet2);
  function ActionSheet2() {
    var _this2;
    _classCallCheck(this, ActionSheet2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.renderActions = function(action, index) {
      var prefixCls = _this2.props.prefixCls;
      var actionCls = (0, import_classnames5.default)("".concat(prefixCls, "__item"), action.className, _defineProperty({}, "".concat(prefixCls, "__item--").concat(action.theme), !!action.theme));
      return import_react8.default.createElement("div", {
        key: +index,
        className: actionCls,
        onClick: action.onClick
      }, action.text);
    };
    _this2.renderCancel = function() {
      var _this$props = _this2.props, prefixCls = _this$props.prefixCls, onCancel3 = _this$props.onCancel, cancelText = _this$props.cancelText, locale = _this$props.locale;
      return typeof onCancel3 === "function" && import_react8.default.createElement("div", {
        className: "".concat(prefixCls, "__cancel")
      }, import_react8.default.createElement("div", {
        className: "".concat(prefixCls, "__item"),
        onClick: onCancel3
      }, cancelText || locale.cancelText));
    };
    return _this2;
  }
  _createClass(ActionSheet2, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, spacing = _this$props2.spacing, visible = _this$props2.visible, onMaskClick = _this$props2.onMaskClick, actions = _this$props2.actions, destroy2 = _this$props2.destroy;
      var cls = (0, import_classnames5.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "--spacing"), spacing));
      return import_react8.default.createElement(popup_default, {
        className,
        visible,
        onMaskClick,
        destroy: destroy2
      }, import_react8.default.createElement("div", {
        className: cls
      }, import_react8.default.createElement("div", {
        className: "".concat(prefixCls, "__actions")
      }, actions.map(this.renderActions)), this.renderCancel()));
    }
  }]);
  return ActionSheet2;
}(import_react8.PureComponent);
ActionSheet.defaultProps = {
  prefixCls: "za-action-sheet",
  visible: false,
  spacing: false,
  actions: [],
  destroy: true
};

// node_modules/zarm/es/config-receiver/ConfigReceiver.js
var import_react10 = __toESM(require_react());
var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/zarm/es/config-provider/ConfigProvider.js
var import_react9 = __toESM(require_react());

// node_modules/zarm/es/config-provider/setTheme.js
var themes = {
  "--theme-primary-lighter": "#303030",
  "--color-text": "rgba(255, 255, 255, 0.85)",
  "--color-text-inverse": "rgba(255, 255, 255, 0.8)",
  "--color-text-placeholder": "rgba(255, 255, 255, 0.3)",
  "--color-text-disabled": "#666",
  "--border-color": "#3a3b3d",
  "--opacity-mask": "0.7",
  "--activity-indicator-path-color": "var(--border-color)",
  "--action-sheet-background": "#1b1c1e",
  "--action-sheet-active-background": "#363738",
  "--alert-button-background": "#2b2c2d",
  "--alert-button-active-background": "#363738",
  "--button-default-background": "#393939",
  "--button-default-border": "transparent",
  "--button-default-color": "rgba(255, 255, 255, 0.85)",
  "--button-default-active-background": "rgba(255, 255, 255, 0.2)",
  "--button-default-active-border": "transparent",
  "--button-default-active-color": "#fff",
  "--calendar-background": "transparent",
  "--calendar-week-bar-background": "#303030",
  "--cell-background": "#222",
  "--cell-background-active": "#363738",
  "--cell-arrow-color": "#666",
  "--cell-arrow-disabled-color": "#333",
  "--checkbox-background": "transparent",
  "--checkbox-border-color": "#58595d",
  "--checkbox-disabled-background": "#555",
  "--checkbox-disabled-color": "rgba(255, 255, 255, 0.3)",
  "--collapse-arrow-color": "#666",
  "--collapse-arrow-disabled-color": "#333",
  "--confirm-button-background": "#2b2c2d",
  "--confirm-button-active-background": "#363738",
  "--keyboard-background": "#000",
  "--keyboard-item-background": "rgba(255, 255, 255, 0.1)",
  "--loading-background": "#2b2c2d",
  "--modal-background": "#2b2c2d",
  "--modal-close-color": "rgba(255, 255, 255, 0.3)",
  "--modal-close-active-color": "rgba(255, 255, 255, 0.65)",
  "--nav-bar-color": "#1b1c1e",
  "--panel-body-background": "#1b1c1e",
  "--picker-background": "#000",
  "--picker-header-background": "#1b1c1e",
  "--picker-mask-background-start": "rgba(0, 0, 0, 0.4)",
  "--picker-mask-background-end": "rgba(0, 0, 0, 0.8)",
  "--progress-background": "var(--border-color)",
  "--radio-background": "transparent",
  "--radio-border-color": "#58595d",
  "--radio-disabled-background": "#555",
  "--radio-disabled-color": "rgba(255, 255, 255, 0.3)",
  "--search-bar-background": "#1b1c1e",
  "--search-bar-inner-background": "#000",
  "--slider-line-dot-color": "var(--border-color)",
  "--switch-background": "#38393d",
  "--stack-picker-background": "#000",
  "--stack-picker-shadow": "none",
  "--stepper-input-background": "#000",
  "--tabbar-background": "#1b1c1e",
  "--toast-background": "#2b2c2d",
  "--tooltip-background": "#5b5c60"
};
var setTheme = function setTheme2(value) {
  document.body.setAttribute("data-theme", value);
  Object.keys(themes).forEach(function(key) {
    value === "dark" ? document.documentElement.style.setProperty(key, themes[key]) : document.documentElement.style.removeProperty(key);
  });
};
var setTheme_default = setTheme;

// node_modules/zarm/es/config-provider/setPrimaryColor.js
var import_color = __toESM(require_color());
var setPrimaryColor = function setPrimaryColor2(color) {
  document.documentElement.style.setProperty("--theme-primary", color);
  document.documentElement.style.setProperty("--theme-primary-dark", (0, import_color.default)(color).darken(0.05).string());
  document.documentElement.style.setProperty("--theme-primary-lighter", (0, import_color.default)(color).lightness(95).string());
  document.documentElement.style.setProperty("--button-primary-shadow-color", (0, import_color.default)(color).alpha(0.3).string());
};
var setPrimaryColor_default = setPrimaryColor;

// node_modules/zarm/es/config-provider/ConfigProvider.js
function _createSuper9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var defaultConfig = {
  locale: {},
  theme: "light",
  primaryColor: "#00bc70"
};
var LocaleContext = (0, import_react9.createContext)(defaultConfig.locale);
var ConfigContext = (0, import_react9.createContext)(defaultConfig);
var runTimeLocale;
var changeRunTimeLocale = function changeRunTimeLocale2(locale) {
  runTimeLocale = locale;
};
var getRunTimeLocale = function getRunTimeLocale2() {
  return runTimeLocale;
};
var ConfigProvider = function(_PureComponent) {
  _inherits(ConfigProvider2, _PureComponent);
  var _super = _createSuper9(ConfigProvider2);
  function ConfigProvider2() {
    _classCallCheck(this, ConfigProvider2);
    return _super.apply(this, arguments);
  }
  _createClass(ConfigProvider2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, children = _this$props.children, locale = _this$props.locale, theme = _this$props.theme, primaryColor = _this$props.primaryColor;
      changeRunTimeLocale(locale);
      setTheme_default(theme);
      setPrimaryColor_default(primaryColor);
      return import_react9.default.createElement(ConfigContext.Provider, {
        value: {
          locale,
          theme,
          primaryColor
        }
      }, import_react9.default.Children.only(children));
    }
  }]);
  return ConfigProvider2;
}(import_react9.PureComponent);
ConfigProvider.defaultProps = defaultConfig;

// node_modules/zarm/es/action-sheet/locale/zh_CN.js
var zh_CN_default = {
  cancelText: "取消"
};

// node_modules/zarm/es/alert/locale/zh_CN.js
var zh_CN_default2 = {
  cancelText: "关闭"
};

// node_modules/zarm/es/confirm/locale/zh_CN.js
var zh_CN_default3 = {
  cancelText: "取消",
  okText: "确定"
};

// node_modules/zarm/es/date-picker/locale/zh_CN.js
var zh_CN_default4 = {
  cancelText: "取消",
  okText: "确定",
  title: "请选择"
};

// node_modules/zarm/es/date-picker-view/locale/zh_CN.js
var zh_CN_default5 = {
  year: "年",
  month: "月",
  day: "日",
  hour: "时",
  minute: "分"
};

// node_modules/zarm/es/date-select/locale/zh_CN.js
var zh_CN_default6 = {
  placeholder: "请选择"
};

// node_modules/zarm/es/picker/locale/zh_CN.js
var zh_CN_default7 = {
  cancelText: "取消",
  okText: "确定",
  title: "请选择"
};

// node_modules/zarm/es/stack-picker/locale/zh_CN.js
var zh_CN_default8 = {
  cancelText: "取消",
  okText: "确定"
};

// node_modules/zarm/es/pull/locale/zh_CN.js
var zh_CN_default9 = {
  pullText: "下拉刷新",
  dropText: "释放立即刷新",
  loadingText: "加载中",
  successText: "加载成功",
  failureText: "加载失败",
  completeText: "我是有底线的"
};

// node_modules/zarm/es/search-bar/locale/zh_CN.js
var zh_CN_default10 = {
  placeholder: "搜索",
  cancelText: "取消"
};

// node_modules/zarm/es/select/locale/zh_CN.js
var zh_CN_default11 = {
  placeholder: "请选择"
};

// node_modules/zarm/es/keyboard/locale/zh_CN.js
var zh_CN_default12 = {
  okText: "确定"
};

// node_modules/zarm/es/image-preview/locale/zh_CN.js
var zh_CN_default13 = {
  loadBefore: "查看原图",
  loadStart: "加载中",
  loadEnd: "加载完成"
};

// node_modules/zarm/es/config-provider/locale/zh_CN.js
var zh_CN_default14 = {
  locale: "zh-CN",
  ActionSheet: zh_CN_default,
  Alert: zh_CN_default2,
  Confirm: zh_CN_default3,
  DatePicker: zh_CN_default4,
  DatePickerView: zh_CN_default5,
  DateSelect: zh_CN_default6,
  Picker: zh_CN_default7,
  StackPicker: zh_CN_default8,
  Pull: zh_CN_default9,
  SearchBar: zh_CN_default10,
  Select: zh_CN_default11,
  Keyboard: zh_CN_default12,
  ImagePreview: zh_CN_default13
};

// node_modules/zarm/es/config-receiver/ConfigReceiver.js
var defaultConfigData = {
  locale: zh_CN_default14
};
var ConfigReceiverWrapper = function ConfigReceiverWrapper2(name, defaultConfig2) {
  return function InnerWrapper(WrappedComponent) {
    var ConfigReceiver = function ConfigReceiver2(props) {
      return import_react10.default.createElement(ConfigContext.Consumer, null, function(_ref) {
        var locale = _ref.locale;
        var globalLocale = locale.locale ? locale : (defaultConfig2 === null || defaultConfig2 === void 0 ? void 0 : defaultConfig2.locale) || (defaultConfigData === null || defaultConfigData === void 0 ? void 0 : defaultConfigData.locale);
        var componentLocale = globalLocale[name || WrappedComponent.name];
        var localeCode = globalLocale.locale;
        var forwardedRef = props.forwardedRef, rest = _objectWithoutProperties(props, ["forwardedRef"]);
        return import_react10.default.createElement(WrappedComponent, _extends({}, rest, {
          ref: forwardedRef,
          locale: componentLocale,
          localeCode
        }));
      });
    };
    var forwardRef = function forwardRef2(props, ref) {
      return import_react10.default.createElement(ConfigReceiver, _extends({}, props, {
        forwardedRef: ref
      }));
    };
    var ConfigReceiverWithRef = import_react10.default.forwardRef(forwardRef);
    (0, import_hoist_non_react_statics2.default)(ConfigReceiverWithRef, WrappedComponent);
    return ConfigReceiverWithRef;
  };
};
var ConfigReceiver_default = ConfigReceiverWrapper;

// node_modules/zarm/es/config-receiver/index.js
var config_receiver_default = ConfigReceiver_default;

// node_modules/zarm/es/action-sheet/index.js
var action_sheet_default = config_receiver_default("ActionSheet")(ActionSheet);

// node_modules/zarm/es/back-to-top/index.js
var import_react12 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
var import_classnames6 = __toESM(require_classnames());

// node_modules/zarm/es/scroller/index.js
var import_react11 = __toESM(require_react());

// node_modules/zarm/es/utils/throttle.js
var _this = void 0;
var throttle = function throttle2(func, delay) {
  var timer;
  var startTime = Date.now();
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var curTime = Date.now();
    var remaining = delay - (curTime - startTime);
    clearTimeout(timer);
    if (remaining <= 0) {
      func.apply(_this, args);
      startTime = curTime;
    } else {
      timer = window.setTimeout(function() {
        func.apply(_this, args);
        startTime = Date.now();
      }, remaining);
    }
  };
};
var throttle_default = throttle;

// node_modules/zarm/es/scroller/index.js
function _createSuper10(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct10();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct10() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Scroller = function(_PureComponent) {
  _inherits(Scroller3, _PureComponent);
  var _super = _createSuper10(Scroller3);
  function Scroller3() {
    var _this2;
    _classCallCheck(this, Scroller3);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.mounted = void 0;
    _this2.scrollThrottled = _this2.props.onScroll ? throttle_default(_this2.props.onScroll, 250) : noop;
    _this2.onScroll = function() {
      var onScroll = _this2.props.onScroll;
      if (!_this2.mounted)
        return;
      typeof onScroll === "function" && _this2.scrollThrottled(_this2.scrollTop);
    };
    _this2.bindEvent = function() {
      _this2.scrollContainer && events_default.on(_this2.scrollContainer, "scroll", _this2.onScroll);
    };
    _this2.unBindEvent = function() {
      _this2.scrollContainer && events_default.off(_this2.scrollContainer, "scroll", _this2.onScroll);
    };
    return _this2;
  }
  _createClass(Scroller3, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.bindEvent();
      this.mounted = true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var container = this.props.container;
      if (prevProps.container !== container) {
        this.bindEvent();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unBindEvent();
      this.mounted = false;
    }
  }, {
    key: "scrollContainer",
    get: function get() {
      var container = this.props.container;
      return getScrollContainer(container);
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return getScrollTop(this.scrollContainer);
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children || null;
    }
  }]);
  return Scroller3;
}(import_react11.PureComponent);
Scroller.displayName = "Scroller";
Scroller.defaultProps = {
  prefixCls: "za-scroller",
  container: canUseDOM ? window : void 0
};

// node_modules/zarm/es/back-to-top/index.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper11(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct11();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct11() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var BackToTop = function(_PureComponent) {
  _inherits(BackToTop2, _PureComponent);
  var _super = _createSuper11(BackToTop2);
  function BackToTop2() {
    var _this2;
    _classCallCheck(this, BackToTop2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      visible: false
    };
    _this2.timer = void 0;
    _this2.portalContainer = void 0;
    _this2.scroller = void 0;
    _this2.onScroll = function(scrollTop) {
      _this2.setState({
        visible: scrollTop > _this2.props.visibleDistance
      });
    };
    _this2.scrollToTop = function(e) {
      var _this$props = _this2.props, speed = _this$props.speed, onClick2 = _this$props.onClick;
      var _assertThisInitialize = _assertThisInitialized(_this2), container = _assertThisInitialize.container;
      if (typeof onClick2 === "function") {
        onClick2(e);
      }
      if (speed === 0 || speed === Infinity) {
        scrollTo(container, 0, 0, 0);
        return;
      }
      var x = _this2.props.speed;
      scrollTo(container, 0, 0, _this2.scrollTop / (x / 10 * 1e3));
    };
    return _this2;
  }
  _createClass(BackToTop2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.parent.appendChild(this.getPortalContainer);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var scrollContainer = this.props.scrollContainer;
      if (prevProps.scrollContainer !== scrollContainer) {
        this.parent.appendChild(this.portalContainer);
        this.onScroll(this.scrollTop);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.timer);
      this.parent && this.parent.removeChild(this.portalContainer);
    }
  }, {
    key: "parent",
    get: function get() {
      if (!canUseDOM || this.container === window) {
        return document.body;
      }
      return this.container;
    }
  }, {
    key: "container",
    get: function get() {
      return this.scroller ? this.scroller.scrollContainer : window;
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return this.scroller ? this.scroller.scrollTop : 0;
    }
  }, {
    key: "renderPortal",
    get: function get() {
      var _this2 = this;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, style2 = _this$props2.style, scrollContainer = _this$props2.scrollContainer, children = _this$props2.children;
      var visible = this.state.visible;
      var containerStyle = _objectSpread({
        display: !visible ? "none" : "inline",
        position: this.container !== window ? "absolute" : "fixed",
        bottom: 50,
        right: 50
      }, style2);
      return (0, import_react_dom2.createPortal)(import_react12.default.createElement(import_react12.default.Fragment, null, import_react12.default.createElement("div", {
        className: prefixCls,
        style: containerStyle,
        onClick: this.scrollToTop
      }, children), import_react12.default.createElement(Scroller, {
        ref: function ref(ele) {
          _this2.scroller = ele;
        },
        container: scrollContainer,
        onScroll: this.onScroll
      })), this.getPortalContainer);
    }
  }, {
    key: "getPortalContainer",
    get: function get() {
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className;
      if (!this.portalContainer) {
        var container = document.createElement("div");
        container.className = (0, import_classnames6.default)("".concat(prefixCls, "-container"), className);
        this.portalContainer = container;
      }
      return this.portalContainer;
    }
  }, {
    key: "render",
    value: function render() {
      if (!canUseDOM) {
        return null;
      }
      return this.renderPortal;
    }
  }]);
  return BackToTop2;
}(import_react12.PureComponent);
BackToTop.displayName = "BackToTop";
BackToTop.defaultProps = {
  prefixCls: "za-back-to-top",
  speed: 100,
  visibleDistance: 400,
  scrollContainer: canUseDOM ? window : void 0
};

// node_modules/zarm/es/badge/index.js
var import_react13 = __toESM(require_react());
var import_classnames7 = __toESM(require_classnames());
function _createSuper12(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct12();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct12() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Badge = function(_PureComponent) {
  _inherits(Badge2, _PureComponent);
  var _super = _createSuper12(Badge2);
  function Badge2() {
    _classCallCheck(this, Badge2);
    return _super.apply(this, arguments);
  }
  _createClass(Badge2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, theme = _this$props.theme, shape = _this$props.shape, text2 = _this$props.text, children = _this$props.children, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "theme", "shape", "text", "children"]);
      var cls = (0, import_classnames7.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), shape), _defineProperty(_classnames, "".concat(prefixCls, "--sup"), !!children), _classnames));
      return import_react13.default.createElement("span", {
        className: cls
      }, children, import_react13.default.createElement("sup", _extends({
        className: "".concat(prefixCls, "__content")
      }, others), shape !== "dot" && text2));
    }
  }]);
  return Badge2;
}(import_react13.PureComponent);
Badge.defaultProps = {
  prefixCls: "za-badge",
  shape: "dot",
  theme: "danger"
};

// node_modules/zarm/es/button/index.js
var import_react15 = __toESM(require_react());
var import_classnames9 = __toESM(require_classnames());

// node_modules/zarm/es/activity-indicator/index.js
var import_react14 = __toESM(require_react());
var import_classnames8 = __toESM(require_classnames());
function _createSuper13(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct13();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct13() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DIAMETER = 62;
var Circular = function Circular2(props) {
  var _classnames;
  var prefixCls = props.prefixCls, className = props.className, size = props.size, percent = props.percent, strokeWidth = props.strokeWidth, loading = props.loading, style2 = props.style;
  var cls = (0, import_classnames8.default)(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--circular"), loading), _classnames));
  var half = DIAMETER / 2;
  var r = half - strokeWidth / 2;
  var round = 2 * Math.PI * r;
  var lineStyle = {
    strokeDasharray: "".concat(round * percent / 100, " ").concat(round),
    strokeWidth
  };
  if (loading) {
    return import_react14.default.createElement("span", {
      className: cls,
      style: style2
    }, import_react14.default.createElement("svg", {
      viewBox: "".concat(DIAMETER / 2, " ").concat(DIAMETER / 2, " ").concat(DIAMETER, " ").concat(DIAMETER)
    }, import_react14.default.createElement("circle", {
      cx: DIAMETER,
      cy: DIAMETER,
      r,
      fill: "none",
      style: {
        strokeWidth
      }
    })));
  }
  return import_react14.default.createElement("span", {
    className: cls,
    style: style2
  }, import_react14.default.createElement("svg", {
    viewBox: "0 0 ".concat(DIAMETER, " ").concat(DIAMETER)
  }, import_react14.default.createElement("circle", {
    className: "".concat(prefixCls, "__path"),
    cx: half,
    cy: half,
    r,
    fill: "none",
    style: {
      strokeWidth
    }
  }), import_react14.default.createElement("circle", {
    className: "".concat(prefixCls, "__line"),
    cx: half,
    cy: half,
    r,
    fill: "none",
    style: lineStyle
  })));
};
var Spinner = function Spinner2(props) {
  var prefixCls = props.prefixCls, className = props.className, size = props.size, style2 = props.style;
  var cls = (0, import_classnames8.default)(prefixCls, "".concat(prefixCls, "--spinner"), className, _defineProperty({}, "".concat(prefixCls, "--").concat(size), !!size));
  var spinner = [];
  for (var i = 0; i < 12; i++) {
    spinner.push(import_react14.default.createElement("div", {
      key: i
    }));
  }
  return import_react14.default.createElement("div", {
    className: cls,
    style: style2
  }, spinner);
};
var ActivityIndicator = function(_PureComponent) {
  _inherits(ActivityIndicator2, _PureComponent);
  var _super = _createSuper13(ActivityIndicator2);
  function ActivityIndicator2() {
    _classCallCheck(this, ActivityIndicator2);
    return _super.apply(this, arguments);
  }
  _createClass(ActivityIndicator2, [{
    key: "render",
    value: function render() {
      var type = this.props.type;
      return type !== "spinner" ? import_react14.default.createElement(Circular, this.props) : import_react14.default.createElement(Spinner, this.props);
    }
  }]);
  return ActivityIndicator2;
}(import_react14.PureComponent);
ActivityIndicator.defaultProps = {
  prefixCls: "za-activity-indicator",
  strokeWidth: 5,
  percent: 20,
  type: "circular",
  loading: true
};

// node_modules/zarm/es/button/index.js
function _createSuper14(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct14();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct14() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Button = function(_PureComponent) {
  _inherits(Button2, _PureComponent);
  var _super = _createSuper14(Button2);
  function Button2() {
    var _this2;
    _classCallCheck(this, Button2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.onClick = function(e) {
      var _this$props = _this2.props, disabled = _this$props.disabled, onClick2 = _this$props.onClick;
      if (disabled) {
        return;
      }
      if (typeof onClick2 === "function") {
        onClick2(e);
      }
    };
    return _this2;
  }
  _createClass(Button2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, theme = _this$props2.theme, size = _this$props2.size, shape = _this$props2.shape, icon = _this$props2.icon, block = _this$props2.block, ghost = _this$props2.ghost, shadow = _this$props2.shadow, disabled = _this$props2.disabled, loading = _this$props2.loading, onClick2 = _this$props2.onClick, children = _this$props2.children, rest = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "theme", "size", "shape", "icon", "block", "ghost", "shadow", "disabled", "loading", "onClick", "children"]);
      var cls = (0, import_classnames9.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--block"), !!block), _defineProperty(_classnames, "".concat(prefixCls, "--ghost"), !!ghost), _defineProperty(_classnames, "".concat(prefixCls, "--shadow"), !!shadow), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), !!disabled), _classnames));
      var iconRender = loading ? import_react15.default.createElement(ActivityIndicator, null) : icon;
      var childrenRender = children && import_react15.default.createElement("span", null, children);
      var contentRender = !!icon || loading ? import_react15.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, iconRender, childrenRender) : childrenRender;
      if (rest.href !== void 0) {
        var _htmlType = rest.htmlType, _filteredRest = _objectWithoutProperties(rest, ["htmlType"]);
        var _ref = _filteredRest, _mimeType = _ref.mimeType, anchorRest = _objectWithoutProperties(_ref, ["mimeType"]);
        cls = (0, import_classnames9.default)(cls, "".concat(prefixCls, "--link"));
        return import_react15.default.createElement("a", _extends({}, anchorRest, {
          type: _mimeType,
          "aria-disabled": disabled,
          className: cls,
          onClick: this.onClick
        }), contentRender);
      }
      var mimeType = rest.mimeType, target = rest.target, filteredRest = _objectWithoutProperties(rest, ["mimeType", "target"]);
      var _ref2 = filteredRest, htmlType = _ref2.htmlType, nativeRest = _objectWithoutProperties(_ref2, ["htmlType"]);
      return import_react15.default.createElement("button", _extends({}, nativeRest, {
        type: htmlType,
        "aria-disabled": disabled,
        className: cls,
        onClick: this.onClick
      }), contentRender);
    }
  }]);
  return Button2;
}(import_react15.PureComponent);
Button.displayName = "Button";
Button.defaultProps = {
  prefixCls: "za-button",
  theme: "default",
  size: "md",
  shape: "radius",
  block: false,
  ghost: false,
  shadow: false,
  disabled: false,
  loading: false,
  htmlType: "button"
};

// node_modules/zarm/es/calendar/index.js
var import_react17 = __toESM(require_react());
var import_classnames11 = __toESM(require_classnames());

// node_modules/zarm/es/calendar/Month.js
var import_react16 = __toESM(require_react());
var import_classnames10 = __toESM(require_classnames());

// node_modules/zarm/es/utils/date.js
var date_default = {
  // 返回月份中的第一天是星期几
  firstDayOfMonth: function firstDayOfMonth(date) {
    var d = date.constructor === Date ? date : this.cloneDate(date, "dd", 1);
    return d.getDay();
  },
  // 获取当月天数
  getDaysInMonth: function getDaysInMonth(year, month) {
    return new Date(year, month, 0).getDate();
  },
  // 获取当月天数
  getDaysByDate: function getDaysByDate(date) {
    var tmp = this.parseDate(date);
    return new Date(tmp.getFullYear(), tmp.getMonth() + 1, 0).getDate();
  },
  // 获取当月信息
  getCurrMonthInfo: function getCurrMonthInfo(year, month) {
    return {
      dayCount: new Date(year, month + 1, 0).getDate(),
      // 总天数
      firstDay: new Date(year, month, 1).getDay()
      // 第一天是周几
    };
  },
  // 判断闰年还是平年
  isLeapYear: function isLeapYear(year) {
    if (year === "" || !Number.isSafeInteger(+year)) {
      throw new Error("年份格式不正确");
    }
    year = +year;
    if (year < 1790) {
      throw new Error("年份不能低于1790");
    }
    return +year % 4 === 0 && +year % 100 !== 0 || +year % 400 === 0;
  },
  // 获取时间差的月份数
  getMonthCount: function getMonthCount(date1, date2) {
    var tmp1 = this.parseDate(date1);
    var tmp2 = this.parseDate(date2);
    var dur = (tmp2.getFullYear() - tmp1.getFullYear()) * 12 + (tmp2.getMonth() - tmp1.getMonth());
    return Math.abs(dur) + 1;
  },
  // 是否是今天(只判断年月日)
  isToday: function isToday(date) {
    return this.isOneDay(date, /* @__PURE__ */ new Date());
  },
  // 两个日期是否同一天
  isOneDay: function isOneDay(date1, date2) {
    if (!date1 || !date2) {
      return false;
    }
    var tmp1 = this.parseDate(date1);
    var tmp2 = this.parseDate(date2);
    return tmp1.toDateString() === tmp2.toDateString();
  },
  // 两个日期是否同一个月
  isOneMonth: function isOneMonth(date1, date2) {
    if (!date1 || !date2) {
      return false;
    }
    var tmp1 = this.parseDate(date1);
    var tmp2 = this.parseDate(date2);
    return tmp1.getFullYear() === tmp2.getFullYear() && tmp1.getMonth() === tmp2.getMonth();
  },
  // 周几
  getDay: function getDay(date, opt) {
    var realDate = this.cloneDate(date);
    var array = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];
    if (opt && opt instanceof Array) {
      array = opt;
    }
    return array[realDate.getDay()];
  },
  // 标准化日期, 时间均为00:00:00
  parseDay: function parseDay(date) {
    var tmp = this.parseDate(date);
    return new Date(tmp.getFullYear(), tmp.getMonth(), tmp.getDate());
  },
  // 标准化时间
  parseDate: function parseDate(date) {
    if (date.constructor === Date) {
      return date;
    }
    if (date.constructor === String) {
      if (+date) {
        return /* @__PURE__ */ new Date(+date);
      }
      date = date.replace(/-/gi, "/");
    }
    return new Date(date);
  },
  // 克隆日期
  cloneDate: function cloneDate(date, type, during) {
    var tmp = new Date(this.parseDate(date));
    if (!type || !during) {
      return tmp;
    }
    switch (type) {
      case "y":
        tmp.setFullYear(tmp.getFullYear() + during);
        break;
      case "yyyy":
        tmp.setFullYear(during);
        break;
      case "m":
        tmp.setMonth(tmp.getMonth() + during);
        break;
      case "mm":
        tmp.setMonth(during);
        break;
      case "d":
        tmp.setDate(tmp.getDate() + during);
        break;
      case "dd":
        tmp.setDate(during);
        break;
      default:
        break;
    }
    return tmp;
  }
};

// node_modules/zarm/es/calendar/Month.js
function _createSuper15(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct15();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct15() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CalendarMonthView = function(_Component) {
  _inherits(CalendarMonthView2, _Component);
  var _super = _createSuper15(CalendarMonthView2);
  function CalendarMonthView2(_props) {
    var _this2;
    _classCallCheck(this, CalendarMonthView2);
    _this2 = _super.call(this, _props);
    _this2.min = void 0;
    _this2.max = void 0;
    _this2.lastIn = false;
    _this2.isRefresh = true;
    _this2.node = void 0;
    _this2.anchor = function() {
      if (_this2.node && _this2.node.scrollIntoViewIfNeeded) {
        _this2.node.scrollIntoViewIfNeeded();
      }
    };
    _this2.checkRefresh = function(props) {
      var dateMonth = props.dateMonth, value = props.value, min = props.min, max = props.max, dateRender3 = props.dateRender, disabledDate3 = props.disabledDate;
      var _this$props = _this2.props, dateRenderProp = _this$props.dateRender, disabledDateProp = _this$props.disabledDate;
      var dateMonthState = _this2.state.dateMonth;
      if (dateRender3 !== dateRenderProp || disabledDate3 !== disabledDateProp) {
        return true;
      }
      if (+dateMonth - +dateMonthState !== 0) {
        return true;
      }
      if (+min - +_this2.min !== 0 || +max - +_this2.max !== 0) {
        return true;
      }
      var isIn;
      if (value.length > 0) {
        var currMonth = date_default.cloneDate(dateMonth, "dd", 1);
        var min1 = date_default.cloneDate(value[0], "dd", 1);
        var max1 = date_default.cloneDate(value[value.length - 1], "dd", 1);
        isIn = currMonth >= min1 && currMonth <= max1;
      }
      var result = !(!isIn && !_this2.lastIn);
      _this2.lastIn = isIn;
      return result;
    };
    _this2.renderDay = function(day, year, month, firstDay) {
      var _className;
      var _this$props2 = _this2.props, prefixCls = _this$props2.prefixCls, dateRender3 = _this$props2.dateRender, onDateClick = _this$props2.onDateClick;
      var date = new Date(year, month, day);
      var isToday2 = CalendarMonthView2.cache.now === "".concat(year, "-").concat(month, "-").concat(day);
      var status = _this2.checkStatus(date);
      var txt = date && dateRender3 && dateRender3(date) || "";
      if (_typeof(txt) === "object") {
        if (!(0, import_react16.isValidElement)(txt)) {
          console.warn("dateRender函数返回数据类型错误，请返回基本数据类型或者reactNode");
          txt = "";
        }
      }
      var className = (_className = {
        d6: (day + firstDay) % 7 === 0,
        d7: (day + firstDay) % 7 === 1
      }, _defineProperty(_className, "".concat(prefixCls, "__day--disabled"), status.disabled), _defineProperty(_className, "".concat(prefixCls, "__day--today"), isToday2), _defineProperty(_className, "".concat(prefixCls, "__day--selected"), status.isSelected), _defineProperty(_className, "".concat(prefixCls, "__day--range"), status.isRange), _defineProperty(_className, "range-start", status.rangeStart), _defineProperty(_className, "range-end", status.rangeEnd), _defineProperty(_className, "firstday-".concat(firstDay), day === 1 && firstDay), _className);
      return import_react16.default.createElement("li", {
        key: "".concat(year, "-").concat(month, "-").concat(day),
        className: (0, import_classnames10.default)("".concat(prefixCls, "__day"), className),
        onClick: function onClick2() {
          return !status.disabled && date && onDateClick && onDateClick(date);
        }
      }, txt && import_react16.default.createElement("div", {
        className: "".concat(prefixCls, "__day__content")
      }, txt) || "");
    };
    _this2.renderContent = function(year, month) {
      var data = date_default.getCurrMonthInfo(year, month);
      var firstDay = data.firstDay, dayCount = data.dayCount;
      return Array.from({
        length: dayCount
      }).map(function(_item, i) {
        return _this2.renderDay(i + 1, year, month, firstDay);
      });
    };
    _this2.min = _props.min;
    _this2.max = _props.max;
    _this2.state = {
      value: _props.value,
      dateMonth: _props.dateMonth
    };
    _this2.checkStatus = _this2.checkStatus.bind(_assertThisInitialized(_this2));
    return _this2;
  }
  _createClass(CalendarMonthView2, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      this.isRefresh = this.checkRefresh(nextProps);
      if (this.isRefresh) {
        this.min = nextProps.min;
        this.max = nextProps.max;
      }
      return this.isRefresh;
    }
  }, {
    key: "checkStatus",
    value: (
      // 日期状态: 选中，区间
      function checkStatus(date) {
        var _this$props3 = this.props, min = _this$props3.min, max = _this$props3.max, disabledDate3 = _this$props3.disabledDate;
        var _this$state$value = this.state.value, value = _this$state$value === void 0 ? [] : _this$state$value;
        var disabled = date < date_default.cloneDate(min, "d", 0) || date > date_default.cloneDate(max, "d", 0);
        var res = {
          disabled: disabled || disabledDate3 && disabledDate3(date),
          isSelected: value.some(function(item) {
            return date_default.isOneDay(date, item);
          }),
          isRange: value.length > 1 && date > value[0] && date < value[value.length - 1],
          rangeStart: value.length > 1 && date_default.isOneDay(date, value[0]),
          rangeEnd: value.length > 1 && date_default.isOneDay(date, value[value.length - 1])
        };
        this.lastIn = this.lastIn || res.isSelected || res.isRange;
        return res;
      }
    )
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var prefixCls = this.props.prefixCls;
      var dateMonth = this.state.dateMonth;
      var year = dateMonth.getFullYear();
      var month = dateMonth.getMonth();
      var monthKey = "".concat(year, "-").concat(month);
      return import_react16.default.createElement("section", {
        key: monthKey,
        className: "".concat(prefixCls, "__month"),
        title: "".concat(year, "年").concat(month + 1, "月"),
        ref: function ref(n) {
          _this2.node = n;
        }
      }, import_react16.default.createElement("ul", null, this.renderContent(year, month)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if (
        // eslint-disable-next-line operator-linebreak
        "value" in nextProps && nextProps.value !== state.value || "dateMonth" in nextProps && nextProps.dateMonth !== state.dateMonth
      ) {
        return {
          value: nextProps.value,
          dateMonth: nextProps.dateMonth
        };
      }
      return null;
    }
  }]);
  return CalendarMonthView2;
}(import_react16.Component);
CalendarMonthView.displayName = "CalendarMonthView";
CalendarMonthView.defaultProps = {
  prefixCls: "za-calendar",
  value: [],
  dateMonth: /* @__PURE__ */ new Date(),
  min: /* @__PURE__ */ new Date(),
  max: /* @__PURE__ */ new Date(),
  dateRender: function dateRender(date) {
    return date.getDate();
  },
  disabledDate: function disabledDate() {
    return false;
  }
};
CalendarMonthView.now = /* @__PURE__ */ new Date();
CalendarMonthView.cache = {
  now: "".concat(CalendarMonthView.now.getFullYear(), "-").concat(CalendarMonthView.now.getMonth(), "-").concat(CalendarMonthView.now.getDate())
};

// node_modules/zarm/es/calendar/utils/parseState.js
var parseState = function parseState2(props) {
  var defaultValue = props.defaultValue, multiple = props.multiple;
  var value = props.value;
  var tmpValue;
  value = value || defaultValue;
  value = Object.prototype.toString.call(value) === "[object Array]" ? value : value && [value] || [];
  tmpValue = value.slice(0, multiple ? 2 : 1).map(function(item) {
    return date_default.parseDay(item);
  });
  tmpValue = tmpValue.sort(function(item1, item2) {
    return +item1 - +item2;
  });
  var min = props.min ? date_default.parseDay(props.min) : /* @__PURE__ */ new Date();
  var startMonth = date_default.cloneDate(min, "dd", 1);
  var max = props.max ? date_default.parseDay(props.max) : date_default.cloneDate(min, "y", 1);
  var endMonth = date_default.cloneDate(max, "dd", date_default.getDaysByDate(max));
  var duration = [min, max].sort(function(item1, item2) {
    return +item1 - +item2;
  });
  var tmp = {
    value: tmpValue,
    min: duration[0],
    max: duration[1],
    startMonth,
    endMonth,
    // 是否是入参更新(主要是月份跨度更新，需要重新定位)
    refresh: false,
    // 注掉该逻辑，强制根据 multiple 控制节点个数，后面改进
    // steps:Math.max(tmp.value.length, tmp.defaultValue.length);
    steps: multiple ? 2 : 1,
    // 初始化点击步数
    multiple
  };
  return tmp;
};
var parseState_default = parseState;

// node_modules/zarm/es/calendar/index.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper16(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct16();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct16() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CN_DAY_NAME = ["日", "一", "二", "三", "四", "五", "六"];
var CalendarView = function(_PureComponent) {
  _inherits(CalendarView2, _PureComponent);
  var _super = _createSuper16(CalendarView2);
  function CalendarView2(props) {
    var _this2;
    _classCallCheck(this, CalendarView2);
    _this2 = _super.call(this, props);
    _this2.nodes = void 0;
    _this2.state = _objectSpread2(_objectSpread2({}, parseState_default(_this2.props)), {}, {
      step: 1
    });
    _this2.handleDateClick = function(date) {
      var _this$state = _this2.state, step = _this$state.step, steps = _this$state.steps, value = _this$state.value;
      var onChange2 = _this2.props.onChange;
      if (step === 1) {
        value.splice(0, value.length);
      }
      value[step - 1] = date;
      value.sort(function(item1, item2) {
        return +item1 - +item2;
      });
      _this2.setState({
        value,
        step: step >= steps ? 1 : step + 1
      }, function() {
        step >= steps && typeof onChange2 === "function" && onChange2(value);
      });
    };
    _this2.anchor = function() {
      var value = _this2.state.value;
      var target = value[0] || CalendarView2.now;
      var key = "".concat(target.getFullYear(), "-").concat(target.getMonth());
      var node = _this2.nodes[key];
      if (node && Object.prototype.toString.call(node.anchor) === "[object Function]") {
        node.anchor();
      }
    };
    _this2.renderWeekBar = function() {
      var prefixCls = _this2.props.prefixCls;
      var content = CN_DAY_NAME.map(function(week) {
        return import_react17.default.createElement("li", {
          key: week,
          className: "".concat(prefixCls, "__bar__item")
        }, week);
      });
      return import_react17.default.createElement("ul", {
        className: "".concat(prefixCls, "__bar")
      }, content);
    };
    _this2.renderMonth = function(dateMonth) {
      var _this$state2 = _this2.state, value = _this$state2.value, min = _this$state2.min, max = _this$state2.max;
      var _this$props = _this2.props, prefixCls = _this$props.prefixCls, dateRender3 = _this$props.dateRender, disabledDate3 = _this$props.disabledDate;
      var key = "".concat(dateMonth.getFullYear(), "-").concat(dateMonth.getMonth());
      return import_react17.default.createElement(CalendarMonthView, {
        prefixCls,
        key,
        min,
        max,
        value,
        dateMonth,
        dateRender: dateRender3,
        disabledDate: disabledDate3,
        onDateClick: _this2.handleDateClick,
        ref: function ref(n) {
          _this2.nodes[key] = n;
        }
      });
    };
    _this2.nodes = {};
    return _this2;
  }
  _createClass(CalendarView2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.anchor();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_prevProps, prevState) {
      var refresh = this.state.refresh;
      if (refresh !== prevState.refresh) {
        this.anchor();
      }
    }
    // 日期点击事件，注意排序
  }, {
    key: "renderMonths",
    value: (
      // 生成日历内容
      function renderMonths() {
        var _this2 = this;
        var prefixCls = this.props.prefixCls;
        var _this$state3 = this.state, startMonth = _this$state3.startMonth, max = _this$state3.max;
        var arr = Array.from({
          length: date_default.getMonthCount(startMonth, max)
        });
        var content = arr.map(function(_item, i) {
          return _this2.renderMonth(date_default.cloneDate(startMonth, "m", i));
        });
        return import_react17.default.createElement("section", {
          className: "".concat(prefixCls, "__body")
        }, content);
      }
    )
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className;
      return import_react17.default.createElement("div", {
        className: (0, import_classnames11.default)(prefixCls, className)
      }, this.renderWeekBar(), this.renderMonths());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if ("value" in nextProps && nextProps.value !== prevState.prevValue || "multiple" in nextProps && nextProps.multiple !== prevState.prevMultiple || "min" in nextProps && nextProps.min !== prevState.prevMin || "max" in nextProps && nextProps.max !== prevState.prevMax) {
        return _objectSpread2(_objectSpread2({}, parseState_default(nextProps)), {}, {
          step: prevState.step ? 1 : prevState.step,
          refresh: !prevState.refresh,
          prevValue: nextProps.value,
          prevMax: nextProps.max,
          prevMin: nextProps.min,
          prevMultiple: nextProps.multiple
        });
      }
      return null;
    }
  }]);
  return CalendarView2;
}(import_react17.PureComponent);
CalendarView.displayName = "CalendarView";
CalendarView.defaultProps = {
  prefixCls: "za-calendar",
  multiple: false,
  min: /* @__PURE__ */ new Date(),
  dateRender: function dateRender2(date) {
    return date.getDate();
  },
  disabledDate: function disabledDate2() {
    return false;
  }
};
CalendarView.now = /* @__PURE__ */ new Date();
CalendarView.cache = {
  now: "".concat(CalendarView.now.getFullYear(), "-").concat(CalendarView.now.getMonth(), "-").concat(CalendarView.now.getDate())
};

// node_modules/zarm/es/cell/index.js
var import_react18 = __toESM(require_react());
var import_classnames12 = __toESM(require_classnames());
function _createSuper17(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct17();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct17() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Cell = function(_PureComponent) {
  _inherits(Cell2, _PureComponent);
  var _super = _createSuper17(Cell2);
  function Cell2() {
    _classCallCheck(this, Cell2);
    return _super.apply(this, arguments);
  }
  _createClass(Cell2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, hasArrow = _this$props.hasArrow, icon = _this$props.icon, title = _this$props.title, description = _this$props.description, help = _this$props.help, disabled = _this$props.disabled, onClick2 = _this$props.onClick, children = _this$props.children, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "hasArrow", "icon", "title", "description", "help", "disabled", "onClick", "children"]);
      var cls = (0, import_classnames12.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--link"), !disabled && !!onClick2), _defineProperty(_classnames, "".concat(prefixCls, "--arrow"), hasArrow), _classnames));
      var titleCls = (0, import_classnames12.default)("".concat(prefixCls, "__title"), _defineProperty({}, "".concat(prefixCls, "__title--label"), !!children));
      var iconRender = icon && import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__icon")
      }, icon);
      var titleRender = title && import_react18.default.createElement("div", {
        className: titleCls
      }, title);
      var contentRender = children && import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, children);
      var arrowRender = hasArrow && import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__arrow")
      });
      var helpRender = help && import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__help")
      }, help);
      return import_react18.default.createElement("div", _extends({
        className: cls,
        onClick: onClick2,
        onTouchStart: function onTouchStart() {
        }
      }, others), import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__inner")
      }, import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, iconRender), import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, titleRender, contentRender), import_react18.default.createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, description), arrowRender), helpRender);
    }
  }]);
  return Cell2;
}(import_react18.PureComponent);
Cell.defaultProps = {
  prefixCls: "za-cell",
  hasArrow: false,
  disabled: false
};

// node_modules/zarm/es/checkbox/Checkbox.js
var import_react19 = __toESM(require_react());
var import_classnames13 = __toESM(require_classnames());
function _createSuper18(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct18();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct18() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getChecked = function getChecked2(props, defaultChecked) {
  if (typeof props.checked !== "undefined") {
    return props.checked;
  }
  if (typeof props.defaultChecked !== "undefined") {
    return props.defaultChecked;
  }
  return defaultChecked;
};
var Checkbox = function(_PureComponent) {
  _inherits(Checkbox2, _PureComponent);
  var _super = _createSuper18(Checkbox2);
  function Checkbox2() {
    var _this2;
    _classCallCheck(this, Checkbox2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      checked: getChecked(_this2.props, false)
    };
    _this2.onValueChange = function(e) {
      var _this$props = _this2.props, disabled = _this$props.disabled, onChange2 = _this$props.onChange;
      var checked = _this2.state.checked;
      if (disabled) {
        return;
      }
      var newChecked = !checked;
      if (!("checked" in _this2.props)) {
        _this2.setState({
          checked: newChecked
        });
      }
      typeof onChange2 === "function" && onChange2(e);
    };
    return _this2;
  }
  _createClass(Checkbox2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, type = _this$props2.type, shape = _this$props2.shape, value = _this$props2.value, checked = _this$props2.checked, defaultChecked = _this$props2.defaultChecked, disabled = _this$props2.disabled, id = _this$props2.id, indeterminate = _this$props2.indeterminate, children = _this$props2.children, onChange2 = _this$props2.onChange, rest = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "type", "shape", "value", "checked", "defaultChecked", "disabled", "id", "indeterminate", "children", "onChange"]);
      var checkedState = this.state.checked;
      var cls = (0, import_classnames13.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--checked"), checkedState), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--indeterminate"), indeterminate), _defineProperty(_classnames, "".concat(prefixCls, "--untext"), !children), _classnames));
      var inputRender = import_react19.default.createElement("input", {
        id,
        type: "checkbox",
        className: "".concat(prefixCls, "__input"),
        value,
        disabled,
        checked: checkedState,
        onChange: this.onValueChange
      });
      var checkboxRender = import_react19.default.createElement("span", _extends({
        className: cls
      }, rest), import_react19.default.createElement("span", {
        className: "".concat(prefixCls, "__widget")
      }, import_react19.default.createElement("span", {
        className: "".concat(prefixCls, "__inner")
      })), children && import_react19.default.createElement("span", {
        className: "".concat(prefixCls, "__text")
      }, children), inputRender);
      if (type === "cell") {
        return import_react19.default.createElement(Cell, _extends({
          disabled,
          className,
          onClick: function onClick2() {
          }
        }, rest), checkboxRender);
      }
      if (type === "button") {
        return import_react19.default.createElement("button", _extends({
          type: "button",
          disabled,
          className: cls
        }, rest), children, inputRender);
      }
      return checkboxRender;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("checked" in nextProps && nextProps.checked !== state.prevChecked) {
        return {
          checked: nextProps.checked,
          prevChecked: nextProps.checked
        };
      }
      return null;
    }
  }]);
  return Checkbox2;
}(import_react19.PureComponent);
Checkbox.Group = void 0;
Checkbox.displayName = "Checkbox";
Checkbox.defaultProps = {
  prefixCls: "za-checkbox",
  disabled: false,
  indeterminate: false
};

// node_modules/zarm/es/checkbox/CheckboxGroup.js
var import_react20 = __toESM(require_react());
var import_classnames14 = __toESM(require_classnames());
function _createSuper19(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct19();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct19() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getChildChecked = function getChildChecked2(children) {
  var checkedValue = [];
  import_react20.default.Children.map(children, function(element) {
    if (import_react20.default.isValidElement(element) && element.props && element.props.checked) {
      checkedValue.push(element.props.value);
    }
  });
  return checkedValue;
};
var getValue = function getValue2(props, defaultValue) {
  if (typeof props.value !== "undefined") {
    return props.value;
  }
  if (typeof props.defaultValue !== "undefined") {
    return props.defaultValue;
  }
  if (getChildChecked(props.children).length > 0) {
    return getChildChecked(props.children);
  }
  return defaultValue;
};
var CheckboxGroup = function(_PureComponent) {
  _inherits(CheckboxGroup2, _PureComponent);
  var _super = _createSuper19(CheckboxGroup2);
  function CheckboxGroup2(props) {
    var _this2;
    _classCallCheck(this, CheckboxGroup2);
    _this2 = _super.call(this, props);
    _this2.onChildChange = function(value) {
      var valueState = _this2.state.value;
      var onChange2 = _this2.props.onChange;
      var values = valueState.slice();
      var index = values.indexOf(value);
      if (index < 0) {
        values.push(value);
      } else {
        values.splice(index, 1);
      }
      _this2.setState({
        value: values
      });
      typeof onChange2 === "function" && onChange2(values);
    };
    _this2.state = {
      value: getValue(props, [])
    };
    return _this2;
  }
  _createClass(CheckboxGroup2, [{
    key: "render",
    value: function render() {
      var _this2 = this, _classnames;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, size = _this$props.size, shape = _this$props.shape, type = _this$props.type, block = _this$props.block, disabled = _this$props.disabled, compact = _this$props.compact, ghost = _this$props.ghost, children = _this$props.children, onChange2 = _this$props.onChange, defaultValue = _this$props.defaultValue, value = _this$props.value, rest = _objectWithoutProperties(_this$props, ["prefixCls", "className", "size", "shape", "type", "block", "disabled", "compact", "ghost", "children", "onChange", "defaultValue", "value"]);
      var valueState = this.state.value;
      var items = import_react20.default.Children.map(children, function(element, index) {
        if ((0, import_react20.isValidElement)(element)) {
          return (0, import_react20.cloneElement)(element, {
            key: index,
            type,
            shape,
            disabled: disabled || element.props.disabled,
            checked: valueState.indexOf(element.props.value) > -1,
            onChange: function onChange3(checked) {
              typeof element.props.onChange === "function" && element.props.onChange(checked);
              _this2.onChildChange(element.props.value);
            }
          });
        }
        return null;
      });
      var cls = (0, import_classnames14.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(type), !!type), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--block"), block), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--compact"), compact), _defineProperty(_classnames, "".concat(prefixCls, "--ghost"), ghost), _classnames));
      return import_react20.default.createElement("div", _extends({
        className: cls
      }, rest), import_react20.default.createElement("div", {
        className: "".concat(prefixCls, "__inner")
      }, items));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ("value" in nextProps) {
        return {
          value: getValue(nextProps, [])
        };
      }
      return null;
    }
  }]);
  return CheckboxGroup2;
}(import_react20.PureComponent);
CheckboxGroup.displayName = "CheckboxGroup";
CheckboxGroup.defaultProps = {
  prefixCls: "za-checkbox-group",
  shape: "radius",
  block: false,
  disabled: false,
  compact: false,
  ghost: false,
  size: "xs"
};

// node_modules/zarm/es/checkbox/index.js
Checkbox.Group = CheckboxGroup;
var checkbox_default = Checkbox;

// node_modules/zarm/es/date-picker/DatePicker.js
var import_react24 = __toESM(require_react());
var import_isEqual4 = __toESM(require_isEqual());

// node_modules/zarm/es/picker-view/utils/removeFnFromProps.js
var import_omit = __toESM(require_omit());
var removeFnFromProps = function removeFnFromProps2(props, fnList) {
  return (0, import_omit.default)(props, fnList);
};
var removeFnFromProps_default = removeFnFromProps;

// node_modules/zarm/es/date-picker-view/DatePickerView.js
var import_react23 = __toESM(require_react());
var import_isEqual3 = __toESM(require_isEqual());

// node_modules/zarm/es/picker-view/PickerView.js
var import_react22 = __toESM(require_react());
var import_classnames16 = __toESM(require_classnames());
var import_isEqual2 = __toESM(require_isEqual());

// node_modules/zarm/es/wheel/Wheel.js
var import_react21 = __toESM(require_react());
var import_classnames15 = __toESM(require_classnames());

// node_modules/better-scroll/dist/better-scroll.esm.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
var propertiesConfig = [
  {
    sourceKey: "scroller.scrollBehaviorX.currentPos",
    key: "x"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.currentPos",
    key: "y"
  },
  {
    sourceKey: "scroller.scrollBehaviorX.hasScroll",
    key: "hasHorizontalScroll"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.hasScroll",
    key: "hasVerticalScroll"
  },
  {
    sourceKey: "scroller.scrollBehaviorX.contentSize",
    key: "scrollerWidth"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.contentSize",
    key: "scrollerHeight"
  },
  {
    sourceKey: "scroller.scrollBehaviorX.maxScrollPos",
    key: "maxScrollX"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.maxScrollPos",
    key: "maxScrollY"
  },
  {
    sourceKey: "scroller.scrollBehaviorX.minScrollPos",
    key: "minScrollX"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.minScrollPos",
    key: "minScrollY"
  },
  {
    sourceKey: "scroller.scrollBehaviorX.movingDirection",
    key: "movingDirectionX"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.movingDirection",
    key: "movingDirectionY"
  },
  {
    sourceKey: "scroller.scrollBehaviorX.direction",
    key: "directionX"
  },
  {
    sourceKey: "scroller.scrollBehaviorY.direction",
    key: "directionY"
  },
  {
    sourceKey: "scroller.actions.enabled",
    key: "enabled"
  },
  {
    sourceKey: "scroller.animater.pending",
    key: "pending"
  },
  {
    sourceKey: "scroller.animater.stop",
    key: "stop"
  },
  {
    sourceKey: "scroller.scrollTo",
    key: "scrollTo"
  },
  {
    sourceKey: "scroller.scrollBy",
    key: "scrollBy"
  },
  {
    sourceKey: "scroller.scrollToElement",
    key: "scrollToElement"
  },
  {
    sourceKey: "scroller.resetPosition",
    key: "resetPosition"
  }
];
function warn(msg) {
  console.error("[BScroll warn]: " + msg);
}
function assert(condition, msg) {
  if (!condition) {
    throw new Error("[BScroll] " + msg);
  }
}
var inBrowser = typeof window !== "undefined";
var ua = inBrowser && navigator.userAgent.toLowerCase();
var isWeChatDevTools = !!(ua && /wechatdevtools/.test(ua));
var isAndroid = ua && ua.indexOf("android") > 0;
var isIOSBadVersion = function() {
  if (typeof ua === "string") {
    var regex = /os (\d\d?_\d(_\d)?)/;
    var matches = regex.exec(ua);
    if (!matches)
      return false;
    var parts = matches[1].split("_").map(function(item) {
      return parseInt(item, 10);
    });
    return !!(parts[0] === 13 && parts[1] >= 4);
  }
  return false;
}();
var supportsPassive2 = false;
if (inBrowser) {
  EventName = "test-passive";
  try {
    opts = {};
    Object.defineProperty(opts, "passive", {
      get: function() {
        supportsPassive2 = true;
      }
    });
    window.addEventListener(EventName, function() {
    }, opts);
  } catch (e) {
  }
}
var EventName;
var opts;
function getNow() {
  return window.performance && window.performance.now && window.performance.timing ? window.performance.now() + window.performance.timing.navigationStart : +/* @__PURE__ */ new Date();
}
var extend = function(target, source) {
  for (var key in source) {
    target[key] = source[key];
  }
  return target;
};
function isUndef(v) {
  return v === void 0 || v === null;
}
function getDistance(x, y) {
  return Math.sqrt(x * x + y * y);
}
function between(x, min, max) {
  if (x < min) {
    return min;
  }
  if (x > max) {
    return max;
  }
  return x;
}
function findIndex(ary, fn) {
  if (ary.findIndex) {
    return ary.findIndex(fn);
  }
  var index = -1;
  ary.some(function(item, i, ary2) {
    var ret = fn(item, i, ary2);
    if (ret) {
      index = i;
      return ret;
    }
  });
  return index;
}
var elementStyle = inBrowser && document.createElement("div").style;
var vendor = function() {
  if (!inBrowser) {
    return false;
  }
  var transformNames = [
    {
      key: "standard",
      value: "transform"
    },
    {
      key: "webkit",
      value: "webkitTransform"
    },
    {
      key: "Moz",
      value: "MozTransform"
    },
    {
      key: "O",
      value: "OTransform"
    },
    {
      key: "ms",
      value: "msTransform"
    }
  ];
  for (var _i = 0, transformNames_1 = transformNames; _i < transformNames_1.length; _i++) {
    var obj = transformNames_1[_i];
    if (elementStyle[obj.value] !== void 0) {
      return obj.key;
    }
  }
  return false;
}();
function prefixStyle(style2) {
  if (vendor === false) {
    return style2;
  }
  if (vendor === "standard") {
    if (style2 === "transitionEnd") {
      return "transitionend";
    }
    return style2;
  }
  return vendor + style2.charAt(0).toUpperCase() + style2.substr(1);
}
function getElement(el) {
  return typeof el === "string" ? document.querySelector(el) : el;
}
function addEvent(el, type, fn, capture) {
  var useCapture = supportsPassive2 ? {
    passive: false,
    capture: !!capture
  } : !!capture;
  el.addEventListener(type, fn, useCapture);
}
function removeEvent(el, type, fn, capture) {
  el.removeEventListener(type, fn, {
    capture: !!capture
  });
}
function offset(el) {
  var left = 0;
  var top = 0;
  while (el) {
    left -= el.offsetLeft;
    top -= el.offsetTop;
    el = el.offsetParent;
  }
  return {
    left,
    top
  };
}
function offsetToBody(el) {
  var rect = el.getBoundingClientRect();
  return {
    left: -(rect.left + window.pageXOffset),
    top: -(rect.top + window.pageYOffset)
  };
}
var cssVendor = vendor && vendor !== "standard" ? "-" + vendor.toLowerCase() + "-" : "";
var transform = prefixStyle("transform");
var transition = prefixStyle("transition");
var hasPerspective = inBrowser && prefixStyle("perspective") in elementStyle;
var hasTouch = inBrowser && ("ontouchstart" in window || isWeChatDevTools);
var hasTransition = inBrowser && transition in elementStyle;
var style = {
  transform,
  transition,
  transitionTimingFunction: prefixStyle("transitionTimingFunction"),
  transitionDuration: prefixStyle("transitionDuration"),
  transitionDelay: prefixStyle("transitionDelay"),
  transformOrigin: prefixStyle("transformOrigin"),
  transitionEnd: prefixStyle("transitionEnd"),
  transitionProperty: prefixStyle("transitionProperty")
};
var eventTypeMap = {
  touchstart: 1,
  touchmove: 1,
  touchend: 1,
  touchcancel: 1,
  mousedown: 2,
  mousemove: 2,
  mouseup: 2
};
function getRect(el) {
  if (el instanceof window.SVGElement) {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top,
      left: rect.left,
      width: rect.width,
      height: rect.height
    };
  } else {
    return {
      top: el.offsetTop,
      left: el.offsetLeft,
      width: el.offsetWidth,
      height: el.offsetHeight
    };
  }
}
function preventDefaultExceptionFn(el, exceptions) {
  for (var i in exceptions) {
    if (exceptions[i].test(el[i])) {
      return true;
    }
  }
  return false;
}
var tagExceptionFn = preventDefaultExceptionFn;
function tap(e, eventName) {
  var ev = document.createEvent("Event");
  ev.initEvent(eventName, true, true);
  ev.pageX = e.pageX;
  ev.pageY = e.pageY;
  e.target.dispatchEvent(ev);
}
function click(e, event) {
  if (event === void 0) {
    event = "click";
  }
  var eventSource;
  if (e.type === "mouseup") {
    eventSource = e;
  } else if (e.type === "touchend" || e.type === "touchcancel") {
    eventSource = e.changedTouches[0];
  }
  var posSrc = {};
  if (eventSource) {
    posSrc.screenX = eventSource.screenX || 0;
    posSrc.screenY = eventSource.screenY || 0;
    posSrc.clientX = eventSource.clientX || 0;
    posSrc.clientY = eventSource.clientY || 0;
  }
  var ev;
  var bubbles = true;
  var cancelable = true;
  var ctrlKey = e.ctrlKey, shiftKey = e.shiftKey, altKey = e.altKey, metaKey = e.metaKey;
  var pressedKeysMap = {
    ctrlKey,
    shiftKey,
    altKey,
    metaKey
  };
  if (typeof MouseEvent !== "undefined") {
    try {
      ev = new MouseEvent(event, extend(__assign({
        bubbles,
        cancelable
      }, pressedKeysMap), posSrc));
    } catch (e2) {
      createEvent();
    }
  } else {
    createEvent();
  }
  function createEvent() {
    ev = document.createEvent("Event");
    ev.initEvent(event, bubbles, cancelable);
    extend(ev, posSrc);
  }
  ev.forwardedTouchEvent = true;
  ev._constructed = true;
  e.target.dispatchEvent(ev);
}
function dblclick(e) {
  click(e, "dblclick");
}
function prepend(el, target) {
  var firstChild = target.firstChild;
  if (firstChild) {
    before(el, firstChild);
  } else {
    target.appendChild(el);
  }
}
function before(el, target) {
  var parentNode = target.parentNode;
  parentNode.insertBefore(el, target);
}
function removeChild(el, child) {
  el.removeChild(child);
}
function hasClass(el, className) {
  var reg = new RegExp("(^|\\s)" + className + "(\\s|$)");
  return reg.test(el.className);
}
function HTMLCollectionToArray(el) {
  return Array.prototype.slice.call(el, 0);
}
function getClientSize(el) {
  return {
    width: el.clientWidth,
    height: el.clientHeight
  };
}
var ease = {
  // easeOutQuint
  swipe: {
    style: "cubic-bezier(0.23, 1, 0.32, 1)",
    fn: function(t) {
      return 1 + --t * t * t * t * t;
    }
  },
  // easeOutQuard
  swipeBounce: {
    style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
    fn: function(t) {
      return t * (2 - t);
    }
  },
  // easeOutQuart
  bounce: {
    style: "cubic-bezier(0.165, 0.84, 0.44, 1)",
    fn: function(t) {
      return 1 - --t * t * t * t;
    }
  }
};
var DEFAULT_INTERVAL = 1e3 / 60;
var windowCompat = inBrowser && window;
function noop2() {
}
var requestAnimationFrame2 = function() {
  if (!inBrowser) {
    return noop2;
  }
  return windowCompat.requestAnimationFrame || windowCompat.webkitRequestAnimationFrame || windowCompat.mozRequestAnimationFrame || windowCompat.oRequestAnimationFrame || // if all else fails, use setTimeout
  function(callback) {
    return window.setTimeout(callback, callback.interval || DEFAULT_INTERVAL);
  };
}();
var cancelAnimationFrame2 = function() {
  if (!inBrowser) {
    return noop2;
  }
  return windowCompat.cancelAnimationFrame || windowCompat.webkitCancelAnimationFrame || windowCompat.mozCancelAnimationFrame || windowCompat.oCancelAnimationFrame || function(id) {
    window.clearTimeout(id);
  };
}();
var noop$1 = function(val) {
};
var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop$1,
  set: noop$1
};
var getProperty = function(obj, key) {
  var keys = key.split(".");
  for (var i = 0; i < keys.length - 1; i++) {
    obj = obj[keys[i]];
    if (typeof obj !== "object" || !obj)
      return;
  }
  var lastKey = keys.pop();
  if (typeof obj[lastKey] === "function") {
    return function() {
      return obj[lastKey].apply(obj, arguments);
    };
  } else {
    return obj[lastKey];
  }
};
var setProperty = function(obj, key, value) {
  var keys = key.split(".");
  var temp;
  for (var i = 0; i < keys.length - 1; i++) {
    temp = keys[i];
    if (!obj[temp])
      obj[temp] = {};
    obj = obj[temp];
  }
  obj[keys.pop()] = value;
};
function propertiesProxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return getProperty(this, sourceKey);
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    setProperty(this, sourceKey, val);
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}
var EventEmitter = (
  /** @class */
  function() {
    function EventEmitter2(names) {
      this.events = {};
      this.eventTypes = {};
      this.registerType(names);
    }
    EventEmitter2.prototype.on = function(type, fn, context) {
      if (context === void 0) {
        context = this;
      }
      this.hasType(type);
      if (!this.events[type]) {
        this.events[type] = [];
      }
      this.events[type].push([fn, context]);
      return this;
    };
    EventEmitter2.prototype.once = function(type, fn, context) {
      var _this2 = this;
      if (context === void 0) {
        context = this;
      }
      this.hasType(type);
      var magic = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        _this2.off(type, magic);
        var ret = fn.apply(context, args);
        if (ret === true) {
          return ret;
        }
      };
      magic.fn = fn;
      this.on(type, magic);
      return this;
    };
    EventEmitter2.prototype.off = function(type, fn) {
      if (!type && !fn) {
        this.events = {};
        return this;
      }
      if (type) {
        this.hasType(type);
        if (!fn) {
          this.events[type] = [];
          return this;
        }
        var events = this.events[type];
        if (!events) {
          return this;
        }
        var count = events.length;
        while (count--) {
          if (events[count][0] === fn || events[count][0] && events[count][0].fn === fn) {
            events.splice(count, 1);
          }
        }
        return this;
      }
    };
    EventEmitter2.prototype.trigger = function(type) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      this.hasType(type);
      var events = this.events[type];
      if (!events) {
        return;
      }
      var len = events.length;
      var eventsCopy = __spreadArrays(events);
      var ret;
      for (var i = 0; i < len; i++) {
        var event_1 = eventsCopy[i];
        var fn = event_1[0], context = event_1[1];
        if (fn) {
          ret = fn.apply(context, args);
          if (ret === true) {
            return ret;
          }
        }
      }
    };
    EventEmitter2.prototype.registerType = function(names) {
      var _this2 = this;
      names.forEach(function(type) {
        _this2.eventTypes[type] = type;
      });
    };
    EventEmitter2.prototype.destroy = function() {
      this.events = {};
      this.eventTypes = {};
    };
    EventEmitter2.prototype.hasType = function(type) {
      var types = this.eventTypes;
      var isType = types[type] === type;
      if (!isType) {
        warn('EventEmitter has used unknown event type: "' + type + '", should be oneof [' + ("" + Object.keys(types).map(function(_) {
          return JSON.stringify(_);
        })) + "]");
      }
    };
    return EventEmitter2;
  }()
);
var EventRegister = (
  /** @class */
  function() {
    function EventRegister2(wrapper, events) {
      this.wrapper = wrapper;
      this.events = events;
      this.addDOMEvents();
    }
    EventRegister2.prototype.destroy = function() {
      this.removeDOMEvents();
      this.events = [];
    };
    EventRegister2.prototype.addDOMEvents = function() {
      this.handleDOMEvents(addEvent);
    };
    EventRegister2.prototype.removeDOMEvents = function() {
      this.handleDOMEvents(removeEvent);
    };
    EventRegister2.prototype.handleDOMEvents = function(eventOperation) {
      var _this2 = this;
      var wrapper = this.wrapper;
      this.events.forEach(function(event) {
        eventOperation(wrapper, event.name, _this2, !!event.capture);
      });
    };
    EventRegister2.prototype.handleEvent = function(e) {
      var eventType = e.type;
      this.events.some(function(event) {
        if (event.name === eventType) {
          event.handler(e);
          return true;
        }
        return false;
      });
    };
    return EventRegister2;
  }()
);
var CustomOptions = (
  /** @class */
  function() {
    function CustomOptions2() {
    }
    return CustomOptions2;
  }()
);
var OptionsConstructor = (
  /** @class */
  function(_super) {
    __extends(OptionsConstructor2, _super);
    function OptionsConstructor2() {
      var _this2 = _super.call(this) || this;
      _this2.startX = 0;
      _this2.startY = 0;
      _this2.scrollX = false;
      _this2.scrollY = true;
      _this2.freeScroll = false;
      _this2.directionLockThreshold = 0;
      _this2.eventPassthrough = "";
      _this2.click = false;
      _this2.dblclick = false;
      _this2.tap = "";
      _this2.bounce = {
        top: true,
        bottom: true,
        left: true,
        right: true
      };
      _this2.bounceTime = 800;
      _this2.momentum = true;
      _this2.momentumLimitTime = 300;
      _this2.momentumLimitDistance = 15;
      _this2.swipeTime = 2500;
      _this2.swipeBounceTime = 500;
      _this2.deceleration = 15e-4;
      _this2.flickLimitTime = 200;
      _this2.flickLimitDistance = 100;
      _this2.resizePolling = 60;
      _this2.probeType = 0;
      _this2.stopPropagation = false;
      _this2.preventDefault = true;
      _this2.preventDefaultException = {
        tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|AUDIO)$/
      };
      _this2.tagException = {
        tagName: /^TEXTAREA$/
      };
      _this2.HWCompositing = true;
      _this2.useTransition = true;
      _this2.bindToWrapper = false;
      _this2.bindToTarget = false;
      _this2.disableMouse = hasTouch;
      _this2.disableTouch = !hasTouch;
      _this2.autoBlur = true;
      _this2.autoEndDistance = 5;
      _this2.outOfBoundaryDampingFactor = 1 / 3;
      _this2.specifiedIndexAsContent = 0;
      return _this2;
    }
    OptionsConstructor2.prototype.merge = function(options) {
      if (!options)
        return this;
      for (var key in options) {
        if (key === "bounce") {
          this.bounce = this.resolveBounce(options[key]);
          continue;
        }
        this[key] = options[key];
      }
      return this;
    };
    OptionsConstructor2.prototype.process = function() {
      this.translateZ = this.HWCompositing && hasPerspective ? " translateZ(1px)" : "";
      this.useTransition = this.useTransition && hasTransition;
      this.preventDefault = !this.eventPassthrough && this.preventDefault;
      this.scrollX = this.eventPassthrough === "horizontal" ? false : this.scrollX;
      this.scrollY = this.eventPassthrough === "vertical" ? false : this.scrollY;
      this.freeScroll = this.freeScroll && !this.eventPassthrough;
      this.scrollX = this.freeScroll ? true : this.scrollX;
      this.scrollY = this.freeScroll ? true : this.scrollY;
      this.directionLockThreshold = this.eventPassthrough ? 0 : this.directionLockThreshold;
      return this;
    };
    OptionsConstructor2.prototype.resolveBounce = function(bounceOptions) {
      var DEFAULT_BOUNCE = {
        top: true,
        right: true,
        bottom: true,
        left: true
      };
      var NEGATED_BOUNCE = {
        top: false,
        right: false,
        bottom: false,
        left: false
      };
      var ret;
      if (typeof bounceOptions === "object") {
        ret = extend(DEFAULT_BOUNCE, bounceOptions);
      } else {
        ret = bounceOptions ? DEFAULT_BOUNCE : NEGATED_BOUNCE;
      }
      return ret;
    };
    return OptionsConstructor2;
  }(CustomOptions)
);
var ActionsHandler = (
  /** @class */
  function() {
    function ActionsHandler2(wrapper, options) {
      this.wrapper = wrapper;
      this.options = options;
      this.hooks = new EventEmitter([
        "beforeStart",
        "start",
        "move",
        "end",
        "click"
      ]);
      this.handleDOMEvents();
    }
    ActionsHandler2.prototype.handleDOMEvents = function() {
      var _a2 = this.options, bindToWrapper = _a2.bindToWrapper, disableMouse = _a2.disableMouse, disableTouch = _a2.disableTouch, click2 = _a2.click;
      var wrapper = this.wrapper;
      var target = bindToWrapper ? wrapper : window;
      var wrapperEvents = [];
      var targetEvents = [];
      var shouldRegisterTouch = !disableTouch;
      var shouldRegisterMouse = !disableMouse;
      if (click2) {
        wrapperEvents.push({
          name: "click",
          handler: this.click.bind(this),
          capture: true
        });
      }
      if (shouldRegisterTouch) {
        wrapperEvents.push({
          name: "touchstart",
          handler: this.start.bind(this)
        });
        targetEvents.push({
          name: "touchmove",
          handler: this.move.bind(this)
        }, {
          name: "touchend",
          handler: this.end.bind(this)
        }, {
          name: "touchcancel",
          handler: this.end.bind(this)
        });
      }
      if (shouldRegisterMouse) {
        wrapperEvents.push({
          name: "mousedown",
          handler: this.start.bind(this)
        });
        targetEvents.push({
          name: "mousemove",
          handler: this.move.bind(this)
        }, {
          name: "mouseup",
          handler: this.end.bind(this)
        });
      }
      this.wrapperEventRegister = new EventRegister(wrapper, wrapperEvents);
      this.targetEventRegister = new EventRegister(target, targetEvents);
    };
    ActionsHandler2.prototype.beforeHandler = function(e, type) {
      var _a2 = this.options, preventDefault2 = _a2.preventDefault, stopPropagation3 = _a2.stopPropagation, preventDefaultException = _a2.preventDefaultException;
      var preventDefaultConditions = {
        start: function() {
          return preventDefault2 && !preventDefaultExceptionFn(e.target, preventDefaultException);
        },
        end: function() {
          return preventDefault2 && !preventDefaultExceptionFn(e.target, preventDefaultException);
        },
        move: function() {
          return preventDefault2;
        }
      };
      if (preventDefaultConditions[type]()) {
        e.preventDefault();
      }
      if (stopPropagation3) {
        e.stopPropagation();
      }
    };
    ActionsHandler2.prototype.setInitiated = function(type) {
      if (type === void 0) {
        type = 0;
      }
      this.initiated = type;
    };
    ActionsHandler2.prototype.start = function(e) {
      var _eventType = eventTypeMap[e.type];
      if (this.initiated && this.initiated !== _eventType) {
        return;
      }
      this.setInitiated(_eventType);
      if (tagExceptionFn(e.target, this.options.tagException)) {
        this.setInitiated();
        return;
      }
      if (_eventType === 2 && e.button !== 0)
        return;
      if (this.hooks.trigger(this.hooks.eventTypes.beforeStart, e)) {
        return;
      }
      this.beforeHandler(e, "start");
      var point = e.touches ? e.touches[0] : e;
      this.pointX = point.pageX;
      this.pointY = point.pageY;
      this.hooks.trigger(this.hooks.eventTypes.start, e);
    };
    ActionsHandler2.prototype.move = function(e) {
      if (eventTypeMap[e.type] !== this.initiated) {
        return;
      }
      this.beforeHandler(e, "move");
      var point = e.touches ? e.touches[0] : e;
      var deltaX = point.pageX - this.pointX;
      var deltaY = point.pageY - this.pointY;
      this.pointX = point.pageX;
      this.pointY = point.pageY;
      if (this.hooks.trigger(this.hooks.eventTypes.move, {
        deltaX,
        deltaY,
        e
      })) {
        return;
      }
      var scrollLeft = document.documentElement.scrollLeft || window.pageXOffset || document.body.scrollLeft;
      var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;
      var pX = this.pointX - scrollLeft;
      var pY = this.pointY - scrollTop;
      var autoEndDistance = this.options.autoEndDistance;
      if (pX > document.documentElement.clientWidth - autoEndDistance || pY > document.documentElement.clientHeight - autoEndDistance || pX < autoEndDistance || pY < autoEndDistance) {
        this.end(e);
      }
    };
    ActionsHandler2.prototype.end = function(e) {
      if (eventTypeMap[e.type] !== this.initiated) {
        return;
      }
      this.setInitiated();
      this.beforeHandler(e, "end");
      this.hooks.trigger(this.hooks.eventTypes.end, e);
    };
    ActionsHandler2.prototype.click = function(e) {
      this.hooks.trigger(this.hooks.eventTypes.click, e);
    };
    ActionsHandler2.prototype.setContent = function(content) {
      if (content !== this.wrapper) {
        this.wrapper = content;
        this.rebindDOMEvents();
      }
    };
    ActionsHandler2.prototype.rebindDOMEvents = function() {
      this.wrapperEventRegister.destroy();
      this.targetEventRegister.destroy();
      this.handleDOMEvents();
    };
    ActionsHandler2.prototype.destroy = function() {
      this.wrapperEventRegister.destroy();
      this.targetEventRegister.destroy();
      this.hooks.destroy();
    };
    return ActionsHandler2;
  }()
);
var translaterMetaData = {
  x: ["translateX", "px"],
  y: ["translateY", "px"]
};
var Translater = (
  /** @class */
  function() {
    function Translater2(content) {
      this.setContent(content);
      this.hooks = new EventEmitter(["beforeTranslate", "translate"]);
    }
    Translater2.prototype.getComputedPosition = function() {
      var cssStyle = window.getComputedStyle(this.content, null);
      var matrix = cssStyle[style.transform].split(")")[0].split(", ");
      var x = +(matrix[12] || matrix[4]) || 0;
      var y = +(matrix[13] || matrix[5]) || 0;
      return {
        x,
        y
      };
    };
    Translater2.prototype.translate = function(point) {
      var transformStyle = [];
      Object.keys(point).forEach(function(key) {
        if (!translaterMetaData[key]) {
          return;
        }
        var transformFnName = translaterMetaData[key][0];
        if (transformFnName) {
          var transformFnArgUnit = translaterMetaData[key][1];
          var transformFnArg = point[key];
          transformStyle.push(transformFnName + "(" + transformFnArg + transformFnArgUnit + ")");
        }
      });
      this.hooks.trigger(this.hooks.eventTypes.beforeTranslate, transformStyle, point);
      this.style[style.transform] = transformStyle.join(" ");
      this.hooks.trigger(this.hooks.eventTypes.translate, point);
    };
    Translater2.prototype.setContent = function(content) {
      if (this.content !== content) {
        this.content = content;
        this.style = content.style;
      }
    };
    Translater2.prototype.destroy = function() {
      this.hooks.destroy();
    };
    return Translater2;
  }()
);
var Base = (
  /** @class */
  function() {
    function Base2(content, translater, options) {
      this.translater = translater;
      this.options = options;
      this.timer = 0;
      this.hooks = new EventEmitter([
        "move",
        "end",
        "beforeForceStop",
        "forceStop",
        "callStop",
        "time",
        "timeFunction"
      ]);
      this.setContent(content);
    }
    Base2.prototype.translate = function(endPoint) {
      this.translater.translate(endPoint);
    };
    Base2.prototype.setPending = function(pending) {
      this.pending = pending;
    };
    Base2.prototype.setForceStopped = function(forceStopped) {
      this.forceStopped = forceStopped;
    };
    Base2.prototype.setCallStop = function(called) {
      this.callStopWhenPending = called;
    };
    Base2.prototype.setContent = function(content) {
      if (this.content !== content) {
        this.content = content;
        this.style = content.style;
        this.stop();
      }
    };
    Base2.prototype.clearTimer = function() {
      if (this.timer) {
        cancelAnimationFrame2(this.timer);
        this.timer = 0;
      }
    };
    Base2.prototype.destroy = function() {
      this.hooks.destroy();
      cancelAnimationFrame2(this.timer);
    };
    return Base2;
  }()
);
var isValidPostion = function(startPoint, endPoint, currentPos, prePos) {
  var computeDirection = function(endValue, startValue) {
    var delta = endValue - startValue;
    var direction = delta > 0 ? -1 : delta < 0 ? 1 : 0;
    return direction;
  };
  var directionX = computeDirection(endPoint.x, startPoint.x);
  var directionY = computeDirection(endPoint.y, startPoint.y);
  var deltaX = currentPos.x - prePos.x;
  var deltaY = currentPos.y - prePos.y;
  return directionX * deltaX <= 0 && directionY * deltaY <= 0;
};
var Transition = (
  /** @class */
  function(_super) {
    __extends(Transition2, _super);
    function Transition2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Transition2.prototype.startProbe = function(startPoint, endPoint) {
      var _this2 = this;
      var prePos = startPoint;
      var probe = function() {
        var pos = _this2.translater.getComputedPosition();
        if (isValidPostion(startPoint, endPoint, pos, prePos)) {
          _this2.hooks.trigger(_this2.hooks.eventTypes.move, pos);
        }
        if (!_this2.pending) {
          if (_this2.callStopWhenPending) {
            _this2.callStopWhenPending = false;
          } else {
            _this2.hooks.trigger(_this2.hooks.eventTypes.end, pos);
          }
        }
        prePos = pos;
        if (_this2.pending) {
          _this2.timer = requestAnimationFrame2(probe);
        }
      };
      if (this.callStopWhenPending) {
        this.setCallStop(false);
      }
      cancelAnimationFrame2(this.timer);
      probe();
    };
    Transition2.prototype.transitionTime = function(time) {
      if (time === void 0) {
        time = 0;
      }
      this.style[style.transitionDuration] = time + "ms";
      this.hooks.trigger(this.hooks.eventTypes.time, time);
    };
    Transition2.prototype.transitionTimingFunction = function(easing) {
      this.style[style.transitionTimingFunction] = easing;
      this.hooks.trigger(this.hooks.eventTypes.timeFunction, easing);
    };
    Transition2.prototype.transitionProperty = function() {
      this.style[style.transitionProperty] = style.transform;
    };
    Transition2.prototype.move = function(startPoint, endPoint, time, easingFn) {
      this.setPending(time > 0);
      this.transitionTimingFunction(easingFn);
      this.transitionProperty();
      this.transitionTime(time);
      this.translate(endPoint);
      var isRealtimeProbeType = this.options.probeType === 3;
      if (time && isRealtimeProbeType) {
        this.startProbe(startPoint, endPoint);
      }
      if (!time) {
        this._reflow = this.content.offsetHeight;
        if (isRealtimeProbeType) {
          this.hooks.trigger(this.hooks.eventTypes.move, endPoint);
        }
        this.hooks.trigger(this.hooks.eventTypes.end, endPoint);
      }
    };
    Transition2.prototype.doStop = function() {
      var pending = this.pending;
      this.setForceStopped(false);
      this.setCallStop(false);
      if (pending) {
        this.setPending(false);
        cancelAnimationFrame2(this.timer);
        var _a2 = this.translater.getComputedPosition(), x = _a2.x, y = _a2.y;
        this.transitionTime();
        this.translate({ x, y });
        this.setForceStopped(true);
        this.setCallStop(true);
        this.hooks.trigger(this.hooks.eventTypes.forceStop, { x, y });
      }
      return pending;
    };
    Transition2.prototype.stop = function() {
      var stopFromTransition = this.doStop();
      if (stopFromTransition) {
        this.hooks.trigger(this.hooks.eventTypes.callStop);
      }
    };
    return Transition2;
  }(Base)
);
var Animation = (
  /** @class */
  function(_super) {
    __extends(Animation2, _super);
    function Animation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Animation2.prototype.move = function(startPoint, endPoint, time, easingFn) {
      if (!time) {
        this.translate(endPoint);
        if (this.options.probeType === 3) {
          this.hooks.trigger(this.hooks.eventTypes.move, endPoint);
        }
        this.hooks.trigger(this.hooks.eventTypes.end, endPoint);
        return;
      }
      this.animate(startPoint, endPoint, time, easingFn);
    };
    Animation2.prototype.animate = function(startPoint, endPoint, duration, easingFn) {
      var _this2 = this;
      var startTime = getNow();
      var destTime = startTime + duration;
      var isRealtimeProbeType = this.options.probeType === 3;
      var step = function() {
        var now = getNow();
        if (now >= destTime) {
          _this2.translate(endPoint);
          if (isRealtimeProbeType) {
            _this2.hooks.trigger(_this2.hooks.eventTypes.move, endPoint);
          }
          _this2.hooks.trigger(_this2.hooks.eventTypes.end, endPoint);
          return;
        }
        now = (now - startTime) / duration;
        var easing = easingFn(now);
        var newPoint = {};
        Object.keys(endPoint).forEach(function(key) {
          var startValue = startPoint[key];
          var endValue = endPoint[key];
          newPoint[key] = (endValue - startValue) * easing + startValue;
        });
        _this2.translate(newPoint);
        if (isRealtimeProbeType) {
          _this2.hooks.trigger(_this2.hooks.eventTypes.move, newPoint);
        }
        if (_this2.pending) {
          _this2.timer = requestAnimationFrame2(step);
        }
        if (!_this2.pending) {
          if (_this2.callStopWhenPending) {
            _this2.callStopWhenPending = false;
          } else {
            _this2.hooks.trigger(_this2.hooks.eventTypes.end, endPoint);
          }
        }
      };
      this.setPending(true);
      if (this.callStopWhenPending) {
        this.setCallStop(false);
      }
      cancelAnimationFrame2(this.timer);
      step();
    };
    Animation2.prototype.doStop = function() {
      var pending = this.pending;
      this.setForceStopped(false);
      this.setCallStop(false);
      if (pending) {
        this.setPending(false);
        cancelAnimationFrame2(this.timer);
        var pos = this.translater.getComputedPosition();
        this.setForceStopped(true);
        this.setCallStop(true);
        this.hooks.trigger(this.hooks.eventTypes.forceStop, pos);
      }
      return pending;
    };
    Animation2.prototype.stop = function() {
      var stopFromAnimation = this.doStop();
      if (stopFromAnimation) {
        this.hooks.trigger(this.hooks.eventTypes.callStop);
      }
    };
    return Animation2;
  }(Base)
);
function createAnimater(element, translater, options) {
  var useTransition = options.useTransition;
  var animaterOptions = {};
  Object.defineProperty(animaterOptions, "probeType", {
    enumerable: true,
    configurable: false,
    get: function() {
      return options.probeType;
    }
  });
  if (useTransition) {
    return new Transition(element, translater, animaterOptions);
  } else {
    return new Animation(element, translater, animaterOptions);
  }
}
var Behavior = (
  /** @class */
  function() {
    function Behavior2(wrapper, content, options) {
      this.wrapper = wrapper;
      this.options = options;
      this.hooks = new EventEmitter([
        "beforeComputeBoundary",
        "computeBoundary",
        "momentum",
        "end",
        "ignoreHasScroll"
      ]);
      this.refresh(content);
    }
    Behavior2.prototype.start = function() {
      this.dist = 0;
      this.setMovingDirection(
        0
        /* Default */
      );
      this.setDirection(
        0
        /* Default */
      );
    };
    Behavior2.prototype.move = function(delta) {
      delta = this.hasScroll ? delta : 0;
      this.setMovingDirection(delta);
      return this.performDampingAlgorithm(delta, this.options.outOfBoundaryDampingFactor);
    };
    Behavior2.prototype.setMovingDirection = function(delta) {
      this.movingDirection = delta > 0 ? -1 : delta < 0 ? 1 : 0;
    };
    Behavior2.prototype.setDirection = function(delta) {
      this.direction = delta > 0 ? -1 : delta < 0 ? 1 : 0;
    };
    Behavior2.prototype.performDampingAlgorithm = function(delta, dampingFactor) {
      var newPos = this.currentPos + delta;
      if (newPos > this.minScrollPos || newPos < this.maxScrollPos) {
        if (newPos > this.minScrollPos && this.options.bounces[0] || newPos < this.maxScrollPos && this.options.bounces[1]) {
          newPos = this.currentPos + delta * dampingFactor;
        } else {
          newPos = newPos > this.minScrollPos ? this.minScrollPos : this.maxScrollPos;
        }
      }
      return newPos;
    };
    Behavior2.prototype.end = function(duration) {
      var momentumInfo = {
        duration: 0
      };
      var absDist = Math.abs(this.currentPos - this.startPos);
      if (this.options.momentum && duration < this.options.momentumLimitTime && absDist > this.options.momentumLimitDistance) {
        var wrapperSize = this.direction === -1 && this.options.bounces[0] || this.direction === 1 && this.options.bounces[1] ? this.wrapperSize : 0;
        momentumInfo = this.hasScroll ? this.momentum(this.currentPos, this.startPos, duration, this.maxScrollPos, this.minScrollPos, wrapperSize, this.options) : { destination: this.currentPos, duration: 0 };
      } else {
        this.hooks.trigger(this.hooks.eventTypes.end, momentumInfo);
      }
      return momentumInfo;
    };
    Behavior2.prototype.momentum = function(current, start, time, lowerMargin, upperMargin, wrapperSize, options) {
      if (options === void 0) {
        options = this.options;
      }
      var distance = current - start;
      var speed = Math.abs(distance) / time;
      var deceleration = options.deceleration, swipeBounceTime = options.swipeBounceTime, swipeTime = options.swipeTime;
      var duration = Math.min(swipeTime, speed * 2 / deceleration);
      var momentumData = {
        destination: current + speed * speed / deceleration * (distance < 0 ? -1 : 1),
        duration,
        rate: 15
      };
      this.hooks.trigger(this.hooks.eventTypes.momentum, momentumData, distance);
      if (momentumData.destination < lowerMargin) {
        momentumData.destination = wrapperSize ? Math.max(lowerMargin - wrapperSize / 4, lowerMargin - wrapperSize / momentumData.rate * speed) : lowerMargin;
        momentumData.duration = swipeBounceTime;
      } else if (momentumData.destination > upperMargin) {
        momentumData.destination = wrapperSize ? Math.min(upperMargin + wrapperSize / 4, upperMargin + wrapperSize / momentumData.rate * speed) : upperMargin;
        momentumData.duration = swipeBounceTime;
      }
      momentumData.destination = Math.round(momentumData.destination);
      return momentumData;
    };
    Behavior2.prototype.updateDirection = function() {
      var absDist = this.currentPos - this.absStartPos;
      this.setDirection(absDist);
    };
    Behavior2.prototype.refresh = function(content) {
      var _a2 = this.options.rect, size = _a2.size, position = _a2.position;
      var isWrapperStatic = window.getComputedStyle(this.wrapper, null).position === "static";
      var wrapperRect = getRect(this.wrapper);
      this.wrapperSize = this.wrapper[size === "width" ? "clientWidth" : "clientHeight"];
      this.setContent(content);
      var contentRect = getRect(this.content);
      this.contentSize = contentRect[size];
      this.relativeOffset = contentRect[position];
      if (isWrapperStatic) {
        this.relativeOffset -= wrapperRect[position];
      }
      this.computeBoundary();
      this.setDirection(
        0
        /* Default */
      );
    };
    Behavior2.prototype.setContent = function(content) {
      if (content !== this.content) {
        this.content = content;
        this.resetState();
      }
    };
    Behavior2.prototype.resetState = function() {
      this.currentPos = 0;
      this.startPos = 0;
      this.dist = 0;
      this.setDirection(
        0
        /* Default */
      );
      this.setMovingDirection(
        0
        /* Default */
      );
      this.resetStartPos();
    };
    Behavior2.prototype.computeBoundary = function() {
      this.hooks.trigger(this.hooks.eventTypes.beforeComputeBoundary);
      var boundary = {
        minScrollPos: 0,
        maxScrollPos: this.wrapperSize - this.contentSize
      };
      if (boundary.maxScrollPos < 0) {
        boundary.maxScrollPos -= this.relativeOffset;
        if (this.options.specifiedIndexAsContent === 0) {
          boundary.minScrollPos = -this.relativeOffset;
        }
      }
      this.hooks.trigger(this.hooks.eventTypes.computeBoundary, boundary);
      this.minScrollPos = boundary.minScrollPos;
      this.maxScrollPos = boundary.maxScrollPos;
      this.hasScroll = this.options.scrollable && this.maxScrollPos < this.minScrollPos;
      if (!this.hasScroll && this.minScrollPos < this.maxScrollPos) {
        this.maxScrollPos = this.minScrollPos;
        this.contentSize = this.wrapperSize;
      }
    };
    Behavior2.prototype.updatePosition = function(pos) {
      this.currentPos = pos;
    };
    Behavior2.prototype.getCurrentPos = function() {
      return this.currentPos;
    };
    Behavior2.prototype.checkInBoundary = function() {
      var position = this.adjustPosition(this.currentPos);
      var inBoundary = position === this.getCurrentPos();
      return {
        position,
        inBoundary
      };
    };
    Behavior2.prototype.adjustPosition = function(pos) {
      if (!this.hasScroll && !this.hooks.trigger(this.hooks.eventTypes.ignoreHasScroll)) {
        pos = this.minScrollPos;
      } else if (pos > this.minScrollPos) {
        pos = this.minScrollPos;
      } else if (pos < this.maxScrollPos) {
        pos = this.maxScrollPos;
      }
      return pos;
    };
    Behavior2.prototype.updateStartPos = function() {
      this.startPos = this.currentPos;
    };
    Behavior2.prototype.updateAbsStartPos = function() {
      this.absStartPos = this.currentPos;
    };
    Behavior2.prototype.resetStartPos = function() {
      this.updateStartPos();
      this.updateAbsStartPos();
    };
    Behavior2.prototype.getAbsDist = function(delta) {
      this.dist += delta;
      return Math.abs(this.dist);
    };
    Behavior2.prototype.destroy = function() {
      this.hooks.destroy();
    };
    return Behavior2;
  }()
);
var _a;
var _b;
var _c;
var _d;
var PassthroughHandlers = (_a = {}, _a[
  "yes"
  /* Yes */
] = function(e) {
  return true;
}, _a[
  "no"
  /* No */
] = function(e) {
  e.preventDefault();
  return false;
}, _a);
var DirectionMap = (_b = {}, _b[
  "horizontal"
  /* Horizontal */
] = (_c = {}, _c[
  "yes"
  /* Yes */
] = "horizontal", _c[
  "no"
  /* No */
] = "vertical", _c), _b[
  "vertical"
  /* Vertical */
] = (_d = {}, _d[
  "yes"
  /* Yes */
] = "vertical", _d[
  "no"
  /* No */
] = "horizontal", _d), _b);
var DirectionLockAction = (
  /** @class */
  function() {
    function DirectionLockAction2(directionLockThreshold, freeScroll, eventPassthrough) {
      this.directionLockThreshold = directionLockThreshold;
      this.freeScroll = freeScroll;
      this.eventPassthrough = eventPassthrough;
      this.reset();
    }
    DirectionLockAction2.prototype.reset = function() {
      this.directionLocked = "";
    };
    DirectionLockAction2.prototype.checkMovingDirection = function(absDistX, absDistY, e) {
      this.computeDirectionLock(absDistX, absDistY);
      return this.handleEventPassthrough(e);
    };
    DirectionLockAction2.prototype.adjustDelta = function(deltaX, deltaY) {
      if (this.directionLocked === "horizontal") {
        deltaY = 0;
      } else if (this.directionLocked === "vertical") {
        deltaX = 0;
      }
      return {
        deltaX,
        deltaY
      };
    };
    DirectionLockAction2.prototype.computeDirectionLock = function(absDistX, absDistY) {
      if (this.directionLocked === "" && !this.freeScroll) {
        if (absDistX > absDistY + this.directionLockThreshold) {
          this.directionLocked = "horizontal";
        } else if (absDistY >= absDistX + this.directionLockThreshold) {
          this.directionLocked = "vertical";
        } else {
          this.directionLocked = "none";
        }
      }
    };
    DirectionLockAction2.prototype.handleEventPassthrough = function(e) {
      var handleMap = DirectionMap[this.directionLocked];
      if (handleMap) {
        if (this.eventPassthrough === handleMap[
          "yes"
          /* Yes */
        ]) {
          return PassthroughHandlers[
            "yes"
            /* Yes */
          ](e);
        } else if (this.eventPassthrough === handleMap[
          "no"
          /* No */
        ]) {
          return PassthroughHandlers[
            "no"
            /* No */
          ](e);
        }
      }
      return false;
    };
    return DirectionLockAction2;
  }()
);
var ScrollerActions = (
  /** @class */
  function() {
    function ScrollerActions2(scrollBehaviorX, scrollBehaviorY, actionsHandler, animater, options) {
      this.hooks = new EventEmitter([
        "start",
        "beforeMove",
        "scrollStart",
        "scroll",
        "beforeEnd",
        "end",
        "scrollEnd",
        "contentNotMoved",
        "detectMovingDirection"
      ]);
      this.scrollBehaviorX = scrollBehaviorX;
      this.scrollBehaviorY = scrollBehaviorY;
      this.actionsHandler = actionsHandler;
      this.animater = animater;
      this.options = options;
      this.directionLockAction = new DirectionLockAction(options.directionLockThreshold, options.freeScroll, options.eventPassthrough);
      this.enabled = true;
      this.bindActionsHandler();
    }
    ScrollerActions2.prototype.bindActionsHandler = function() {
      var _this2 = this;
      this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.start, function(e) {
        if (!_this2.enabled)
          return true;
        return _this2.handleStart(e);
      });
      this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.move, function(_a2) {
        var deltaX = _a2.deltaX, deltaY = _a2.deltaY, e = _a2.e;
        if (!_this2.enabled)
          return true;
        return _this2.handleMove(deltaX, deltaY, e);
      });
      this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.end, function(e) {
        if (!_this2.enabled)
          return true;
        return _this2.handleEnd(e);
      });
      this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.click, function(e) {
        if (_this2.enabled && !e._constructed) {
          _this2.handleClick(e);
        }
      });
    };
    ScrollerActions2.prototype.handleStart = function(e) {
      var timestamp = getNow();
      this.fingerMoved = false;
      this.contentMoved = false;
      this.startTime = timestamp;
      this.directionLockAction.reset();
      this.scrollBehaviorX.start();
      this.scrollBehaviorY.start();
      this.animater.doStop();
      this.scrollBehaviorX.resetStartPos();
      this.scrollBehaviorY.resetStartPos();
      this.hooks.trigger(this.hooks.eventTypes.start, e);
    };
    ScrollerActions2.prototype.handleMove = function(deltaX, deltaY, e) {
      if (this.hooks.trigger(this.hooks.eventTypes.beforeMove, e)) {
        return;
      }
      var absDistX = this.scrollBehaviorX.getAbsDist(deltaX);
      var absDistY = this.scrollBehaviorY.getAbsDist(deltaY);
      var timestamp = getNow();
      if (this.checkMomentum(absDistX, absDistY, timestamp)) {
        return true;
      }
      if (this.directionLockAction.checkMovingDirection(absDistX, absDistY, e)) {
        this.actionsHandler.setInitiated();
        return true;
      }
      var delta = this.directionLockAction.adjustDelta(deltaX, deltaY);
      var prevX = this.scrollBehaviorX.getCurrentPos();
      var newX = this.scrollBehaviorX.move(delta.deltaX);
      var prevY = this.scrollBehaviorY.getCurrentPos();
      var newY = this.scrollBehaviorY.move(delta.deltaY);
      if (this.hooks.trigger(this.hooks.eventTypes.detectMovingDirection)) {
        return;
      }
      if (!this.fingerMoved) {
        this.fingerMoved = true;
      }
      var positionChanged = newX !== prevX || newY !== prevY;
      if (!this.contentMoved && !positionChanged) {
        this.hooks.trigger(this.hooks.eventTypes.contentNotMoved);
      }
      if (!this.contentMoved && positionChanged) {
        this.contentMoved = true;
        this.hooks.trigger(this.hooks.eventTypes.scrollStart);
      }
      if (this.contentMoved && positionChanged) {
        this.animater.translate({
          x: newX,
          y: newY
        });
        this.dispatchScroll(timestamp);
      }
    };
    ScrollerActions2.prototype.dispatchScroll = function(timestamp) {
      if (timestamp - this.startTime > this.options.momentumLimitTime) {
        this.startTime = timestamp;
        this.scrollBehaviorX.updateStartPos();
        this.scrollBehaviorY.updateStartPos();
        if (this.options.probeType === 1) {
          this.hooks.trigger(this.hooks.eventTypes.scroll, this.getCurrentPos());
        }
      }
      if (this.options.probeType > 1) {
        this.hooks.trigger(this.hooks.eventTypes.scroll, this.getCurrentPos());
      }
    };
    ScrollerActions2.prototype.checkMomentum = function(absDistX, absDistY, timestamp) {
      return timestamp - this.endTime > this.options.momentumLimitTime && absDistY < this.options.momentumLimitDistance && absDistX < this.options.momentumLimitDistance;
    };
    ScrollerActions2.prototype.handleEnd = function(e) {
      if (this.hooks.trigger(this.hooks.eventTypes.beforeEnd, e)) {
        return;
      }
      var currentPos = this.getCurrentPos();
      this.scrollBehaviorX.updateDirection();
      this.scrollBehaviorY.updateDirection();
      if (this.hooks.trigger(this.hooks.eventTypes.end, e, currentPos)) {
        return true;
      }
      currentPos = this.ensureIntegerPos(currentPos);
      this.animater.translate(currentPos);
      this.endTime = getNow();
      var duration = this.endTime - this.startTime;
      this.hooks.trigger(this.hooks.eventTypes.scrollEnd, currentPos, duration);
    };
    ScrollerActions2.prototype.ensureIntegerPos = function(currentPos) {
      this.ensuringInteger = true;
      var x = currentPos.x, y = currentPos.y;
      var _a2 = this.scrollBehaviorX, minScrollPosX = _a2.minScrollPos, maxScrollPosX = _a2.maxScrollPos;
      var _b2 = this.scrollBehaviorY, minScrollPosY = _b2.minScrollPos, maxScrollPosY = _b2.maxScrollPos;
      x = x > 0 ? Math.ceil(x) : Math.floor(x);
      y = y > 0 ? Math.ceil(y) : Math.floor(y);
      x = between(x, maxScrollPosX, minScrollPosX);
      y = between(y, maxScrollPosY, minScrollPosY);
      return { x, y };
    };
    ScrollerActions2.prototype.handleClick = function(e) {
      if (!preventDefaultExceptionFn(e.target, this.options.preventDefaultException)) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
    ScrollerActions2.prototype.getCurrentPos = function() {
      return {
        x: this.scrollBehaviorX.getCurrentPos(),
        y: this.scrollBehaviorY.getCurrentPos()
      };
    };
    ScrollerActions2.prototype.refresh = function() {
      this.endTime = 0;
    };
    ScrollerActions2.prototype.destroy = function() {
      this.hooks.destroy();
    };
    return ScrollerActions2;
  }()
);
function createActionsHandlerOptions(bsOptions) {
  var options = [
    "click",
    "bindToWrapper",
    "disableMouse",
    "disableTouch",
    "preventDefault",
    "stopPropagation",
    "tagException",
    "preventDefaultException",
    "autoEndDistance"
  ].reduce(function(prev, cur) {
    prev[cur] = bsOptions[cur];
    return prev;
  }, {});
  return options;
}
function createBehaviorOptions(bsOptions, extraProp, bounces, rect) {
  var options = [
    "momentum",
    "momentumLimitTime",
    "momentumLimitDistance",
    "deceleration",
    "swipeBounceTime",
    "swipeTime",
    "outOfBoundaryDampingFactor",
    "specifiedIndexAsContent"
  ].reduce(function(prev, cur) {
    prev[cur] = bsOptions[cur];
    return prev;
  }, {});
  options.scrollable = !!bsOptions[extraProp];
  options.bounces = bounces;
  options.rect = rect;
  return options;
}
function bubbling(source, target, events) {
  events.forEach(function(event) {
    var sourceEvent;
    var targetEvent;
    if (typeof event === "string") {
      sourceEvent = targetEvent = event;
    } else {
      sourceEvent = event.source;
      targetEvent = event.target;
    }
    source.on(sourceEvent, function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return target.trigger.apply(target, __spreadArrays([targetEvent], args));
    });
  });
}
function isSamePoint(startPoint, endPoint) {
  var keys = Object.keys(startPoint);
  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    if (startPoint[key] !== endPoint[key])
      return false;
  }
  return true;
}
var MIN_SCROLL_DISTANCE = 1;
var Scroller2 = (
  /** @class */
  function() {
    function Scroller3(wrapper, content, options) {
      this.wrapper = wrapper;
      this.content = content;
      this.resizeTimeout = 0;
      this.hooks = new EventEmitter([
        "beforeStart",
        "beforeMove",
        "beforeScrollStart",
        "scrollStart",
        "scroll",
        "beforeEnd",
        "scrollEnd",
        "resize",
        "touchEnd",
        "end",
        "flick",
        "scrollCancel",
        "momentum",
        "scrollTo",
        "minDistanceScroll",
        "scrollToElement",
        "beforeRefresh"
      ]);
      this.options = options;
      var _a2 = this.options.bounce, left = _a2.left, right = _a2.right, top = _a2.top, bottom = _a2.bottom;
      this.scrollBehaviorX = new Behavior(wrapper, content, createBehaviorOptions(options, "scrollX", [left, right], {
        size: "width",
        position: "left"
      }));
      this.scrollBehaviorY = new Behavior(wrapper, content, createBehaviorOptions(options, "scrollY", [top, bottom], {
        size: "height",
        position: "top"
      }));
      this.translater = new Translater(this.content);
      this.animater = createAnimater(this.content, this.translater, this.options);
      this.actionsHandler = new ActionsHandler(this.options.bindToTarget ? this.content : wrapper, createActionsHandlerOptions(this.options));
      this.actions = new ScrollerActions(this.scrollBehaviorX, this.scrollBehaviorY, this.actionsHandler, this.animater, this.options);
      var resizeHandler = this.resize.bind(this);
      this.resizeRegister = new EventRegister(window, [
        {
          name: "orientationchange",
          handler: resizeHandler
        },
        {
          name: "resize",
          handler: resizeHandler
        }
      ]);
      this.registerTransitionEnd();
      this.init();
    }
    Scroller3.prototype.init = function() {
      var _this2 = this;
      this.bindTranslater();
      this.bindAnimater();
      this.bindActions();
      this.hooks.on(this.hooks.eventTypes.scrollEnd, function() {
        _this2.togglePointerEvents(true);
      });
    };
    Scroller3.prototype.registerTransitionEnd = function() {
      this.transitionEndRegister = new EventRegister(this.content, [
        {
          name: style.transitionEnd,
          handler: this.transitionEnd.bind(this)
        }
      ]);
    };
    Scroller3.prototype.bindTranslater = function() {
      var _this2 = this;
      var hooks = this.translater.hooks;
      hooks.on(hooks.eventTypes.beforeTranslate, function(transformStyle) {
        if (_this2.options.translateZ) {
          transformStyle.push(_this2.options.translateZ);
        }
      });
      hooks.on(hooks.eventTypes.translate, function(pos) {
        var prevPos = _this2.getCurrentPos();
        _this2.updatePositions(pos);
        if (_this2.actions.ensuringInteger === true) {
          _this2.actions.ensuringInteger = false;
          return;
        }
        if (pos.x !== prevPos.x || pos.y !== prevPos.y) {
          _this2.togglePointerEvents(false);
        }
      });
    };
    Scroller3.prototype.bindAnimater = function() {
      var _this2 = this;
      this.animater.hooks.on(this.animater.hooks.eventTypes.end, function(pos) {
        if (!_this2.resetPosition(_this2.options.bounceTime)) {
          _this2.animater.setPending(false);
          _this2.hooks.trigger(_this2.hooks.eventTypes.scrollEnd, pos);
        }
      });
      bubbling(this.animater.hooks, this.hooks, [
        {
          source: this.animater.hooks.eventTypes.move,
          target: this.hooks.eventTypes.scroll
        },
        {
          source: this.animater.hooks.eventTypes.forceStop,
          target: this.hooks.eventTypes.scrollEnd
        }
      ]);
    };
    Scroller3.prototype.bindActions = function() {
      var _this2 = this;
      var actions = this.actions;
      bubbling(actions.hooks, this.hooks, [
        {
          source: actions.hooks.eventTypes.start,
          target: this.hooks.eventTypes.beforeStart
        },
        {
          source: actions.hooks.eventTypes.start,
          target: this.hooks.eventTypes.beforeScrollStart
        },
        {
          source: actions.hooks.eventTypes.beforeMove,
          target: this.hooks.eventTypes.beforeMove
        },
        {
          source: actions.hooks.eventTypes.scrollStart,
          target: this.hooks.eventTypes.scrollStart
        },
        {
          source: actions.hooks.eventTypes.scroll,
          target: this.hooks.eventTypes.scroll
        },
        {
          source: actions.hooks.eventTypes.beforeEnd,
          target: this.hooks.eventTypes.beforeEnd
        }
      ]);
      actions.hooks.on(actions.hooks.eventTypes.end, function(e, pos) {
        _this2.hooks.trigger(_this2.hooks.eventTypes.touchEnd, pos);
        if (_this2.hooks.trigger(_this2.hooks.eventTypes.end, pos)) {
          return true;
        }
        if (!actions.fingerMoved) {
          _this2.hooks.trigger(_this2.hooks.eventTypes.scrollCancel);
          if (_this2.checkClick(e)) {
            return true;
          }
        }
        if (_this2.resetPosition(_this2.options.bounceTime, ease.bounce)) {
          _this2.animater.setForceStopped(false);
          return true;
        }
      });
      actions.hooks.on(actions.hooks.eventTypes.scrollEnd, function(pos, duration) {
        var deltaX = Math.abs(pos.x - _this2.scrollBehaviorX.startPos);
        var deltaY = Math.abs(pos.y - _this2.scrollBehaviorY.startPos);
        if (_this2.checkFlick(duration, deltaX, deltaY)) {
          _this2.animater.setForceStopped(false);
          _this2.hooks.trigger(_this2.hooks.eventTypes.flick);
          return;
        }
        if (_this2.momentum(pos, duration)) {
          _this2.animater.setForceStopped(false);
          return;
        }
        if (actions.contentMoved) {
          _this2.hooks.trigger(_this2.hooks.eventTypes.scrollEnd, pos);
        }
        if (_this2.animater.forceStopped) {
          _this2.animater.setForceStopped(false);
        }
      });
    };
    Scroller3.prototype.checkFlick = function(duration, deltaX, deltaY) {
      var flickMinMovingDistance = 1;
      if (this.hooks.events.flick.length > 1 && duration < this.options.flickLimitTime && deltaX < this.options.flickLimitDistance && deltaY < this.options.flickLimitDistance && (deltaY > flickMinMovingDistance || deltaX > flickMinMovingDistance)) {
        return true;
      }
    };
    Scroller3.prototype.momentum = function(pos, duration) {
      var meta = {
        time: 0,
        easing: ease.swiper,
        newX: pos.x,
        newY: pos.y
      };
      var momentumX = this.scrollBehaviorX.end(duration);
      var momentumY = this.scrollBehaviorY.end(duration);
      meta.newX = isUndef(momentumX.destination) ? meta.newX : momentumX.destination;
      meta.newY = isUndef(momentumY.destination) ? meta.newY : momentumY.destination;
      meta.time = Math.max(momentumX.duration, momentumY.duration);
      this.hooks.trigger(this.hooks.eventTypes.momentum, meta, this);
      if (meta.newX !== pos.x || meta.newY !== pos.y) {
        if (meta.newX > this.scrollBehaviorX.minScrollPos || meta.newX < this.scrollBehaviorX.maxScrollPos || meta.newY > this.scrollBehaviorY.minScrollPos || meta.newY < this.scrollBehaviorY.maxScrollPos) {
          meta.easing = ease.swipeBounce;
        }
        this.scrollTo(meta.newX, meta.newY, meta.time, meta.easing);
        return true;
      }
    };
    Scroller3.prototype.checkClick = function(e) {
      var cancelable = {
        preventClick: this.animater.forceStopped
      };
      if (this.hooks.trigger(this.hooks.eventTypes.checkClick)) {
        this.animater.setForceStopped(false);
        return true;
      }
      if (!cancelable.preventClick) {
        var _dblclick = this.options.dblclick;
        var dblclickTrigged = false;
        if (_dblclick && this.lastClickTime) {
          var _a2 = _dblclick.delay, delay = _a2 === void 0 ? 300 : _a2;
          if (getNow() - this.lastClickTime < delay) {
            dblclickTrigged = true;
            dblclick(e);
          }
        }
        if (this.options.tap) {
          tap(e, this.options.tap);
        }
        if (this.options.click && !preventDefaultExceptionFn(e.target, this.options.preventDefaultException)) {
          click(e);
        }
        this.lastClickTime = dblclickTrigged ? null : getNow();
        return true;
      }
      return false;
    };
    Scroller3.prototype.resize = function() {
      var _this2 = this;
      if (!this.actions.enabled) {
        return;
      }
      if (isAndroid) {
        this.wrapper.scrollTop = 0;
      }
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = window.setTimeout(function() {
        _this2.hooks.trigger(_this2.hooks.eventTypes.resize);
      }, this.options.resizePolling);
    };
    Scroller3.prototype.transitionEnd = function(e) {
      if (e.target !== this.content || !this.animater.pending) {
        return;
      }
      var animater = this.animater;
      animater.transitionTime();
      if (!this.resetPosition(this.options.bounceTime, ease.bounce)) {
        this.animater.setPending(false);
        if (this.options.probeType !== 3) {
          this.hooks.trigger(this.hooks.eventTypes.scrollEnd, this.getCurrentPos());
        }
      }
    };
    Scroller3.prototype.togglePointerEvents = function(enabled) {
      if (enabled === void 0) {
        enabled = true;
      }
      var el = this.content.children.length ? this.content.children : [this.content];
      var pointerEvents = enabled ? "auto" : "none";
      for (var i = 0; i < el.length; i++) {
        var node = el[i];
        if (node.isBScrollContainer) {
          continue;
        }
        node.style.pointerEvents = pointerEvents;
      }
    };
    Scroller3.prototype.refresh = function(content) {
      var contentChanged = this.setContent(content);
      this.hooks.trigger(this.hooks.eventTypes.beforeRefresh);
      this.scrollBehaviorX.refresh(content);
      this.scrollBehaviorY.refresh(content);
      if (contentChanged) {
        this.translater.setContent(content);
        this.animater.setContent(content);
        this.transitionEndRegister.destroy();
        this.registerTransitionEnd();
        if (this.options.bindToTarget) {
          this.actionsHandler.setContent(content);
        }
      }
      this.actions.refresh();
      this.wrapperOffset = offset(this.wrapper);
    };
    Scroller3.prototype.setContent = function(content) {
      var contentChanged = content !== this.content;
      if (contentChanged) {
        this.content = content;
      }
      return contentChanged;
    };
    Scroller3.prototype.scrollBy = function(deltaX, deltaY, time, easing) {
      if (time === void 0) {
        time = 0;
      }
      var _a2 = this.getCurrentPos(), x = _a2.x, y = _a2.y;
      easing = !easing ? ease.bounce : easing;
      deltaX += x;
      deltaY += y;
      this.scrollTo(deltaX, deltaY, time, easing);
    };
    Scroller3.prototype.scrollTo = function(x, y, time, easing, extraTransform) {
      if (time === void 0) {
        time = 0;
      }
      if (easing === void 0) {
        easing = ease.bounce;
      }
      if (extraTransform === void 0) {
        extraTransform = {
          start: {},
          end: {}
        };
      }
      var easingFn = this.options.useTransition ? easing.style : easing.fn;
      var currentPos = this.getCurrentPos();
      var startPoint = __assign({ x: currentPos.x, y: currentPos.y }, extraTransform.start);
      var endPoint = __assign({
        x,
        y
      }, extraTransform.end);
      this.hooks.trigger(this.hooks.eventTypes.scrollTo, endPoint);
      if (isSamePoint(startPoint, endPoint))
        return;
      var deltaX = Math.abs(endPoint.x - startPoint.x);
      var deltaY = Math.abs(endPoint.y - startPoint.y);
      if (deltaX < MIN_SCROLL_DISTANCE && deltaY < MIN_SCROLL_DISTANCE) {
        time = 0;
        this.hooks.trigger(this.hooks.eventTypes.minDistanceScroll);
      }
      this.animater.move(startPoint, endPoint, time, easingFn);
    };
    Scroller3.prototype.scrollToElement = function(el, time, offsetX, offsetY, easing) {
      var targetEle = getElement(el);
      var pos = offset(targetEle);
      var getOffset = function(offset3, size, wrapperSize) {
        if (typeof offset3 === "number") {
          return offset3;
        }
        return offset3 ? Math.round(size / 2 - wrapperSize / 2) : 0;
      };
      offsetX = getOffset(offsetX, targetEle.offsetWidth, this.wrapper.offsetWidth);
      offsetY = getOffset(offsetY, targetEle.offsetHeight, this.wrapper.offsetHeight);
      var getPos = function(pos2, wrapperPos, offset3, scrollBehavior) {
        pos2 -= wrapperPos;
        pos2 = scrollBehavior.adjustPosition(pos2 - offset3);
        return pos2;
      };
      pos.left = getPos(pos.left, this.wrapperOffset.left, offsetX, this.scrollBehaviorX);
      pos.top = getPos(pos.top, this.wrapperOffset.top, offsetY, this.scrollBehaviorY);
      if (this.hooks.trigger(this.hooks.eventTypes.scrollToElement, targetEle, pos)) {
        return;
      }
      this.scrollTo(pos.left, pos.top, time, easing);
    };
    Scroller3.prototype.resetPosition = function(time, easing) {
      if (time === void 0) {
        time = 0;
      }
      if (easing === void 0) {
        easing = ease.bounce;
      }
      var _a2 = this.scrollBehaviorX.checkInBoundary(), x = _a2.position, xInBoundary = _a2.inBoundary;
      var _b2 = this.scrollBehaviorY.checkInBoundary(), y = _b2.position, yInBoundary = _b2.inBoundary;
      if (xInBoundary && yInBoundary) {
        return false;
      }
      if (isIOSBadVersion) {
        this.reflow();
      }
      this.scrollTo(x, y, time, easing);
      return true;
    };
    Scroller3.prototype.reflow = function() {
      this._reflow = this.content.offsetHeight;
    };
    Scroller3.prototype.updatePositions = function(pos) {
      this.scrollBehaviorX.updatePosition(pos.x);
      this.scrollBehaviorY.updatePosition(pos.y);
    };
    Scroller3.prototype.getCurrentPos = function() {
      return this.actions.getCurrentPos();
    };
    Scroller3.prototype.enable = function() {
      this.actions.enabled = true;
    };
    Scroller3.prototype.disable = function() {
      cancelAnimationFrame2(this.animater.timer);
      this.actions.enabled = false;
    };
    Scroller3.prototype.destroy = function() {
      var _this2 = this;
      var keys = [
        "resizeRegister",
        "transitionEndRegister",
        "actionsHandler",
        "actions",
        "hooks",
        "animater",
        "translater",
        "scrollBehaviorX",
        "scrollBehaviorY"
      ];
      keys.forEach(function(key) {
        return _this2[key].destroy();
      });
    };
    return Scroller3;
  }()
);
var BScrollConstructor = (
  /** @class */
  function(_super) {
    __extends(BScrollConstructor2, _super);
    function BScrollConstructor2(el, options) {
      var _this2 = _super.call(this, [
        "refresh",
        "contentChanged",
        "enable",
        "disable",
        "beforeScrollStart",
        "scrollStart",
        "scroll",
        "scrollEnd",
        "scrollCancel",
        "touchEnd",
        "flick",
        "destroy"
      ]) || this;
      var wrapper = getElement(el);
      if (!wrapper) {
        warn("Can not resolve the wrapper DOM.");
        return _this2;
      }
      _this2.plugins = {};
      _this2.options = new OptionsConstructor().merge(options).process();
      if (!_this2.setContent(wrapper).valid) {
        return _this2;
      }
      _this2.hooks = new EventEmitter([
        "refresh",
        "enable",
        "disable",
        "destroy",
        "beforeInitialScrollTo",
        "contentChanged"
      ]);
      _this2.init(wrapper);
      return _this2;
    }
    BScrollConstructor2.use = function(ctor) {
      var name = ctor.pluginName;
      var installed = BScrollConstructor2.plugins.some(function(plugin) {
        return ctor === plugin.ctor;
      });
      if (installed)
        return BScrollConstructor2;
      if (isUndef(name)) {
        warn("Plugin Class must specify plugin's name in static property by 'pluginName' field.");
        return BScrollConstructor2;
      }
      BScrollConstructor2.pluginsMap[name] = true;
      BScrollConstructor2.plugins.push({
        name,
        applyOrder: ctor.applyOrder,
        ctor
      });
      return BScrollConstructor2;
    };
    BScrollConstructor2.prototype.setContent = function(wrapper) {
      var contentChanged = false;
      var valid = true;
      var content = wrapper.children[this.options.specifiedIndexAsContent];
      if (!content) {
        warn("The wrapper need at least one child element to be content element to scroll.");
        valid = false;
      } else {
        contentChanged = this.content !== content;
        if (contentChanged) {
          this.content = content;
        }
      }
      return {
        valid,
        contentChanged
      };
    };
    BScrollConstructor2.prototype.init = function(wrapper) {
      var _this2 = this;
      this.wrapper = wrapper;
      wrapper.isBScrollContainer = true;
      this.scroller = new Scroller2(wrapper, this.content, this.options);
      this.scroller.hooks.on(this.scroller.hooks.eventTypes.resize, function() {
        _this2.refresh();
      });
      this.eventBubbling();
      this.handleAutoBlur();
      this.enable();
      this.proxy(propertiesConfig);
      this.applyPlugins();
      this.refreshWithoutReset(this.content);
      var _a2 = this.options, startX = _a2.startX, startY = _a2.startY;
      var position = {
        x: startX,
        y: startY
      };
      if (this.hooks.trigger(this.hooks.eventTypes.beforeInitialScrollTo, position)) {
        return;
      }
      this.scroller.scrollTo(position.x, position.y);
    };
    BScrollConstructor2.prototype.applyPlugins = function() {
      var _this2 = this;
      var options = this.options;
      BScrollConstructor2.plugins.sort(function(a, b) {
        var _a2;
        var applyOrderMap = (_a2 = {}, _a2[
          "pre"
          /* Pre */
        ] = -1, _a2[
          "post"
          /* Post */
        ] = 1, _a2);
        var aOrder = a.applyOrder ? applyOrderMap[a.applyOrder] : 0;
        var bOrder = b.applyOrder ? applyOrderMap[b.applyOrder] : 0;
        return aOrder - bOrder;
      }).forEach(function(item) {
        var ctor = item.ctor;
        if (options[item.name] && typeof ctor === "function") {
          _this2.plugins[item.name] = new ctor(_this2);
        }
      });
    };
    BScrollConstructor2.prototype.handleAutoBlur = function() {
      if (this.options.autoBlur) {
        this.on(this.eventTypes.beforeScrollStart, function() {
          var activeElement = document.activeElement;
          if (activeElement && (activeElement.tagName === "INPUT" || activeElement.tagName === "TEXTAREA")) {
            activeElement.blur();
          }
        });
      }
    };
    BScrollConstructor2.prototype.eventBubbling = function() {
      bubbling(this.scroller.hooks, this, [
        this.eventTypes.beforeScrollStart,
        this.eventTypes.scrollStart,
        this.eventTypes.scroll,
        this.eventTypes.scrollEnd,
        this.eventTypes.scrollCancel,
        this.eventTypes.touchEnd,
        this.eventTypes.flick
      ]);
    };
    BScrollConstructor2.prototype.refreshWithoutReset = function(content) {
      this.scroller.refresh(content);
      this.hooks.trigger(this.hooks.eventTypes.refresh, content);
      this.trigger(this.eventTypes.refresh, content);
    };
    BScrollConstructor2.prototype.proxy = function(propertiesConfig2) {
      var _this2 = this;
      propertiesConfig2.forEach(function(_a2) {
        var key = _a2.key, sourceKey = _a2.sourceKey;
        propertiesProxy(_this2, sourceKey, key);
      });
    };
    BScrollConstructor2.prototype.refresh = function() {
      var _a2 = this.setContent(this.wrapper), contentChanged = _a2.contentChanged, valid = _a2.valid;
      if (valid) {
        var content = this.content;
        this.refreshWithoutReset(content);
        if (contentChanged) {
          this.hooks.trigger(this.hooks.eventTypes.contentChanged, content);
          this.trigger(this.eventTypes.contentChanged, content);
        }
        this.scroller.resetPosition();
      }
    };
    BScrollConstructor2.prototype.enable = function() {
      this.scroller.enable();
      this.hooks.trigger(this.hooks.eventTypes.enable);
      this.trigger(this.eventTypes.enable);
    };
    BScrollConstructor2.prototype.disable = function() {
      this.scroller.disable();
      this.hooks.trigger(this.hooks.eventTypes.disable);
      this.trigger(this.eventTypes.disable);
    };
    BScrollConstructor2.prototype.destroy = function() {
      this.hooks.trigger(this.hooks.eventTypes.destroy);
      this.trigger(this.eventTypes.destroy);
      this.scroller.destroy();
    };
    BScrollConstructor2.prototype.eventRegister = function(names) {
      this.registerType(names);
    };
    BScrollConstructor2.plugins = [];
    BScrollConstructor2.pluginsMap = {};
    return BScrollConstructor2;
  }(EventEmitter)
);
function createBScroll(el, options) {
  var bs = new BScrollConstructor(el, options);
  return bs;
}
createBScroll.use = BScrollConstructor.use;
createBScroll.plugins = BScrollConstructor.plugins;
createBScroll.pluginsMap = BScrollConstructor.pluginsMap;
var BScroll = createBScroll;
var MouseWheel = (
  /** @class */
  function() {
    function MouseWheel2(scroll) {
      this.scroll = scroll;
      this.wheelEndTimer = 0;
      this.wheelMoveTimer = 0;
      this.wheelStart = false;
      this.init();
    }
    MouseWheel2.prototype.init = function() {
      this.handleBScroll();
      this.handleOptions();
      this.handleHooks();
      this.registerEvent();
    };
    MouseWheel2.prototype.handleBScroll = function() {
      this.scroll.registerType([
        "alterOptions",
        "mousewheelStart",
        "mousewheelMove",
        "mousewheelEnd"
      ]);
    };
    MouseWheel2.prototype.handleOptions = function() {
      var userOptions = this.scroll.options.mouseWheel === true ? {} : this.scroll.options.mouseWheel;
      var defaultOptions = {
        speed: 20,
        invert: false,
        easeTime: 300,
        discreteTime: 400,
        throttleTime: 0,
        dampingFactor: 0.1
      };
      this.mouseWheelOpt = extend(defaultOptions, userOptions);
    };
    MouseWheel2.prototype.handleHooks = function() {
      this.hooksFn = [];
      this.registerHooks(this.scroll.hooks, "destroy", this.destroy);
    };
    MouseWheel2.prototype.registerEvent = function() {
      this.eventRegister = new EventRegister(this.scroll.scroller.wrapper, [
        {
          name: "wheel",
          handler: this.wheelHandler.bind(this)
        },
        {
          name: "mousewheel",
          handler: this.wheelHandler.bind(this)
        },
        {
          name: "DOMMouseScroll",
          handler: this.wheelHandler.bind(this)
        }
      ]);
    };
    MouseWheel2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    MouseWheel2.prototype.wheelHandler = function(e) {
      if (!this.scroll.enabled) {
        return;
      }
      this.beforeHandler(e);
      if (!this.wheelStart) {
        this.wheelStartHandler(e);
        this.wheelStart = true;
      }
      var delta = this.getWheelDelta(e);
      this.wheelMoveHandler(delta);
      this.wheelEndDetector(delta);
    };
    MouseWheel2.prototype.wheelStartHandler = function(e) {
      this.cleanCache();
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      scrollBehaviorX.setMovingDirection(
        0
        /* Default */
      );
      scrollBehaviorY.setMovingDirection(
        0
        /* Default */
      );
      scrollBehaviorX.setDirection(
        0
        /* Default */
      );
      scrollBehaviorY.setDirection(
        0
        /* Default */
      );
      this.scroll.trigger(this.scroll.eventTypes.alterOptions, this.mouseWheelOpt);
      this.scroll.trigger(this.scroll.eventTypes.mousewheelStart);
    };
    MouseWheel2.prototype.cleanCache = function() {
      this.deltaCache = [];
    };
    MouseWheel2.prototype.wheelMoveHandler = function(delta) {
      var _this2 = this;
      var _a2 = this.mouseWheelOpt, throttleTime = _a2.throttleTime, dampingFactor = _a2.dampingFactor;
      if (throttleTime && this.wheelMoveTimer) {
        this.deltaCache.push(delta);
      } else {
        var cachedDelta = this.deltaCache.reduce(function(prev, current) {
          return {
            x: prev.x + current.x,
            y: prev.y + current.y
          };
        }, { x: 0, y: 0 });
        this.cleanCache();
        var _b2 = this.scroll.scroller, scrollBehaviorX = _b2.scrollBehaviorX, scrollBehaviorY = _b2.scrollBehaviorY;
        scrollBehaviorX.setMovingDirection(-delta.directionX);
        scrollBehaviorY.setMovingDirection(-delta.directionY);
        scrollBehaviorX.setDirection(delta.x);
        scrollBehaviorY.setDirection(delta.y);
        var newX = scrollBehaviorX.performDampingAlgorithm(Math.round(delta.x) + cachedDelta.x, dampingFactor);
        var newY = scrollBehaviorY.performDampingAlgorithm(Math.round(delta.y) + cachedDelta.x, dampingFactor);
        if (!this.scroll.trigger(this.scroll.eventTypes.mousewheelMove, {
          x: newX,
          y: newY
        })) {
          var easeTime = this.getEaseTime();
          if (newX !== this.scroll.x || newY !== this.scroll.y) {
            this.scroll.scrollTo(newX, newY, easeTime);
          }
        }
        if (throttleTime) {
          this.wheelMoveTimer = window.setTimeout(function() {
            _this2.wheelMoveTimer = 0;
          }, throttleTime);
        }
      }
    };
    MouseWheel2.prototype.wheelEndDetector = function(delta) {
      var _this2 = this;
      window.clearTimeout(this.wheelEndTimer);
      this.wheelEndTimer = window.setTimeout(function() {
        _this2.wheelStart = false;
        window.clearTimeout(_this2.wheelMoveTimer);
        _this2.wheelMoveTimer = 0;
        _this2.scroll.trigger(_this2.scroll.eventTypes.mousewheelEnd, delta);
      }, this.mouseWheelOpt.discreteTime);
    };
    MouseWheel2.prototype.getWheelDelta = function(e) {
      var _a2 = this.mouseWheelOpt, speed = _a2.speed, invert = _a2.invert;
      var wheelDeltaX = 0;
      var wheelDeltaY = 0;
      var direction = invert ? -1 : 1;
      switch (true) {
        case "deltaX" in e:
          if (e.deltaMode === 1) {
            wheelDeltaX = -e.deltaX * speed;
            wheelDeltaY = -e.deltaY * speed;
          } else {
            wheelDeltaX = -e.deltaX;
            wheelDeltaY = -e.deltaY;
          }
          break;
        case "wheelDeltaX" in e:
          wheelDeltaX = e.wheelDeltaX / 120 * speed;
          wheelDeltaY = e.wheelDeltaY / 120 * speed;
          break;
        case "wheelDelta" in e:
          wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * speed;
          break;
        case "detail" in e:
          wheelDeltaX = wheelDeltaY = -e.detail / 3 * speed;
          break;
      }
      wheelDeltaX *= direction;
      wheelDeltaY *= direction;
      if (!this.scroll.hasVerticalScroll) {
        wheelDeltaX = wheelDeltaY;
        wheelDeltaY = 0;
      }
      if (!this.scroll.hasHorizontalScroll) {
        wheelDeltaX = 0;
      }
      var directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;
      var directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;
      return {
        x: wheelDeltaX,
        y: wheelDeltaY,
        directionX,
        directionY
      };
    };
    MouseWheel2.prototype.beforeHandler = function(e) {
      var _a2 = this.scroll.options, preventDefault2 = _a2.preventDefault, stopPropagation3 = _a2.stopPropagation, preventDefaultException = _a2.preventDefaultException;
      if (preventDefault2 && !preventDefaultExceptionFn(e.target, preventDefaultException)) {
        e.preventDefault();
      }
      if (stopPropagation3) {
        e.stopPropagation();
      }
    };
    MouseWheel2.prototype.getEaseTime = function() {
      var SAFE_EASETIME = 100;
      var easeTime = this.mouseWheelOpt.easeTime;
      if (easeTime < SAFE_EASETIME) {
        warn("easeTime should be greater than 100.If mouseWheel easeTime is too small,scrollEnd will be triggered many times.");
      }
      return Math.max(easeTime, SAFE_EASETIME);
    };
    MouseWheel2.prototype.destroy = function() {
      this.eventRegister.destroy();
      window.clearTimeout(this.wheelEndTimer);
      window.clearTimeout(this.wheelMoveTimer);
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        hooks.off(hooksName, handlerFn);
      });
    };
    MouseWheel2.pluginName = "mouseWheel";
    MouseWheel2.applyOrder = "pre";
    return MouseWheel2;
  }()
);
var ObserveDOM = (
  /** @class */
  function() {
    function ObserveDOM2(scroll) {
      this.scroll = scroll;
      this.stopObserver = false;
      this.init();
    }
    ObserveDOM2.prototype.init = function() {
      this.handleMutationObserver();
      this.handleHooks();
    };
    ObserveDOM2.prototype.handleMutationObserver = function() {
      var _this2 = this;
      if (typeof MutationObserver !== "undefined") {
        var timer_1 = 0;
        this.observer = new MutationObserver(function(mutations) {
          _this2.mutationObserverHandler(mutations, timer_1);
        });
        this.startObserve(this.observer);
      } else {
        this.checkDOMUpdate();
      }
    };
    ObserveDOM2.prototype.handleHooks = function() {
      var _this2 = this;
      this.hooksFn = [];
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.contentChanged, function() {
        _this2.stopObserve();
        _this2.handleMutationObserver();
      });
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.enable, function() {
        if (_this2.stopObserver) {
          _this2.handleMutationObserver();
        }
      });
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.disable, function() {
        _this2.stopObserve();
      });
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.destroy, function() {
        _this2.destroy();
      });
    };
    ObserveDOM2.prototype.mutationObserverHandler = function(mutations, timer) {
      var _this2 = this;
      if (this.shouldNotRefresh()) {
        return;
      }
      var immediateRefresh = false;
      var deferredRefresh = false;
      for (var i = 0; i < mutations.length; i++) {
        var mutation = mutations[i];
        if (mutation.type !== "attributes") {
          immediateRefresh = true;
          break;
        } else {
          if (mutation.target !== this.scroll.scroller.content) {
            deferredRefresh = true;
            break;
          }
        }
      }
      if (immediateRefresh) {
        this.scroll.refresh();
      } else if (deferredRefresh) {
        clearTimeout(timer);
        timer = window.setTimeout(function() {
          if (!_this2.shouldNotRefresh()) {
            _this2.scroll.refresh();
          }
        }, 60);
      }
    };
    ObserveDOM2.prototype.startObserve = function(observer) {
      var config = {
        attributes: true,
        childList: true,
        subtree: true
      };
      observer.observe(this.scroll.scroller.content, config);
    };
    ObserveDOM2.prototype.shouldNotRefresh = function() {
      var scroller = this.scroll.scroller;
      var scrollBehaviorX = scroller.scrollBehaviorX, scrollBehaviorY = scroller.scrollBehaviorY;
      var outsideBoundaries = scrollBehaviorX.currentPos > scrollBehaviorX.minScrollPos || scrollBehaviorX.currentPos < scrollBehaviorX.maxScrollPos || scrollBehaviorY.currentPos > scrollBehaviorY.minScrollPos || scrollBehaviorY.currentPos < scrollBehaviorY.maxScrollPos;
      return scroller.animater.pending || outsideBoundaries;
    };
    ObserveDOM2.prototype.checkDOMUpdate = function() {
      var _this2 = this;
      var content = this.scroll.scroller.content;
      var contentRect = getRect(content);
      var oldWidth = contentRect.width;
      var oldHeight = contentRect.height;
      var check = function() {
        if (_this2.stopObserver) {
          return;
        }
        contentRect = getRect(content);
        var newWidth = contentRect.width;
        var newHeight = contentRect.height;
        if (oldWidth !== newWidth || oldHeight !== newHeight) {
          _this2.scroll.refresh();
        }
        oldWidth = newWidth;
        oldHeight = newHeight;
        next();
      };
      var next = function() {
        setTimeout(function() {
          check();
        }, 1e3);
      };
      next();
    };
    ObserveDOM2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    ObserveDOM2.prototype.stopObserve = function() {
      this.stopObserver = true;
      if (this.observer) {
        this.observer.disconnect();
      }
    };
    ObserveDOM2.prototype.destroy = function() {
      this.stopObserve();
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        hooks.off(hooksName, handlerFn);
      });
      this.hooksFn.length = 0;
    };
    ObserveDOM2.pluginName = "observeDOM";
    return ObserveDOM2;
  }()
);
var sourcePrefix = "plugins.pullDownRefresh";
var propertiesMap = [
  {
    key: "finishPullDown",
    name: "finishPullDown"
  },
  {
    key: "openPullDown",
    name: "openPullDown"
  },
  {
    key: "closePullDown",
    name: "closePullDown"
  },
  {
    key: "autoPullDownRefresh",
    name: "autoPullDownRefresh"
  }
];
var propertiesConfig$1 = propertiesMap.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix + "." + item.name
  };
});
var PULL_DOWN_HOOKS_NAME = "pullingDown";
var PullDown = (
  /** @class */
  function() {
    function PullDown2(scroll) {
      this.scroll = scroll;
      this.pulling = false;
      this.init();
    }
    PullDown2.prototype.init = function() {
      this.handleBScroll();
      this.handleOptions(this.scroll.options.pullDownRefresh);
      this.handleHooks();
      this.watch();
    };
    PullDown2.prototype.handleBScroll = function() {
      this.scroll.registerType([PULL_DOWN_HOOKS_NAME]);
      this.scroll.proxy(propertiesConfig$1);
    };
    PullDown2.prototype.handleOptions = function(userOptions) {
      if (userOptions === void 0) {
        userOptions = {};
      }
      userOptions = userOptions === true ? {} : userOptions;
      var defaultOptions = {
        threshold: 90,
        stop: 40
      };
      this.options = extend(defaultOptions, userOptions);
      this.scroll.options.probeType = 3;
    };
    PullDown2.prototype.handleHooks = function() {
      var _this2 = this;
      this.hooksFn = [];
      var scroller = this.scroll.scroller;
      var scrollBehaviorY = scroller.scrollBehaviorY;
      this.currentMinScrollY = this.cachedOriginanMinScrollY = scrollBehaviorY.minScrollPos;
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.contentChanged, function() {
        _this2.finishPullDown();
      });
      this.registerHooks(scrollBehaviorY.hooks, scrollBehaviorY.hooks.eventTypes.computeBoundary, function(boundary) {
        if (boundary.maxScrollPos > 0) {
          boundary.maxScrollPos = -1;
        }
        boundary.minScrollPos = _this2.currentMinScrollY;
      });
      if (this.scroll.eventTypes.alterOptions) {
        this.registerHooks(this.scroll, this.scroll.eventTypes.alterOptions, function(mouseWheelOptions) {
          var SANE_DISCRETE_TIME = 300;
          var SANE_EASE_TIME = 350;
          mouseWheelOptions.discreteTime = SANE_DISCRETE_TIME;
          mouseWheelOptions.easeTime = SANE_EASE_TIME;
        });
        this.registerHooks(this.scroll, this.scroll.eventTypes.mousewheelEnd, function() {
          scroller.hooks.trigger(scroller.hooks.eventTypes.end);
        });
      }
    };
    PullDown2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    PullDown2.prototype.watch = function() {
      var scroller = this.scroll.scroller;
      this.watching = true;
      this.registerHooks(scroller.hooks, scroller.hooks.eventTypes.end, this.checkPullDown);
    };
    PullDown2.prototype.unwatch = function() {
      var scroller = this.scroll.scroller;
      this.watching = false;
      scroller.hooks.off(scroller.hooks.eventTypes.end, this.checkPullDown);
    };
    PullDown2.prototype.checkPullDown = function() {
      var _a2 = this.options, threshold = _a2.threshold, stop = _a2.stop;
      if (this.scroll.y < threshold) {
        return false;
      }
      if (!this.pulling) {
        this.modifyBehaviorYBoundary(stop);
        this.pulling = true;
        this.scroll.trigger(PULL_DOWN_HOOKS_NAME);
      }
      this.scroll.scrollTo(this.scroll.x, stop, this.scroll.options.bounceTime, ease.bounce);
      return this.pulling;
    };
    PullDown2.prototype.modifyBehaviorYBoundary = function(stopDistance) {
      var scrollBehaviorY = this.scroll.scroller.scrollBehaviorY;
      this.cachedOriginanMinScrollY = scrollBehaviorY.minScrollPos;
      this.currentMinScrollY = stopDistance;
      scrollBehaviorY.computeBoundary();
    };
    PullDown2.prototype.finishPullDown = function() {
      if (this.pulling === true) {
        var scrollBehaviorY = this.scroll.scroller.scrollBehaviorY;
        this.currentMinScrollY = this.cachedOriginanMinScrollY;
        scrollBehaviorY.computeBoundary();
        this.pulling = false;
        this.scroll.resetPosition(this.scroll.options.bounceTime, ease.bounce);
      }
    };
    PullDown2.prototype.openPullDown = function(config) {
      if (config === void 0) {
        config = {};
      }
      this.handleOptions(config);
      if (!this.watching) {
        this.watch();
      }
    };
    PullDown2.prototype.closePullDown = function() {
      this.unwatch();
    };
    PullDown2.prototype.autoPullDownRefresh = function() {
      var _a2 = this.options, threshold = _a2.threshold, stop = _a2.stop;
      if (this.pulling || !this.watching) {
        return;
      }
      this.pulling = true;
      this.modifyBehaviorYBoundary(stop);
      this.scroll.scrollTo(this.scroll.x, threshold);
      this.scroll.trigger(PULL_DOWN_HOOKS_NAME);
      this.scroll.scrollTo(this.scroll.x, stop, this.scroll.options.bounceTime, ease.bounce);
    };
    PullDown2.pluginName = "pullDownRefresh";
    return PullDown2;
  }()
);
var sourcePrefix$1 = "plugins.pullUpLoad";
var propertiesMap$1 = [
  {
    key: "finishPullUp",
    name: "finishPullUp"
  },
  {
    key: "openPullUp",
    name: "openPullUp"
  },
  {
    key: "closePullUp",
    name: "closePullUp"
  },
  {
    key: "autoPullUpLoad",
    name: "autoPullUpLoad"
  }
];
var propertiesConfig$2 = propertiesMap$1.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix$1 + "." + item.name
  };
});
var PULL_UP_HOOKS_NAME = "pullingUp";
var PullUp = (
  /** @class */
  function() {
    function PullUp2(scroll) {
      this.scroll = scroll;
      this.pulling = false;
      this.watching = false;
      this.init();
    }
    PullUp2.prototype.init = function() {
      this.handleBScroll();
      this.handleOptions(this.scroll.options.pullUpLoad);
      this.handleHooks();
      this.watch();
    };
    PullUp2.prototype.handleBScroll = function() {
      this.scroll.registerType([PULL_UP_HOOKS_NAME]);
      this.scroll.proxy(propertiesConfig$2);
    };
    PullUp2.prototype.handleOptions = function(userOptions) {
      if (userOptions === void 0) {
        userOptions = {};
      }
      userOptions = userOptions === true ? {} : userOptions;
      var defaultOptions = {
        threshold: 0
      };
      this.options = extend(defaultOptions, userOptions);
      this.scroll.options.probeType = 3;
    };
    PullUp2.prototype.handleHooks = function() {
      var _this2 = this;
      this.hooksFn = [];
      var scrollBehaviorY = this.scroll.scroller.scrollBehaviorY;
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.contentChanged, function() {
        _this2.finishPullUp();
      });
      this.registerHooks(scrollBehaviorY.hooks, scrollBehaviorY.hooks.eventTypes.computeBoundary, function(boundary) {
        if (boundary.maxScrollPos > 0) {
          boundary.maxScrollPos = -1;
        }
      });
    };
    PullUp2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    PullUp2.prototype.watch = function() {
      if (this.watching) {
        return;
      }
      this.watching = true;
      this.registerHooks(this.scroll, this.scroll.eventTypes.scroll, this.checkPullUp);
    };
    PullUp2.prototype.unwatch = function() {
      this.watching = false;
      this.scroll.off(this.scroll.eventTypes.scroll, this.checkPullUp);
    };
    PullUp2.prototype.checkPullUp = function(pos) {
      var _this2 = this;
      var threshold = this.options.threshold;
      if (this.scroll.movingDirectionY === 1 && pos.y <= this.scroll.maxScrollY + threshold) {
        this.pulling = true;
        this.scroll.once(this.scroll.eventTypes.scrollEnd, function() {
          _this2.pulling = false;
        });
        this.unwatch();
        this.scroll.trigger(PULL_UP_HOOKS_NAME);
      }
    };
    PullUp2.prototype.finishPullUp = function() {
      var _this2 = this;
      this.scroll.scroller.scrollBehaviorY.setMovingDirection(
        0
        /* Default */
      );
      if (this.pulling) {
        this.scroll.once(this.scroll.eventTypes.scrollEnd, function() {
          _this2.watch();
        });
      } else {
        this.watch();
      }
    };
    PullUp2.prototype.openPullUp = function(config) {
      if (config === void 0) {
        config = {};
      }
      this.handleOptions(config);
      this.watch();
    };
    PullUp2.prototype.closePullUp = function() {
      this.unwatch();
    };
    PullUp2.prototype.autoPullUpLoad = function() {
      var threshold = this.options.threshold;
      var scrollBehaviorY = this.scroll.scroller.scrollBehaviorY;
      if (this.pulling || !this.watching) {
        return;
      }
      var NEGATIVE_VALUE = -1;
      var outOfBoundaryPos = scrollBehaviorY.maxScrollPos + threshold + NEGATIVE_VALUE;
      this.scroll.scroller.scrollBehaviorY.setMovingDirection(NEGATIVE_VALUE);
      this.scroll.scrollTo(this.scroll.x, outOfBoundaryPos, this.scroll.options.bounceTime);
    };
    PullUp2.pluginName = "pullUpLoad";
    return PullUp2;
  }()
);
var EventHandler = (
  /** @class */
  function() {
    function EventHandler2(indicator, options) {
      this.indicator = indicator;
      this.options = options;
      this.hooks = new EventEmitter(["touchStart", "touchMove", "touchEnd"]);
      this.registerEvents();
    }
    EventHandler2.prototype.registerEvents = function() {
      var _a2 = this.options, disableMouse = _a2.disableMouse, disableTouch = _a2.disableTouch;
      var startEvents = [];
      var moveEvents = [];
      var endEvents = [];
      if (!disableMouse) {
        startEvents.push({
          name: "mousedown",
          handler: this.start.bind(this)
        });
        moveEvents.push({
          name: "mousemove",
          handler: this.move.bind(this)
        });
        endEvents.push({
          name: "mouseup",
          handler: this.end.bind(this)
        });
      }
      if (!disableTouch) {
        startEvents.push({
          name: "touchstart",
          handler: this.start.bind(this)
        });
        moveEvents.push({
          name: "touchmove",
          handler: this.move.bind(this)
        });
        endEvents.push({
          name: "touchend",
          handler: this.end.bind(this)
        }, {
          name: "touchcancel",
          handler: this.end.bind(this)
        });
      }
      this.startEventRegister = new EventRegister(this.indicator.indicatorEl, startEvents);
      this.moveEventRegister = new EventRegister(window, moveEvents);
      this.endEventRegister = new EventRegister(window, endEvents);
    };
    EventHandler2.prototype.BScrollIsDisabled = function() {
      return !this.indicator.scroll.enabled;
    };
    EventHandler2.prototype.start = function(e) {
      if (this.BScrollIsDisabled()) {
        return;
      }
      var point = e.touches ? e.touches[0] : e;
      e.preventDefault();
      e.stopPropagation();
      this.initiated = true;
      this.lastPoint = point[this.indicator.keysMap.point];
      this.hooks.trigger(this.hooks.eventTypes.touchStart);
    };
    EventHandler2.prototype.move = function(e) {
      if (!this.initiated) {
        return;
      }
      var point = e.touches ? e.touches[0] : e;
      var pointPos = point[this.indicator.keysMap.point];
      e.preventDefault();
      e.stopPropagation();
      var delta = pointPos - this.lastPoint;
      this.lastPoint = pointPos;
      this.hooks.trigger(this.hooks.eventTypes.touchMove, delta);
    };
    EventHandler2.prototype.end = function(e) {
      if (!this.initiated) {
        return;
      }
      this.initiated = false;
      e.preventDefault();
      e.stopPropagation();
      this.hooks.trigger(this.hooks.eventTypes.touchEnd);
    };
    EventHandler2.prototype.destroy = function() {
      this.startEventRegister.destroy();
      this.moveEventRegister.destroy();
      this.endEventRegister.destroy();
    };
    return EventHandler2;
  }()
);
var Indicator = (
  /** @class */
  function() {
    function Indicator2(scroll, options) {
      this.scroll = scroll;
      this.options = options;
      this.hooksFn = [];
      this.wrapper = options.wrapper;
      this.direction = options.direction;
      this.indicatorEl = this.wrapper.children[0];
      this.keysMap = this.getKeysMap();
      this.handleFade();
      this.handleHooks();
    }
    Indicator2.prototype.handleFade = function() {
      if (this.options.fade) {
        this.wrapper.style.opacity = "0";
      }
    };
    Indicator2.prototype.handleHooks = function() {
      var _this2 = this;
      var _a2 = this.options, fade = _a2.fade, interactive = _a2.interactive, scrollbarTrackClickable = _a2.scrollbarTrackClickable;
      var scroll = this.scroll;
      var scrollHooks = scroll.hooks;
      var translaterHooks = scroll.scroller.translater.hooks;
      var animaterHooks = scroll.scroller.animater.hooks;
      this.registerHooks(scrollHooks, scrollHooks.eventTypes.refresh, this.refresh);
      this.registerHooks(translaterHooks, translaterHooks.eventTypes.translate, function(pos) {
        var hasScrollKey = _this2.keysMap.hasScroll;
        if (_this2.scroll[hasScrollKey]) {
          _this2.updatePosition(pos);
        }
      });
      this.registerHooks(animaterHooks, animaterHooks.eventTypes.time, this.transitionTime);
      this.registerHooks(animaterHooks, animaterHooks.eventTypes.timeFunction, this.transitionTimingFunction);
      if (fade) {
        this.registerHooks(scroll, scroll.eventTypes.scrollEnd, function() {
          _this2.fade();
        });
        this.registerHooks(scroll, scroll.eventTypes.scrollStart, function() {
          _this2.fade(true);
        });
        if (scroll.eventTypes.mousewheelStart && scroll.eventTypes.mousewheelEnd) {
          this.registerHooks(scroll, scroll.eventTypes.mousewheelStart, function() {
            _this2.fade(true);
          });
          this.registerHooks(scroll, scroll.eventTypes.mousewheelMove, function() {
            _this2.fade(true);
          });
          this.registerHooks(scroll, scroll.eventTypes.mousewheelEnd, function() {
            _this2.fade();
          });
        }
      }
      if (interactive) {
        var _b2 = this.scroll.options, disableMouse = _b2.disableMouse, disableTouch = _b2.disableTouch;
        this.eventHandler = new EventHandler(this, {
          disableMouse,
          disableTouch
        });
        var eventHandlerHooks = this.eventHandler.hooks;
        this.registerHooks(eventHandlerHooks, eventHandlerHooks.eventTypes.touchStart, this.startHandler);
        this.registerHooks(eventHandlerHooks, eventHandlerHooks.eventTypes.touchMove, this.moveHandler);
        this.registerHooks(eventHandlerHooks, eventHandlerHooks.eventTypes.touchEnd, this.endHandler);
      }
      if (scrollbarTrackClickable) {
        this.bindClick();
      }
    };
    Indicator2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    Indicator2.prototype.bindClick = function() {
      var wrapper = this.wrapper;
      this.clickEventRegister = new EventRegister(wrapper, [
        {
          name: "click",
          handler: this.handleClick.bind(this)
        }
      ]);
    };
    Indicator2.prototype.handleClick = function(e) {
      var newPos = this.calculateclickOffsetPos(e);
      var _a2 = this.scroll, x = _a2.x, y = _a2.y;
      x = this.direction === "horizontal" ? newPos : x;
      y = this.direction === "vertical" ? newPos : y;
      this.scroll.scrollTo(x, y, this.options.scrollbarTrackOffsetTime);
    };
    Indicator2.prototype.calculateclickOffsetPos = function(e) {
      var _a2 = this.keysMap, poinKey = _a2.point, domRectKey = _a2.domRect;
      var scrollbarTrackOffsetType = this.options.scrollbarTrackOffsetType;
      var clickPointOffset = e[poinKey] - this.wrapperRect[domRectKey];
      var scrollToWhere = clickPointOffset < this.currentPos ? -1 : 1;
      var delta = 0;
      var currentPos = this.currentPos;
      if (scrollbarTrackOffsetType === "step") {
        delta = this.scrollInfo.baseSize * scrollToWhere;
      } else {
        delta = 0;
        currentPos = clickPointOffset;
      }
      return this.newPos(currentPos, delta, this.scrollInfo);
    };
    Indicator2.prototype.getKeysMap = function() {
      if (this.direction === "vertical") {
        return {
          hasScroll: "hasVerticalScroll",
          size: "height",
          wrapperSize: "clientHeight",
          scrollerSize: "scrollerHeight",
          maxScrollPos: "maxScrollY",
          pos: "y",
          point: "pageY",
          translateProperty: "translateY",
          domRect: "top"
        };
      }
      return {
        hasScroll: "hasHorizontalScroll",
        size: "width",
        wrapperSize: "clientWidth",
        scrollerSize: "scrollerWidth",
        maxScrollPos: "maxScrollX",
        pos: "x",
        point: "pageX",
        translateProperty: "translateX",
        domRect: "left"
      };
    };
    Indicator2.prototype.fade = function(visible) {
      var time = visible ? 250 : 500;
      var wrapper = this.wrapper;
      wrapper.style[style.transitionDuration] = time + "ms";
      wrapper.style.opacity = visible ? "1" : "0";
    };
    Indicator2.prototype.refresh = function() {
      var hasScrollKey = this.keysMap.hasScroll;
      var scroll = this.scroll;
      var x = scroll.x, y = scroll.y;
      this.wrapperRect = this.wrapper.getBoundingClientRect();
      if (this.canScroll(scroll[hasScrollKey])) {
        var _a2 = this.keysMap, wrapperSizeKey = _a2.wrapperSize, scrollerSizeKey = _a2.scrollerSize, maxScrollPosKey = _a2.maxScrollPos;
        this.scrollInfo = this.refreshScrollInfo(this.wrapper[wrapperSizeKey], scroll[scrollerSizeKey], scroll[maxScrollPosKey], this.indicatorEl[wrapperSizeKey]);
        this.updatePosition({
          x,
          y
        });
      }
    };
    Indicator2.prototype.transitionTime = function(time) {
      if (time === void 0) {
        time = 0;
      }
      this.indicatorEl.style[style.transitionDuration] = time + "ms";
    };
    Indicator2.prototype.transitionTimingFunction = function(easing) {
      this.indicatorEl.style[style.transitionTimingFunction] = easing;
    };
    Indicator2.prototype.canScroll = function(hasScroll) {
      this.wrapper.style.display = hasScroll ? "block" : "none";
      return hasScroll;
    };
    Indicator2.prototype.refreshScrollInfo = function(wrapperSize, scrollerSize, maxScrollPos, indicatorElSize) {
      var baseSize = Math.max(Math.round(wrapperSize * wrapperSize / (scrollerSize || wrapperSize || 1)), this.options.minSize);
      if (this.options.isCustom) {
        baseSize = indicatorElSize;
      }
      var maxIndicatorScrollPos = wrapperSize - baseSize;
      var sizeRatio = maxIndicatorScrollPos / maxScrollPos;
      return {
        baseSize,
        maxScrollPos: maxIndicatorScrollPos,
        minScrollPos: 0,
        sizeRatio
      };
    };
    Indicator2.prototype.updatePosition = function(point) {
      var _a2 = this.caculatePosAndSize(point, this.scrollInfo), pos = _a2.pos, size = _a2.size;
      this.refreshStyle(size, pos);
      this.currentPos = pos;
    };
    Indicator2.prototype.caculatePosAndSize = function(point, scrollInfo) {
      var posKey = this.keysMap.pos;
      var sizeRatio = scrollInfo.sizeRatio, baseSize = scrollInfo.baseSize, maxScrollPos = scrollInfo.maxScrollPos, minScrollPos = scrollInfo.minScrollPos;
      var minSize = this.options.minSize;
      var pos = Math.round(sizeRatio * point[posKey]);
      var size;
      if (pos < minScrollPos) {
        size = Math.max(baseSize + pos * 3, minSize);
        pos = minScrollPos;
      } else if (pos > maxScrollPos) {
        size = Math.max(baseSize - (pos - maxScrollPos) * 3, minSize);
        pos = maxScrollPos + baseSize - size;
      } else {
        size = baseSize;
      }
      return {
        pos,
        size
      };
    };
    Indicator2.prototype.refreshStyle = function(size, pos) {
      var _a2 = this.keysMap, translatePropertyKey = _a2.translateProperty, sizeKey = _a2.size;
      var translateZ = this.scroll.options.translateZ;
      this.indicatorEl.style[sizeKey] = size + "px";
      this.indicatorEl.style[style.transform] = translatePropertyKey + "(" + pos + "px)" + translateZ;
    };
    Indicator2.prototype.startHandler = function() {
      this.moved = false;
      this.startTime = getNow();
      this.transitionTime();
      this.scroll.scroller.hooks.trigger(this.scroll.scroller.hooks.eventTypes.beforeScrollStart);
    };
    Indicator2.prototype.moveHandler = function(delta) {
      if (!this.moved && !this.indicatorNotMoved(delta)) {
        this.moved = true;
        this.scroll.scroller.hooks.trigger(this.scroll.scroller.hooks.eventTypes.scrollStart);
      }
      if (this.moved) {
        var newPos = this.newPos(this.currentPos, delta, this.scrollInfo);
        this.syncBScroll(newPos);
      }
    };
    Indicator2.prototype.endHandler = function() {
      if (this.moved) {
        var _a2 = this.scroll, x = _a2.x, y = _a2.y;
        this.scroll.scroller.hooks.trigger(this.scroll.scroller.hooks.eventTypes.scrollEnd, {
          x,
          y
        });
      }
    };
    Indicator2.prototype.indicatorNotMoved = function(delta) {
      var currentPos = this.currentPos;
      var _a2 = this.scrollInfo, maxScrollPos = _a2.maxScrollPos, minScrollPos = _a2.minScrollPos;
      var notMoved = currentPos === minScrollPos && delta <= 0 || currentPos === maxScrollPos && delta >= 0;
      return notMoved;
    };
    Indicator2.prototype.syncBScroll = function(newPos) {
      var timestamp = getNow();
      var _a2 = this.scroll, x = _a2.x, y = _a2.y, options = _a2.options, scroller = _a2.scroller, maxScrollY = _a2.maxScrollY, minScrollY = _a2.minScrollY, maxScrollX = _a2.maxScrollX, minScrollX = _a2.minScrollX;
      var probeType = options.probeType, momentumLimitTime = options.momentumLimitTime;
      var position = { x, y };
      if (this.direction === "vertical") {
        position.y = between(newPos, maxScrollY, minScrollY);
      } else {
        position.x = between(newPos, maxScrollX, minScrollX);
      }
      scroller.translater.translate(position);
      if (timestamp - this.startTime > momentumLimitTime) {
        this.startTime = timestamp;
        if (probeType === 1) {
          scroller.hooks.trigger(scroller.hooks.eventTypes.scroll, position);
        }
      }
      if (probeType > 1) {
        scroller.hooks.trigger(scroller.hooks.eventTypes.scroll, position);
      }
    };
    Indicator2.prototype.newPos = function(currentPos, delta, scrollInfo) {
      var maxScrollPos = scrollInfo.maxScrollPos, sizeRatio = scrollInfo.sizeRatio, minScrollPos = scrollInfo.minScrollPos;
      var newPos = currentPos + delta;
      newPos = between(newPos, minScrollPos, maxScrollPos);
      return Math.round(newPos / sizeRatio);
    };
    Indicator2.prototype.destroy = function() {
      var _a2 = this.options, interactive = _a2.interactive, scrollbarTrackClickable = _a2.scrollbarTrackClickable, isCustom = _a2.isCustom;
      if (interactive) {
        this.eventHandler.destroy();
      }
      if (scrollbarTrackClickable) {
        this.clickEventRegister.destroy();
      }
      if (!isCustom) {
        this.wrapper.parentNode.removeChild(this.wrapper);
      }
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        hooks.off(hooksName, handlerFn);
      });
      this.hooksFn.length = 0;
    };
    return Indicator2;
  }()
);
var ScrollBar = (
  /** @class */
  function() {
    function ScrollBar2(scroll) {
      this.scroll = scroll;
      this.handleOptions();
      this.createIndicators();
      this.handleHooks();
    }
    ScrollBar2.prototype.handleHooks = function() {
      var _this2 = this;
      var scroll = this.scroll;
      scroll.hooks.on(scroll.hooks.eventTypes.destroy, function() {
        for (var _i = 0, _a2 = _this2.indicators; _i < _a2.length; _i++) {
          var indicator = _a2[_i];
          indicator.destroy();
        }
      });
    };
    ScrollBar2.prototype.handleOptions = function() {
      var userOptions = this.scroll.options.scrollbar === true ? {} : this.scroll.options.scrollbar;
      var defaultOptions = {
        fade: true,
        interactive: false,
        customElements: [],
        minSize: 8,
        scrollbarTrackClickable: false,
        scrollbarTrackOffsetType: "step",
        scrollbarTrackOffsetTime: 300
      };
      this.options = extend(defaultOptions, userOptions);
    };
    ScrollBar2.prototype.createIndicators = function() {
      var indicatorOptions;
      var scroll = this.scroll;
      var indicators = [];
      var scrollDirectionConfigKeys = ["scrollX", "scrollY"];
      var indicatorDirections = [
        "horizontal",
        "vertical"
      ];
      var customScrollbarEls = this.options.customElements;
      for (var i = 0; i < scrollDirectionConfigKeys.length; i++) {
        var key = scrollDirectionConfigKeys[i];
        if (scroll.options[key]) {
          var customElement = customScrollbarEls.shift();
          var direction = indicatorDirections[i];
          var isCustom = false;
          var scrollbarWrapper = customElement ? customElement : this.createScrollbarElement(direction);
          if (scrollbarWrapper !== customElement) {
            scroll.wrapper.append(scrollbarWrapper);
          } else {
            isCustom = true;
          }
          indicatorOptions = __assign(__assign({ wrapper: scrollbarWrapper, direction }, this.options), { isCustom });
          indicators.push(new Indicator(scroll, indicatorOptions));
        }
      }
      this.indicators = indicators;
    };
    ScrollBar2.prototype.createScrollbarElement = function(direction, scrollbarTrackClickable) {
      if (scrollbarTrackClickable === void 0) {
        scrollbarTrackClickable = this.options.scrollbarTrackClickable;
      }
      var scrollbarWrapperEl = document.createElement("div");
      var scrollbarIndicatorEl = document.createElement("div");
      scrollbarWrapperEl.style.cssText = "position:absolute;z-index:9999;overflow:hidden;";
      scrollbarIndicatorEl.style.cssText = "box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px;";
      scrollbarIndicatorEl.className = "bscroll-indicator";
      if (direction === "horizontal") {
        scrollbarWrapperEl.style.cssText += "height:7px;left:2px;right:2px;bottom:0;";
        scrollbarIndicatorEl.style.height = "100%";
        scrollbarWrapperEl.className = "bscroll-horizontal-scrollbar";
      } else {
        scrollbarWrapperEl.style.cssText += "width:7px;bottom:2px;top:2px;right:1px;";
        scrollbarIndicatorEl.style.width = "100%";
        scrollbarWrapperEl.className = "bscroll-vertical-scrollbar";
      }
      if (!scrollbarTrackClickable) {
        scrollbarWrapperEl.style.cssText += "pointer-events:none;";
      }
      scrollbarWrapperEl.appendChild(scrollbarIndicatorEl);
      return scrollbarWrapperEl;
    };
    ScrollBar2.pluginName = "scrollbar";
    return ScrollBar2;
  }()
);
var PagesMatrix = (
  /** @class */
  function() {
    function PagesMatrix2(scroll) {
      this.scroll = scroll;
      this.init();
    }
    PagesMatrix2.prototype.init = function() {
      var scroller = this.scroll.scroller;
      var scrollBehaviorX = scroller.scrollBehaviorX, scrollBehaviorY = scroller.scrollBehaviorY;
      this.wrapperWidth = scrollBehaviorX.wrapperSize;
      this.wrapperHeight = scrollBehaviorY.wrapperSize;
      this.scrollerHeight = scrollBehaviorY.contentSize;
      this.scrollerWidth = scrollBehaviorX.contentSize;
      this.pages = this.buildPagesMatrix(this.wrapperWidth, this.wrapperHeight);
      this.pageLengthOfX = this.pages ? this.pages.length : 0;
      this.pageLengthOfY = this.pages && this.pages[0] ? this.pages[0].length : 0;
    };
    PagesMatrix2.prototype.getPageStats = function(pageX, pageY) {
      return this.pages[pageX][pageY];
    };
    PagesMatrix2.prototype.getNearestPageIndex = function(x, y) {
      var pageX = 0;
      var pageY = 0;
      var l = this.pages.length;
      for (; pageX < l - 1; pageX++) {
        if (x >= this.pages[pageX][0].cx) {
          break;
        }
      }
      l = this.pages[pageX].length;
      for (; pageY < l - 1; pageY++) {
        if (y >= this.pages[0][pageY].cy) {
          break;
        }
      }
      return {
        pageX,
        pageY
      };
    };
    PagesMatrix2.prototype.buildPagesMatrix = function(stepX, stepY) {
      var pages = [];
      var x = 0;
      var y;
      var cx;
      var cy;
      var i = 0;
      var l;
      var maxScrollPosX = this.scroll.scroller.scrollBehaviorX.maxScrollPos;
      var maxScrollPosY = this.scroll.scroller.scrollBehaviorY.maxScrollPos;
      cx = Math.round(stepX / 2);
      cy = Math.round(stepY / 2);
      while (x > -this.scrollerWidth) {
        pages[i] = [];
        l = 0;
        y = 0;
        while (y > -this.scrollerHeight) {
          pages[i][l] = {
            x: Math.max(x, maxScrollPosX),
            y: Math.max(y, maxScrollPosY),
            width: stepX,
            height: stepY,
            cx: x - cx,
            cy: y - cy
          };
          y -= stepY;
          l++;
        }
        x -= stepX;
        i++;
      }
      return pages;
    };
    return PagesMatrix2;
  }()
);
var BASE_PAGE = {
  pageX: 0,
  pageY: 0,
  x: 0,
  y: 0
};
var SlidePages = (
  /** @class */
  function() {
    function SlidePages2(scroll, slideOptions) {
      this.scroll = scroll;
      this.slideOptions = slideOptions;
      this.slideX = false;
      this.slideY = false;
      this.currentPage = extend({}, BASE_PAGE);
    }
    SlidePages2.prototype.refresh = function() {
      this.pagesMatrix = new PagesMatrix(this.scroll);
      this.checkSlideLoop();
      this.currentPage = this.getAdjustedCurrentPage();
    };
    SlidePages2.prototype.getAdjustedCurrentPage = function() {
      var _a2 = this.currentPage, pageX = _a2.pageX, pageY = _a2.pageY;
      pageX = Math.min(pageX, this.pagesMatrix.pageLengthOfX - 1);
      pageY = Math.min(pageY, this.pagesMatrix.pageLengthOfY - 1);
      if (this.loopX) {
        pageX = Math.min(pageX, this.pagesMatrix.pageLengthOfX - 2);
      }
      if (this.loopY) {
        pageY = Math.min(pageY, this.pagesMatrix.pageLengthOfY - 2);
      }
      var _b2 = this.pagesMatrix.getPageStats(pageX, pageY), x = _b2.x, y = _b2.y;
      return { pageX, pageY, x, y };
    };
    SlidePages2.prototype.setCurrentPage = function(newPage) {
      this.currentPage = newPage;
    };
    SlidePages2.prototype.getInternalPage = function(pageX, pageY) {
      if (pageX >= this.pagesMatrix.pageLengthOfX) {
        pageX = this.pagesMatrix.pageLengthOfX - 1;
      } else if (pageX < 0) {
        pageX = 0;
      }
      if (pageY >= this.pagesMatrix.pageLengthOfY) {
        pageY = this.pagesMatrix.pageLengthOfY - 1;
      } else if (pageY < 0) {
        pageY = 0;
      }
      var _a2 = this.pagesMatrix.getPageStats(pageX, pageY), x = _a2.x, y = _a2.y;
      return {
        pageX,
        pageY,
        x,
        y
      };
    };
    SlidePages2.prototype.getInitialPage = function(resetInitPage) {
      if (resetInitPage === void 0) {
        resetInitPage = false;
      }
      var initialPageX = this.loopX ? 1 : 0;
      var initialPageY = this.loopY ? 1 : 0;
      var pageX = resetInitPage ? initialPageX : this.currentPage.pageX;
      var pageY = resetInitPage ? initialPageY : this.currentPage.pageY;
      var _a2 = this.pagesMatrix.getPageStats(pageX, pageY), x = _a2.x, y = _a2.y;
      return {
        pageX,
        pageY,
        x,
        y
      };
    };
    SlidePages2.prototype.getExposedPage = function(page) {
      var exposedPage = extend({}, page);
      if (this.loopX) {
        exposedPage.pageX = this.fixedPage(exposedPage.pageX, this.pagesMatrix.pageLengthOfX - 2);
      }
      if (this.loopY) {
        exposedPage.pageY = this.fixedPage(exposedPage.pageY, this.pagesMatrix.pageLengthOfY - 2);
      }
      return exposedPage;
    };
    SlidePages2.prototype.getExposedPageByPageIndex = function(pageIndexX, pageIndexY) {
      var page = {
        pageX: pageIndexX,
        pageY: pageIndexY
      };
      if (this.loopX) {
        page.pageX = pageIndexX + 1;
      }
      if (this.loopY) {
        page.pageY = pageIndexY + 1;
      }
      var _a2 = this.pagesMatrix.getPageStats(page.pageX, page.pageY), x = _a2.x, y = _a2.y;
      return {
        x,
        y,
        pageX: pageIndexX,
        pageY: pageIndexY
      };
    };
    SlidePages2.prototype.getWillChangedPage = function(page) {
      page = extend({}, page);
      if (this.loopX) {
        page.pageX = this.fixedPage(page.pageX, this.pagesMatrix.pageLengthOfX - 2);
        page.x = this.pagesMatrix.getPageStats(page.pageX + 1, 0).x;
      }
      if (this.loopY) {
        page.pageY = this.fixedPage(page.pageY, this.pagesMatrix.pageLengthOfY - 2);
        page.y = this.pagesMatrix.getPageStats(0, page.pageY + 1).y;
      }
      return page;
    };
    SlidePages2.prototype.fixedPage = function(page, realPageLen) {
      var pageIndex = [];
      for (var i = 0; i < realPageLen; i++) {
        pageIndex.push(i);
      }
      pageIndex.unshift(realPageLen - 1);
      pageIndex.push(0);
      return pageIndex[page];
    };
    SlidePages2.prototype.getPageStats = function() {
      return this.pagesMatrix.getPageStats(this.currentPage.pageX, this.currentPage.pageY);
    };
    SlidePages2.prototype.getValidPageIndex = function(x, y) {
      var lastX = this.pagesMatrix.pageLengthOfX - 1;
      var lastY = this.pagesMatrix.pageLengthOfY - 1;
      var firstX = 0;
      var firstY = 0;
      if (this.loopX) {
        x += 1;
        firstX = firstX + 1;
        lastX = lastX - 1;
      }
      if (this.loopY) {
        y += 1;
        firstY = firstY + 1;
        lastY = lastY - 1;
      }
      x = between(x, firstX, lastX);
      y = between(y, firstY, lastY);
      return {
        pageX: x,
        pageY: y
      };
    };
    SlidePages2.prototype.nextPageIndex = function() {
      return this.getPageIndexByDirection(
        "positive"
        /* Positive */
      );
    };
    SlidePages2.prototype.prevPageIndex = function() {
      return this.getPageIndexByDirection(
        "negative"
        /* Negative */
      );
    };
    SlidePages2.prototype.getNearestPage = function(x, y) {
      var pageIndex = this.pagesMatrix.getNearestPageIndex(x, y);
      var pageX = pageIndex.pageX, pageY = pageIndex.pageY;
      var newX = this.pagesMatrix.getPageStats(pageX, 0).x;
      var newY = this.pagesMatrix.getPageStats(0, pageY).y;
      return {
        x: newX,
        y: newY,
        pageX,
        pageY
      };
    };
    SlidePages2.prototype.getPageByDirection = function(page, directionX, directionY) {
      var pageX = page.pageX, pageY = page.pageY;
      if (pageX === this.currentPage.pageX) {
        pageX = between(pageX + directionX, 0, this.pagesMatrix.pageLengthOfX - 1);
      }
      if (pageY === this.currentPage.pageY) {
        pageY = between(pageY + directionY, 0, this.pagesMatrix.pageLengthOfY - 1);
      }
      var x = this.pagesMatrix.getPageStats(pageX, 0).x;
      var y = this.pagesMatrix.getPageStats(0, pageY).y;
      return {
        x,
        y,
        pageX,
        pageY
      };
    };
    SlidePages2.prototype.resetLoopPage = function() {
      if (this.loopX) {
        if (this.currentPage.pageX === 0) {
          return {
            pageX: this.pagesMatrix.pageLengthOfX - 2,
            pageY: this.currentPage.pageY
          };
        }
        if (this.currentPage.pageX === this.pagesMatrix.pageLengthOfX - 1) {
          return {
            pageX: 1,
            pageY: this.currentPage.pageY
          };
        }
      }
      if (this.loopY) {
        if (this.currentPage.pageY === 0) {
          return {
            pageX: this.currentPage.pageX,
            pageY: this.pagesMatrix.pageLengthOfY - 2
          };
        }
        if (this.currentPage.pageY === this.pagesMatrix.pageLengthOfY - 1) {
          return {
            pageX: this.currentPage.pageX,
            pageY: 1
          };
        }
      }
    };
    SlidePages2.prototype.getPageIndexByDirection = function(direction) {
      var x = this.currentPage.pageX;
      var y = this.currentPage.pageY;
      if (this.slideX) {
        x = direction === "negative" ? x - 1 : x + 1;
      }
      if (this.slideY) {
        y = direction === "negative" ? y - 1 : y + 1;
      }
      return {
        pageX: x,
        pageY: y
      };
    };
    SlidePages2.prototype.checkSlideLoop = function() {
      this.wannaLoop = this.slideOptions.loop;
      if (this.pagesMatrix.pageLengthOfX > 1) {
        this.slideX = true;
      } else {
        this.slideX = false;
      }
      if (this.pagesMatrix.pages[0] && this.pagesMatrix.pageLengthOfY > 1) {
        this.slideY = true;
      } else {
        this.slideY = false;
      }
      this.loopX = this.wannaLoop && this.slideX;
      this.loopY = this.wannaLoop && this.slideY;
      if (this.slideX && this.slideY) {
        warn("slide does not support two direction at the same time.");
      }
    };
    return SlidePages2;
  }()
);
var sourcePrefix$2 = "plugins.slide";
var propertiesMap$2 = [
  {
    key: "next",
    name: "next"
  },
  {
    key: "prev",
    name: "prev"
  },
  {
    key: "goToPage",
    name: "goToPage"
  },
  {
    key: "getCurrentPage",
    name: "getCurrentPage"
  },
  {
    key: "startPlay",
    name: "startPlay"
  },
  {
    key: "pausePlay",
    name: "pausePlay"
  }
];
var propertiesConfig$3 = propertiesMap$2.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix$2 + "." + item.name
  };
});
var samePage = function(p1, p2) {
  return p1.pageX === p2.pageX && p1.pageY === p2.pageY;
};
var Slide = (
  /** @class */
  function() {
    function Slide2(scroll) {
      this.scroll = scroll;
      this.cachedClonedPageDOM = [];
      this.resetLooping = false;
      this.autoplayTimer = 0;
      if (!this.satisfyInitialization()) {
        return;
      }
      this.init();
    }
    Slide2.prototype.satisfyInitialization = function() {
      if (this.scroll.scroller.content.children.length <= 0) {
        warn("slide need at least one slide page to be initialised.please check your DOM layout.");
        return false;
      }
      return true;
    };
    Slide2.prototype.init = function() {
      this.willChangeToPage = extend({}, BASE_PAGE);
      this.handleBScroll();
      this.handleOptions();
      this.handleHooks();
      this.createPages();
    };
    Slide2.prototype.createPages = function() {
      this.pages = new SlidePages(this.scroll, this.options);
    };
    Slide2.prototype.handleBScroll = function() {
      this.scroll.registerType(["slideWillChange", "slidePageChanged"]);
      this.scroll.proxy(propertiesConfig$3);
    };
    Slide2.prototype.handleOptions = function() {
      var userOptions = this.scroll.options.slide === true ? {} : this.scroll.options.slide;
      var defaultOptions = {
        loop: true,
        threshold: 0.1,
        speed: 400,
        easing: ease.bounce,
        listenFlick: true,
        autoplay: true,
        interval: 3e3
      };
      this.options = extend(defaultOptions, userOptions);
    };
    Slide2.prototype.handleLoop = function(prevSlideContent) {
      var loop = this.options.loop;
      var slideContent = this.scroll.scroller.content;
      var currentSlidePagesLength = slideContent.children.length;
      if (loop) {
        if (slideContent !== prevSlideContent) {
          this.resetLoopChangedStatus();
          this.removeClonedSlidePage(prevSlideContent);
          currentSlidePagesLength > 1 && this.cloneFirstAndLastSlidePage(slideContent);
        } else {
          if (currentSlidePagesLength === 3 && this.initialised) {
            this.removeClonedSlidePage(slideContent);
            this.moreToOnePageInLoop = true;
            this.oneToMorePagesInLoop = false;
          } else if (currentSlidePagesLength > 1) {
            if (this.initialised && this.cachedClonedPageDOM.length === 0) {
              this.oneToMorePagesInLoop = true;
              this.moreToOnePageInLoop = false;
            } else {
              this.removeClonedSlidePage(slideContent);
              this.resetLoopChangedStatus();
            }
            this.cloneFirstAndLastSlidePage(slideContent);
          } else {
            this.resetLoopChangedStatus();
          }
        }
      }
    };
    Slide2.prototype.resetLoopChangedStatus = function() {
      this.moreToOnePageInLoop = false;
      this.oneToMorePagesInLoop = false;
    };
    Slide2.prototype.handleHooks = function() {
      var _this2 = this;
      var scrollHooks = this.scroll.hooks;
      var scrollerHooks = this.scroll.scroller.hooks;
      var listenFlick = this.options.listenFlick;
      this.prevContent = this.scroll.scroller.content;
      this.hooksFn = [];
      this.registerHooks(this.scroll, this.scroll.eventTypes.beforeScrollStart, this.pausePlay);
      this.registerHooks(this.scroll, this.scroll.eventTypes.scrollEnd, this.modifyCurrentPage);
      this.registerHooks(this.scroll, this.scroll.eventTypes.scrollEnd, this.startPlay);
      if (this.scroll.eventTypes.mousewheelMove) {
        this.registerHooks(this.scroll, this.scroll.eventTypes.mousewheelMove, function() {
          return true;
        });
        this.registerHooks(this.scroll, this.scroll.eventTypes.mousewheelEnd, function(delta) {
          if (delta.directionX === 1 || delta.directionY === 1) {
            _this2.next();
          }
          if (delta.directionX === -1 || delta.directionY === -1) {
            _this2.prev();
          }
        });
      }
      this.registerHooks(scrollHooks, scrollHooks.eventTypes.refresh, this.refreshHandler);
      this.registerHooks(scrollHooks, scrollHooks.eventTypes.destroy, this.destroy);
      this.registerHooks(scrollerHooks, scrollerHooks.eventTypes.beforeRefresh, function() {
        _this2.handleLoop(_this2.prevContent);
        _this2.setSlideInlineStyle();
      });
      this.registerHooks(scrollerHooks, scrollerHooks.eventTypes.momentum, this.modifyScrollMetaHandler);
      this.registerHooks(scrollerHooks, scrollerHooks.eventTypes.scroll, this.scrollHandler);
      this.registerHooks(scrollerHooks, scrollerHooks.eventTypes.checkClick, this.startPlay);
      if (listenFlick) {
        this.registerHooks(scrollerHooks, scrollerHooks.eventTypes.flick, this.flickHandler);
      }
    };
    Slide2.prototype.startPlay = function() {
      var _this2 = this;
      var _a2 = this.options, interval = _a2.interval, autoplay = _a2.autoplay;
      if (autoplay) {
        clearTimeout(this.autoplayTimer);
        this.autoplayTimer = window.setTimeout(function() {
          _this2.next();
        }, interval);
      }
    };
    Slide2.prototype.pausePlay = function() {
      if (this.options.autoplay) {
        clearTimeout(this.autoplayTimer);
      }
    };
    Slide2.prototype.setSlideInlineStyle = function() {
      var styleConfigurations = [
        {
          direction: "scrollX",
          sizeType: "offsetWidth",
          styleType: "width"
        },
        {
          direction: "scrollY",
          sizeType: "offsetHeight",
          styleType: "height"
        }
      ];
      var _a2 = this.scroll.scroller, slideContent = _a2.content, slideWrapper = _a2.wrapper;
      var scrollOptions = this.scroll.options;
      styleConfigurations.forEach(function(_a3) {
        var direction = _a3.direction, sizeType = _a3.sizeType, styleType = _a3.styleType;
        if (scrollOptions[direction]) {
          var size = slideWrapper[sizeType];
          var children = slideContent.children;
          var length_1 = children.length;
          for (var i = 0; i < length_1; i++) {
            var slidePageDOM = children[i];
            slidePageDOM.style[styleType] = size + "px";
          }
          slideContent.style[styleType] = size * length_1 + "px";
        }
      });
    };
    Slide2.prototype.next = function(time, easing) {
      var _a2 = this.pages.nextPageIndex(), pageX = _a2.pageX, pageY = _a2.pageY;
      this.goTo(pageX, pageY, time, easing);
    };
    Slide2.prototype.prev = function(time, easing) {
      var _a2 = this.pages.prevPageIndex(), pageX = _a2.pageX, pageY = _a2.pageY;
      this.goTo(pageX, pageY, time, easing);
    };
    Slide2.prototype.goToPage = function(pageX, pageY, time, easing) {
      var pageIndex = this.pages.getValidPageIndex(pageX, pageY);
      this.goTo(pageIndex.pageX, pageIndex.pageY, time, easing);
    };
    Slide2.prototype.getCurrentPage = function() {
      return this.exposedPage || this.pages.getInitialPage(true);
    };
    Slide2.prototype.setCurrentPage = function(page) {
      this.pages.setCurrentPage(page);
      this.exposedPage = this.pages.getExposedPage(page);
    };
    Slide2.prototype.nearestPage = function(x, y) {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      var maxScrollPosX = scrollBehaviorX.maxScrollPos, minScrollPosX = scrollBehaviorX.minScrollPos;
      var maxScrollPosY = scrollBehaviorY.maxScrollPos, minScrollPosY = scrollBehaviorY.minScrollPos;
      return this.pages.getNearestPage(between(x, maxScrollPosX, minScrollPosX), between(y, maxScrollPosY, minScrollPosY));
    };
    Slide2.prototype.satisfyThreshold = function(x, y) {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      var satisfied = true;
      if (Math.abs(x - scrollBehaviorX.absStartPos) <= this.thresholdX && Math.abs(y - scrollBehaviorY.absStartPos) <= this.thresholdY) {
        satisfied = false;
      }
      return satisfied;
    };
    Slide2.prototype.refreshHandler = function(content) {
      var _this2 = this;
      if (!this.satisfyInitialization()) {
        return;
      }
      this.pages.refresh();
      this.computeThreshold();
      var contentChanged = this.contentChanged = this.prevContent !== content;
      if (contentChanged) {
        this.prevContent = content;
      }
      var initPage = this.pages.getInitialPage(!this.initialised || contentChanged || this.oneToMorePagesInLoop || this.moreToOnePageInLoop);
      if (this.initialised) {
        this.goTo(initPage.pageX, initPage.pageY, 0);
      } else {
        this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.beforeInitialScrollTo, function(position) {
          _this2.initialised = true;
          position.x = initPage.x;
          position.y = initPage.y;
        });
      }
      this.startPlay();
    };
    Slide2.prototype.computeThreshold = function() {
      var threshold = this.options.threshold;
      if (threshold % 1 === 0) {
        this.thresholdX = threshold;
        this.thresholdY = threshold;
      } else {
        var _a2 = this.pages.getPageStats(), width = _a2.width, height = _a2.height;
        this.thresholdX = Math.round(width * threshold);
        this.thresholdY = Math.round(height * threshold);
      }
    };
    Slide2.prototype.cloneFirstAndLastSlidePage = function(slideContent) {
      var children = slideContent.children;
      var preprendDOM = children[children.length - 1].cloneNode(true);
      var appendDOM = children[0].cloneNode(true);
      prepend(preprendDOM, slideContent);
      slideContent.appendChild(appendDOM);
      this.cachedClonedPageDOM = [preprendDOM, appendDOM];
    };
    Slide2.prototype.removeClonedSlidePage = function(slideContent) {
      var slidePages = slideContent && slideContent.children || [];
      if (slidePages.length) {
        this.cachedClonedPageDOM.forEach(function(el) {
          removeChild(slideContent, el);
        });
      }
      this.cachedClonedPageDOM = [];
    };
    Slide2.prototype.modifyCurrentPage = function(point) {
      var scroller = this.scroll.scroller;
      if (scroller.animater.forceStopped) {
        return;
      }
      var _a2 = this.getCurrentPage(), prevExposedPageX = _a2.pageX, prevExposedPageY = _a2.pageY;
      var newPage = this.nearestPage(point.x, point.y);
      this.setCurrentPage(newPage);
      if (this.contentChanged) {
        this.contentChanged = false;
        return true;
      }
      var _b2 = this.getCurrentPage(), currentExposedPageX = _b2.pageX, currentExposedPageY = _b2.pageY;
      this.pageWillChangeTo(newPage);
      if (this.oneToMorePagesInLoop) {
        this.oneToMorePagesInLoop = false;
        return true;
      }
      if (this.moreToOnePageInLoop && prevExposedPageX === 0 && prevExposedPageY === 0) {
        this.moreToOnePageInLoop = false;
        return true;
      }
      if (prevExposedPageX !== currentExposedPageX || prevExposedPageY !== currentExposedPageY) {
        var page = this.pages.getExposedPageByPageIndex(currentExposedPageX, currentExposedPageY);
        this.scroll.trigger(this.scroll.eventTypes.slidePageChanged, page);
      }
      if (this.resetLooping) {
        this.resetLooping = false;
        return;
      }
      var changePage = this.pages.resetLoopPage();
      if (changePage) {
        this.resetLooping = true;
        this.goTo(changePage.pageX, changePage.pageY, 0);
        return true;
      }
    };
    Slide2.prototype.goTo = function(pageX, pageY, time, easing) {
      var newPage = this.pages.getInternalPage(pageX, pageY);
      var scrollEasing = easing || this.options.easing || ease.bounce;
      var x = newPage.x, y = newPage.y;
      var deltaX = x - this.scroll.scroller.scrollBehaviorX.currentPos;
      var deltaY = y - this.scroll.scroller.scrollBehaviorY.currentPos;
      if (!deltaX && !deltaY) {
        return;
      }
      time = time === void 0 ? this.getEaseTime(deltaX, deltaY) : time;
      this.scroll.scroller.scrollTo(x, y, time, scrollEasing);
    };
    Slide2.prototype.flickHandler = function() {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      var currentPosX = scrollBehaviorX.currentPos, startPosX = scrollBehaviorX.startPos, directionX = scrollBehaviorX.direction;
      var currentPosY = scrollBehaviorY.currentPos, startPosY = scrollBehaviorY.startPos, directionY = scrollBehaviorY.direction;
      var _b2 = this.pages.currentPage, pageX = _b2.pageX, pageY = _b2.pageY;
      var time = this.getEaseTime(currentPosX - startPosX, currentPosY - startPosY);
      this.goTo(pageX + directionX, pageY + directionY, time);
    };
    Slide2.prototype.getEaseTime = function(deltaX, deltaY) {
      return this.options.speed || Math.max(Math.max(Math.min(Math.abs(deltaX), 1e3), Math.min(Math.abs(deltaY), 1e3)), 300);
    };
    Slide2.prototype.modifyScrollMetaHandler = function(scrollMeta) {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY, animater = _a2.animater;
      var newX = scrollMeta.newX;
      var newY = scrollMeta.newY;
      var newPage = this.satisfyThreshold(newX, newY) || animater.forceStopped ? this.pages.getPageByDirection(this.nearestPage(newX, newY), scrollBehaviorX.direction, scrollBehaviorY.direction) : this.pages.currentPage;
      scrollMeta.time = this.getEaseTime(scrollMeta.newX - newPage.x, scrollMeta.newY - newPage.y);
      scrollMeta.newX = newPage.x;
      scrollMeta.newY = newPage.y;
      scrollMeta.easing = this.options.easing || ease.bounce;
    };
    Slide2.prototype.scrollHandler = function(_a2) {
      var x = _a2.x, y = _a2.y;
      if (this.satisfyThreshold(x, y)) {
        var newPage = this.nearestPage(x, y);
        this.pageWillChangeTo(newPage);
      }
    };
    Slide2.prototype.pageWillChangeTo = function(newPage) {
      var changeToPage = this.pages.getWillChangedPage(newPage);
      if (!samePage(this.willChangeToPage, changeToPage)) {
        this.willChangeToPage = changeToPage;
        this.scroll.trigger(this.scroll.eventTypes.slideWillChange, this.willChangeToPage);
      }
    };
    Slide2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    Slide2.prototype.destroy = function() {
      var slideContent = this.scroll.scroller.content;
      var _a2 = this.options, loop = _a2.loop, autoplay = _a2.autoplay;
      if (loop) {
        this.removeClonedSlidePage(slideContent);
      }
      if (autoplay) {
        clearTimeout(this.autoplayTimer);
      }
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        if (hooks.eventTypes[hooksName]) {
          hooks.off(hooksName, handlerFn);
        }
      });
      this.hooksFn.length = 0;
    };
    Slide2.pluginName = "slide";
    return Slide2;
  }()
);
var sourcePrefix$3 = "plugins.wheel";
var propertiesMap$3 = [
  {
    key: "wheelTo",
    name: "wheelTo"
  },
  {
    key: "getSelectedIndex",
    name: "getSelectedIndex"
  },
  {
    key: "restorePosition",
    name: "restorePosition"
  }
];
var propertiesConfig$4 = propertiesMap$3.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix$3 + "." + item.name
  };
});
var WHEEL_INDEX_CHANGED_EVENT_NAME = "wheelIndexChanged";
var CONSTANTS = {
  rate: 4
};
var Wheel = (
  /** @class */
  function() {
    function Wheel3(scroll) {
      this.scroll = scroll;
      this.init();
    }
    Wheel3.prototype.init = function() {
      this.handleBScroll();
      this.handleOptions();
      this.handleHooks();
      this.refreshBoundary();
      this.setSelectedIndex(this.options.selectedIndex);
    };
    Wheel3.prototype.handleBScroll = function() {
      this.scroll.proxy(propertiesConfig$4);
      this.scroll.registerType([WHEEL_INDEX_CHANGED_EVENT_NAME]);
    };
    Wheel3.prototype.handleOptions = function() {
      var userOptions = this.scroll.options.wheel === true ? {} : this.scroll.options.wheel;
      var defaultOptions = {
        wheelWrapperClass: "wheel-scroll",
        wheelItemClass: "wheel-item",
        rotate: 25,
        adjustTime: 400,
        selectedIndex: 0,
        wheelDisabledItemClass: "wheel-disabled-item"
      };
      this.options = extend(defaultOptions, userOptions);
    };
    Wheel3.prototype.handleHooks = function() {
      var _this2 = this;
      var scroll = this.scroll;
      var scroller = this.scroll.scroller;
      var actionsHandler = scroller.actionsHandler, scrollBehaviorX = scroller.scrollBehaviorX, scrollBehaviorY = scroller.scrollBehaviorY, animater = scroller.animater;
      var prevContent = scroller.content;
      scroll.on(scroll.eventTypes.scrollEnd, function(position) {
        var index = _this2.findNearestValidWheel(position.y).index;
        if (scroller.animater.forceStopped && !_this2.isAdjustingPosition) {
          _this2.target = _this2.items[index];
          return true;
        } else {
          _this2.setSelectedIndex(index);
          if (_this2.isAdjustingPosition) {
            _this2.isAdjustingPosition = false;
          }
        }
      });
      this.scroll.hooks.on(this.scroll.hooks.eventTypes.refresh, function(content) {
        if (content !== prevContent) {
          prevContent = content;
          _this2.setSelectedIndex(_this2.options.selectedIndex, true);
        }
        _this2.rotateX(_this2.scroll.y);
        _this2.wheelTo(_this2.selectedIndex, 0);
      });
      this.scroll.hooks.on(this.scroll.hooks.eventTypes.beforeInitialScrollTo, function(position) {
        position.x = 0;
        position.y = -(_this2.selectedIndex * _this2.itemHeight);
      });
      scroller.hooks.on(scroller.hooks.eventTypes.checkClick, function() {
        var index = HTMLCollectionToArray(_this2.items).indexOf(_this2.target);
        if (index === -1)
          return true;
        _this2.wheelTo(index, _this2.options.adjustTime, ease.swipe);
        return true;
      });
      scroller.hooks.on(scroller.hooks.eventTypes.scrollTo, function(endPoint) {
        endPoint.y = _this2.findNearestValidWheel(endPoint.y).y;
      });
      scroller.hooks.on(scroller.hooks.eventTypes.minDistanceScroll, function() {
        var animater2 = scroller.animater;
        if (animater2.forceStopped === true) {
          animater2.forceStopped = false;
        }
      });
      scroller.hooks.on(scroller.hooks.eventTypes.scrollToElement, function(el, pos) {
        if (!hasClass(el, _this2.options.wheelItemClass)) {
          return true;
        } else {
          pos.top = _this2.findNearestValidWheel(pos.top).y;
        }
      });
      actionsHandler.hooks.on(actionsHandler.hooks.eventTypes.beforeStart, function(e) {
        _this2.target = e.target;
      });
      scrollBehaviorX.hooks.on(scrollBehaviorX.hooks.eventTypes.computeBoundary, function(boundary) {
        boundary.maxScrollPos = 0;
        boundary.minScrollPos = 0;
      });
      scrollBehaviorY.hooks.on(scrollBehaviorY.hooks.eventTypes.computeBoundary, function(boundary) {
        _this2.items = _this2.scroll.scroller.content.children;
        _this2.checkWheelAllDisabled();
        _this2.itemHeight = _this2.items.length > 0 ? scrollBehaviorY.contentSize / _this2.items.length : 0;
        boundary.maxScrollPos = -_this2.itemHeight * (_this2.items.length - 1);
        boundary.minScrollPos = 0;
      });
      scrollBehaviorY.hooks.on(scrollBehaviorY.hooks.eventTypes.momentum, function(momentumInfo) {
        momentumInfo.rate = CONSTANTS.rate;
        momentumInfo.destination = _this2.findNearestValidWheel(momentumInfo.destination).y;
      });
      scrollBehaviorY.hooks.on(scrollBehaviorY.hooks.eventTypes.end, function(momentumInfo) {
        var validWheel = _this2.findNearestValidWheel(scrollBehaviorY.currentPos);
        momentumInfo.destination = validWheel.y;
        momentumInfo.duration = _this2.options.adjustTime;
      });
      animater.hooks.on(animater.hooks.eventTypes.time, function(time) {
        _this2.transitionDuration(time);
      });
      animater.hooks.on(animater.hooks.eventTypes.timeFunction, function(easing) {
        _this2.timeFunction(easing);
      });
      animater.hooks.on(animater.hooks.eventTypes.callStop, function() {
        var index = _this2.findNearestValidWheel(_this2.scroll.y).index;
        _this2.isAdjustingPosition = true;
        _this2.wheelTo(index, 0);
      });
      animater.translater.hooks.on(animater.translater.hooks.eventTypes.translate, function(endPoint) {
        _this2.rotateX(endPoint.y);
      });
    };
    Wheel3.prototype.refreshBoundary = function() {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY, content = _a2.content;
      scrollBehaviorX.refresh(content);
      scrollBehaviorY.refresh(content);
    };
    Wheel3.prototype.setSelectedIndex = function(index, contentChanged) {
      if (contentChanged === void 0) {
        contentChanged = false;
      }
      var prevSelectedIndex = this.selectedIndex;
      this.selectedIndex = index;
      if (prevSelectedIndex !== index && !contentChanged) {
        this.scroll.trigger(WHEEL_INDEX_CHANGED_EVENT_NAME, index);
      }
    };
    Wheel3.prototype.getSelectedIndex = function() {
      return this.selectedIndex;
    };
    Wheel3.prototype.wheelTo = function(index, time, ease2) {
      if (index === void 0) {
        index = 0;
      }
      if (time === void 0) {
        time = 0;
      }
      var y = -index * this.itemHeight;
      this.scroll.scrollTo(0, y, time, ease2);
    };
    Wheel3.prototype.restorePosition = function() {
      var isPending = this.scroll.pending;
      if (isPending) {
        var selectedIndex = this.getSelectedIndex();
        this.scroll.scroller.animater.clearTimer();
        this.wheelTo(selectedIndex, 0);
      }
    };
    Wheel3.prototype.transitionDuration = function(time) {
      for (var i = 0; i < this.items.length; i++) {
        this.items[i].style[style.transitionDuration] = time + "ms";
      }
    };
    Wheel3.prototype.timeFunction = function(easing) {
      for (var i = 0; i < this.items.length; i++) {
        this.items[i].style[style.transitionTimingFunction] = easing;
      }
    };
    Wheel3.prototype.rotateX = function(y) {
      var _a2 = this.options.rotate, rotate = _a2 === void 0 ? 25 : _a2;
      for (var i = 0; i < this.items.length; i++) {
        var deg = rotate * (y / this.itemHeight + i);
        var SafeDeg = deg.toFixed(3);
        this.items[i].style[style.transform] = "rotateX(" + SafeDeg + "deg)";
      }
    };
    Wheel3.prototype.findNearestValidWheel = function(y) {
      y = y > 0 ? 0 : y < this.scroll.maxScrollY ? this.scroll.maxScrollY : y;
      var currentIndex = Math.abs(Math.round(-y / this.itemHeight));
      var cacheIndex = currentIndex;
      var items = this.items;
      var wheelDisabledItemClassName = this.options.wheelDisabledItemClass;
      while (currentIndex >= 0) {
        if (!hasClass(items[currentIndex], wheelDisabledItemClassName)) {
          break;
        }
        currentIndex--;
      }
      if (currentIndex < 0) {
        currentIndex = cacheIndex;
        while (currentIndex <= items.length - 1) {
          if (!hasClass(items[currentIndex], wheelDisabledItemClassName)) {
            break;
          }
          currentIndex++;
        }
      }
      if (currentIndex === items.length) {
        currentIndex = cacheIndex;
      }
      return {
        index: this.wheelItemsAllDisabled ? -1 : currentIndex,
        y: -currentIndex * this.itemHeight
      };
    };
    Wheel3.prototype.checkWheelAllDisabled = function() {
      var wheelDisabledItemClassName = this.options.wheelDisabledItemClass;
      var items = this.items;
      this.wheelItemsAllDisabled = true;
      for (var i = 0; i < items.length; i++) {
        if (!hasClass(items[i], wheelDisabledItemClassName)) {
          this.wheelItemsAllDisabled = false;
          break;
        }
      }
    };
    Wheel3.pluginName = "wheel";
    return Wheel3;
  }()
);
var sourcePrefix$4 = "plugins.zoom";
var propertiesMap$4 = [
  {
    key: "zoomTo",
    name: "zoomTo"
  }
];
var propertiesConfig$5 = propertiesMap$4.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix$4 + "." + item.name
  };
});
var TWO_FINGERS = 2;
var RAW_SCALE = 1;
var Zoom = (
  /** @class */
  function() {
    function Zoom2(scroll) {
      this.scroll = scroll;
      this.scale = RAW_SCALE;
      this.prevScale = 1;
      this.init();
    }
    Zoom2.prototype.init = function() {
      this.handleBScroll();
      this.handleOptions();
      this.handleHooks();
      this.tryInitialZoomTo(this.zoomOpt);
    };
    Zoom2.prototype.zoomTo = function(scale, x, y, bounceTime) {
      var _a2 = this.resolveOrigin(x, y), originX = _a2.originX, originY = _a2.originY;
      var origin = {
        x: originX,
        y: originY,
        baseScale: this.scale
      };
      this._doZoomTo(scale, origin, bounceTime, true);
    };
    Zoom2.prototype.handleBScroll = function() {
      this.scroll.proxy(propertiesConfig$5);
      this.scroll.registerType([
        "beforeZoomStart",
        "zoomStart",
        "zooming",
        "zoomEnd"
      ]);
    };
    Zoom2.prototype.handleOptions = function() {
      var userOptions = this.scroll.options.zoom === true ? {} : this.scroll.options.zoom;
      var defaultOptions = {
        start: 1,
        min: 1,
        max: 4,
        initialOrigin: [0, 0],
        minimalZoomDistance: 5,
        bounceTime: 800
      };
      this.zoomOpt = extend(defaultOptions, userOptions);
    };
    Zoom2.prototype.handleHooks = function() {
      var _this2 = this;
      var scroll = this.scroll;
      var scroller = this.scroll.scroller;
      this.wrapper = this.scroll.scroller.wrapper;
      this.setTransformOrigin(this.scroll.scroller.content);
      var scrollBehaviorX = scroller.scrollBehaviorX;
      var scrollBehaviorY = scroller.scrollBehaviorY;
      this.hooksFn = [];
      this.registerHooks(scroll.hooks, scroll.hooks.eventTypes.contentChanged, function(content) {
        _this2.setTransformOrigin(content);
        _this2.scale = RAW_SCALE;
        _this2.tryInitialZoomTo(_this2.zoomOpt);
      });
      this.registerHooks(scroll.hooks, scroll.hooks.eventTypes.beforeInitialScrollTo, function() {
        if (_this2.zoomOpt.start !== RAW_SCALE) {
          return true;
        }
      });
      this.registerHooks(scrollBehaviorX.hooks, scrollBehaviorX.hooks.eventTypes.beforeComputeBoundary, function() {
        var contentSize = getRect(_this2.scroll.scroller.content);
        scrollBehaviorX.contentSize = Math.floor(contentSize.width * _this2.scale);
      });
      this.registerHooks(scrollBehaviorY.hooks, scrollBehaviorY.hooks.eventTypes.beforeComputeBoundary, function() {
        var contentSize = getRect(_this2.scroll.scroller.content);
        scrollBehaviorY.contentSize = Math.floor(contentSize.height * _this2.scale);
      });
      this.registerHooks(scroller.actions.hooks, scroller.actions.hooks.eventTypes.start, function(e) {
        var numberOfFingers = e.touches && e.touches.length || 0;
        _this2.fingersOperation(numberOfFingers);
        if (numberOfFingers === TWO_FINGERS) {
          _this2.zoomStart(e);
        }
      });
      this.registerHooks(scroller.actions.hooks, scroller.actions.hooks.eventTypes.beforeMove, function(e) {
        var numberOfFingers = e.touches && e.touches.length || 0;
        _this2.fingersOperation(numberOfFingers);
        if (numberOfFingers === TWO_FINGERS) {
          _this2.zoom(e);
          return true;
        }
      });
      this.registerHooks(scroller.actions.hooks, scroller.actions.hooks.eventTypes.beforeEnd, function(e) {
        var numberOfFingers = _this2.fingersOperation();
        if (numberOfFingers === TWO_FINGERS) {
          _this2.zoomEnd();
          return true;
        }
      });
      this.registerHooks(scroller.translater.hooks, scroller.translater.hooks.eventTypes.beforeTranslate, function(transformStyle, point) {
        var scale = point.scale ? point.scale : _this2.prevScale;
        _this2.prevScale = scale;
        transformStyle.push("scale(" + scale + ")");
      });
      this.registerHooks(scroller.hooks, scroller.hooks.eventTypes.scrollEnd, function() {
        if (_this2.fingersOperation() === TWO_FINGERS) {
          _this2.scroll.trigger(_this2.scroll.eventTypes.zoomEnd, {
            scale: _this2.scale
          });
        }
      });
      this.registerHooks(this.scroll.hooks, "destroy", this.destroy);
    };
    Zoom2.prototype.setTransformOrigin = function(content) {
      content.style[style.transformOrigin] = "0 0";
    };
    Zoom2.prototype.tryInitialZoomTo = function(options) {
      var start = options.start, initialOrigin = options.initialOrigin;
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      if (start !== RAW_SCALE) {
        this.resetBoundaries([scrollBehaviorX, scrollBehaviorY]);
        this.zoomTo(start, initialOrigin[0], initialOrigin[1], 0);
      }
    };
    Zoom2.prototype.fingersOperation = function(amounts) {
      if (typeof amounts === "number") {
        this.numberOfFingers = amounts;
      } else {
        return this.numberOfFingers;
      }
    };
    Zoom2.prototype._doZoomTo = function(scale, origin, time, useCurrentPos) {
      var _this2 = this;
      if (time === void 0) {
        time = this.zoomOpt.bounceTime;
      }
      if (useCurrentPos === void 0) {
        useCurrentPos = false;
      }
      var _a2 = this.zoomOpt, min = _a2.min, max = _a2.max;
      var fromScale = this.scale;
      var toScale = between(scale, min, max);
      (function() {
        if (time === 0) {
          _this2.scroll.trigger(_this2.scroll.eventTypes.zooming, {
            scale: toScale
          });
          return;
        }
        if (time > 0) {
          var timer_1;
          var startTime_1 = getNow();
          var endTime_1 = startTime_1 + time;
          var scheduler_1 = function() {
            var now = getNow();
            if (now >= endTime_1) {
              _this2.scroll.trigger(_this2.scroll.eventTypes.zooming, {
                scale: toScale
              });
              cancelAnimationFrame2(timer_1);
              return;
            }
            var ratio = ease.bounce.fn((now - startTime_1) / time);
            var currentScale = ratio * (toScale - fromScale) + fromScale;
            _this2.scroll.trigger(_this2.scroll.eventTypes.zooming, {
              scale: currentScale
            });
            timer_1 = requestAnimationFrame2(scheduler_1);
          };
          scheduler_1();
        }
      })();
      this.fingersOperation(2);
      this._zoomTo(toScale, fromScale, origin, time, useCurrentPos);
    };
    Zoom2.prototype._zoomTo = function(toScale, fromScale, origin, time, useCurrentPos) {
      if (useCurrentPos === void 0) {
        useCurrentPos = false;
      }
      var ratio = toScale / origin.baseScale;
      this.setScale(toScale);
      var scroller = this.scroll.scroller;
      var scrollBehaviorX = scroller.scrollBehaviorX, scrollBehaviorY = scroller.scrollBehaviorY;
      this.resetBoundaries([scrollBehaviorX, scrollBehaviorY]);
      var newX = this.getNewPos(origin.x, ratio, scrollBehaviorX, true, useCurrentPos);
      var newY = this.getNewPos(origin.y, ratio, scrollBehaviorY, true, useCurrentPos);
      if (scrollBehaviorX.currentPos !== Math.round(newX) || scrollBehaviorY.currentPos !== Math.round(newY) || toScale !== fromScale) {
        scroller.scrollTo(newX, newY, time, ease.bounce, {
          start: {
            scale: fromScale
          },
          end: {
            scale: toScale
          }
        });
      }
    };
    Zoom2.prototype.resolveOrigin = function(x, y) {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      var resolveFormula = {
        left: function() {
          return 0;
        },
        top: function() {
          return 0;
        },
        right: function() {
          return scrollBehaviorX.contentSize;
        },
        bottom: function() {
          return scrollBehaviorY.contentSize;
        },
        center: function(index) {
          var baseSize = index === 0 ? scrollBehaviorX.contentSize : scrollBehaviorY.contentSize;
          return baseSize / 2;
        }
      };
      return {
        originX: typeof x === "number" ? x : resolveFormula[x](0),
        originY: typeof y === "number" ? y : resolveFormula[y](1)
      };
    };
    Zoom2.prototype.zoomStart = function(e) {
      var firstFinger = e.touches[0];
      var secondFinger = e.touches[1];
      this.startDistance = this.getFingerDistance(e);
      this.startScale = this.scale;
      var _a2 = offsetToBody(this.wrapper), left = _a2.left, top = _a2.top;
      this.origin = {
        x: Math.abs(firstFinger.pageX + secondFinger.pageX) / 2 + left - this.scroll.x,
        y: Math.abs(firstFinger.pageY + secondFinger.pageY) / 2 + top - this.scroll.y,
        baseScale: this.startScale
      };
      this.scroll.trigger(this.scroll.eventTypes.beforeZoomStart);
    };
    Zoom2.prototype.zoom = function(e) {
      var currentDistance = this.getFingerDistance(e);
      if (!this.zoomed && Math.abs(currentDistance - this.startDistance) < this.zoomOpt.minimalZoomDistance) {
        return;
      }
      var endScale = this.dampingScale(currentDistance / this.startDistance * this.startScale);
      var ratio = endScale / this.startScale;
      this.setScale(endScale);
      if (!this.zoomed) {
        this.zoomed = true;
        this.scroll.trigger(this.scroll.eventTypes.zoomStart);
      }
      var scroller = this.scroll.scroller;
      var scrollBehaviorX = scroller.scrollBehaviorX, scrollBehaviorY = scroller.scrollBehaviorY;
      var x = this.getNewPos(this.origin.x, ratio, scrollBehaviorX, false, false);
      var y = this.getNewPos(this.origin.y, ratio, scrollBehaviorY, false, false);
      this.scroll.trigger(this.scroll.eventTypes.zooming, {
        scale: this.scale
      });
      scroller.translater.translate({ x, y, scale: endScale });
    };
    Zoom2.prototype.zoomEnd = function() {
      if (!this.zoomed)
        return;
      if (this.shouldRebound()) {
        this._doZoomTo(this.scale, this.origin, this.zoomOpt.bounceTime);
        return;
      }
      this.scroll.trigger(this.scroll.eventTypes.zoomEnd, { scale: this.scale });
    };
    Zoom2.prototype.getFingerDistance = function(e) {
      var firstFinger = e.touches[0];
      var secondFinger = e.touches[1];
      var deltaX = Math.abs(firstFinger.pageX - secondFinger.pageX);
      var deltaY = Math.abs(firstFinger.pageY - secondFinger.pageY);
      return getDistance(deltaX, deltaY);
    };
    Zoom2.prototype.shouldRebound = function() {
      var _a2 = this.zoomOpt, min = _a2.min, max = _a2.max;
      var currentScale = this.scale;
      if (currentScale !== between(currentScale, min, max)) {
        return true;
      }
      var _b2 = this.scroll.scroller, scrollBehaviorX = _b2.scrollBehaviorX, scrollBehaviorY = _b2.scrollBehaviorY;
      this.resetBoundaries([scrollBehaviorX, scrollBehaviorY]);
      var xInBoundary = scrollBehaviorX.checkInBoundary().inBoundary;
      var yInBoundary = scrollBehaviorX.checkInBoundary().inBoundary;
      return !(xInBoundary && yInBoundary);
    };
    Zoom2.prototype.dampingScale = function(scale) {
      var _a2 = this.zoomOpt, min = _a2.min, max = _a2.max;
      if (scale < min) {
        scale = 0.5 * min * Math.pow(2, scale / min);
      } else if (scale > max) {
        scale = 2 * max * Math.pow(0.5, max / scale);
      }
      return scale;
    };
    Zoom2.prototype.setScale = function(scale) {
      this.scale = scale;
    };
    Zoom2.prototype.resetBoundaries = function(scrollBehaviorPairs) {
      scrollBehaviorPairs.forEach(function(behavior) {
        return behavior.computeBoundary();
      });
    };
    Zoom2.prototype.getNewPos = function(origin, lastScale, scrollBehavior, shouldInBoundary, useCurrentPos) {
      if (useCurrentPos === void 0) {
        useCurrentPos = false;
      }
      var newPos = origin - origin * lastScale + (useCurrentPos ? scrollBehavior.currentPos : scrollBehavior.startPos);
      if (shouldInBoundary) {
        newPos = between(newPos, scrollBehavior.maxScrollPos, scrollBehavior.minScrollPos);
      }
      return newPos > 0 ? Math.floor(newPos) : Math.ceil(newPos);
    };
    Zoom2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    Zoom2.prototype.destroy = function() {
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        hooks.off(hooksName, handlerFn);
      });
      this.hooksFn.length = 0;
    };
    Zoom2.pluginName = "zoom";
    return Zoom2;
  }()
);
var BScrollFamily = (
  /** @class */
  function() {
    function BScrollFamily2(scroll) {
      this.ancestors = [];
      this.descendants = [];
      this.hooksManager = [];
      this.analyzed = false;
      this.selfScroll = scroll;
    }
    BScrollFamily2.create = function(scroll) {
      return new BScrollFamily2(scroll);
    };
    BScrollFamily2.prototype.hasAncestors = function(bscrollFamily) {
      var index = findIndex(this.ancestors, function(_a2) {
        var item = _a2[0];
        return item === bscrollFamily;
      });
      return index > -1;
    };
    BScrollFamily2.prototype.hasDescendants = function(bscrollFamily) {
      var index = findIndex(this.descendants, function(_a2) {
        var item = _a2[0];
        return item === bscrollFamily;
      });
      return index > -1;
    };
    BScrollFamily2.prototype.addAncestor = function(bscrollFamily, distance) {
      var ancestors = this.ancestors;
      ancestors.push([bscrollFamily, distance]);
      ancestors.sort(function(a, b) {
        return a[1] - b[1];
      });
    };
    BScrollFamily2.prototype.addDescendant = function(bscrollFamily, distance) {
      var descendants = this.descendants;
      descendants.push([bscrollFamily, distance]);
      descendants.sort(function(a, b) {
        return a[1] - b[1];
      });
    };
    BScrollFamily2.prototype.removeAncestor = function(bscrollFamily) {
      var ancestors = this.ancestors;
      if (ancestors.length) {
        var index = findIndex(this.ancestors, function(_a2) {
          var item = _a2[0];
          return item === bscrollFamily;
        });
        if (index > -1) {
          return ancestors.splice(index, 1);
        }
      }
    };
    BScrollFamily2.prototype.removeDescendant = function(bscrollFamily) {
      var descendants = this.descendants;
      if (descendants.length) {
        var index = findIndex(this.descendants, function(_a2) {
          var item = _a2[0];
          return item === bscrollFamily;
        });
        if (index > -1) {
          return descendants.splice(index, 1);
        }
      }
    };
    BScrollFamily2.prototype.registerHooks = function(hook, eventType, handler) {
      hook.on(eventType, handler);
      this.hooksManager.push([hook, eventType, handler]);
    };
    BScrollFamily2.prototype.setAnalyzed = function(flag) {
      if (flag === void 0) {
        flag = false;
      }
      this.analyzed = flag;
    };
    BScrollFamily2.prototype.purge = function() {
      var _this2 = this;
      this.ancestors.forEach(function(_a2) {
        var bscrollFamily = _a2[0];
        bscrollFamily.removeDescendant(_this2);
      });
      this.descendants.forEach(function(_a2) {
        var bscrollFamily = _a2[0];
        bscrollFamily.removeAncestor(_this2);
      });
      this.hooksManager.forEach(function(_a2) {
        var hooks = _a2[0], eventType = _a2[1], handler = _a2[2];
        hooks.off(eventType, handler);
      });
      this.hooksManager = [];
    };
    return BScrollFamily2;
  }()
);
var sourcePrefix$5 = "plugins.nestedScroll";
var propertiesMap$5 = [
  {
    key: "purgeNestedScroll",
    name: "purgeNestedScroll"
  }
];
var propertiesConfig$6 = propertiesMap$5.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix$5 + "." + item.name
  };
});
var DEFAUL_GROUP_ID = "INTERNAL_NESTED_SCROLL";
var forceScrollStopHandler = function(scrolls) {
  scrolls.forEach(function(scroll) {
    if (scroll.pending) {
      scroll.stop();
      scroll.resetPosition();
    }
  });
};
var enableScrollHander = function(scrolls) {
  scrolls.forEach(function(scroll) {
    scroll.enable();
  });
};
var disableScrollHander = function(scrolls, currentScroll) {
  scrolls.forEach(function(scroll) {
    if (scroll.hasHorizontalScroll === currentScroll.hasHorizontalScroll || scroll.hasVerticalScroll === currentScroll.hasVerticalScroll) {
      scroll.disable();
    }
  });
};
var syncTouchstartData = function(scrolls) {
  scrolls.forEach(function(scroll) {
    var _a2 = scroll.scroller, actions = _a2.actions, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
    actions.fingerMoved = true;
    actions.contentMoved = false;
    actions.directionLockAction.reset();
    scrollBehaviorX.start();
    scrollBehaviorY.start();
    scrollBehaviorX.resetStartPos();
    scrollBehaviorY.resetStartPos();
    actions.startTime = +/* @__PURE__ */ new Date();
  });
};
var isOutOfBoundary = function(scroll) {
  var hasHorizontalScroll = scroll.hasHorizontalScroll, hasVerticalScroll = scroll.hasVerticalScroll, x = scroll.x, y = scroll.y, minScrollX = scroll.minScrollX, maxScrollX = scroll.maxScrollX, minScrollY = scroll.minScrollY, maxScrollY = scroll.maxScrollY, movingDirectionX = scroll.movingDirectionX, movingDirectionY = scroll.movingDirectionY;
  var ret = false;
  var outOfLeftBoundary = x >= minScrollX && movingDirectionX === -1;
  var outOfRightBoundary = x <= maxScrollX && movingDirectionX === 1;
  var outOfTopBoundary = y >= minScrollY && movingDirectionY === -1;
  var outOfBottomBoundary = y <= maxScrollY && movingDirectionY === 1;
  if (hasVerticalScroll) {
    ret = outOfTopBoundary || outOfBottomBoundary;
  } else if (hasHorizontalScroll) {
    ret = outOfLeftBoundary || outOfRightBoundary;
  }
  return ret;
};
var isResettingPosition = function(scroll) {
  var hasHorizontalScroll = scroll.hasHorizontalScroll, hasVerticalScroll = scroll.hasVerticalScroll, x = scroll.x, y = scroll.y, minScrollX = scroll.minScrollX, maxScrollX = scroll.maxScrollX, minScrollY = scroll.minScrollY, maxScrollY = scroll.maxScrollY;
  var ret = false;
  var outOfLeftBoundary = x > minScrollX;
  var outOfRightBoundary = x < maxScrollX;
  var outOfTopBoundary = y > minScrollY;
  var outOfBottomBoundary = y < maxScrollY;
  if (hasVerticalScroll) {
    ret = outOfTopBoundary || outOfBottomBoundary;
  } else if (hasHorizontalScroll) {
    ret = outOfLeftBoundary || outOfRightBoundary;
  }
  return ret;
};
var resetPositionHandler = function(scroll) {
  scroll.scroller.reflow();
  scroll.resetPosition(
    0
    /* Immediately */
  );
};
var calculateDistance = function(childNode, parentNode) {
  var distance = 0;
  var parent = childNode.parentNode;
  while (parent && parent !== parentNode) {
    distance++;
    parent = parent.parentNode;
  }
  return distance;
};
var NestedScroll = (
  /** @class */
  function() {
    function NestedScroll2(scroll) {
      var groupId = this.handleOptions(scroll);
      var instance = NestedScroll2.instancesMap[groupId];
      if (!instance) {
        instance = NestedScroll2.instancesMap[groupId] = this;
        instance.store = [];
        instance.hooksFn = [];
      }
      instance.init(scroll);
      return instance;
    }
    NestedScroll2.getAllNestedScrolls = function() {
      var instancesMap = NestedScroll2.instancesMap;
      return Object.keys(instancesMap).map(function(key) {
        return instancesMap[key];
      });
    };
    NestedScroll2.purgeAllNestedScrolls = function() {
      var nestedScrolls = NestedScroll2.getAllNestedScrolls();
      nestedScrolls.forEach(function(ns) {
        return ns.purgeNestedScroll();
      });
    };
    NestedScroll2.prototype.handleOptions = function(scroll) {
      var userOptions = scroll.options.nestedScroll === true ? {} : scroll.options.nestedScroll;
      var defaultOptions = {
        groupId: DEFAUL_GROUP_ID
      };
      this.options = extend(defaultOptions, userOptions);
      var groupIdType = typeof this.options.groupId;
      if (groupIdType !== "string" && groupIdType !== "number") {
        warn("groupId must be string or number for NestedScroll plugin");
      }
      return this.options.groupId;
    };
    NestedScroll2.prototype.init = function(scroll) {
      scroll.proxy(propertiesConfig$6);
      this.addBScroll(scroll);
      this.buildBScrollGraph();
      this.analyzeBScrollGraph();
      this.ensureEventInvokeSequence();
      this.handleHooks(scroll);
    };
    NestedScroll2.prototype.handleHooks = function(scroll) {
      var _this2 = this;
      this.registerHooks(scroll.hooks, scroll.hooks.eventTypes.destroy, function() {
        _this2.deleteScroll(scroll);
      });
    };
    NestedScroll2.prototype.deleteScroll = function(scroll) {
      var wrapper = scroll.wrapper;
      wrapper.isBScrollContainer = void 0;
      var store = this.store;
      var hooksFn = this.hooksFn;
      var i = findIndex(store, function(bscrollFamily2) {
        return bscrollFamily2.selfScroll === scroll;
      });
      if (i > -1) {
        var bscrollFamily = store[i];
        bscrollFamily.purge();
        store.splice(i, 1);
      }
      var k = findIndex(hooksFn, function(_a3) {
        var hooks2 = _a3[0];
        return hooks2 === scroll.hooks;
      });
      if (k > -1) {
        var _a2 = hooksFn[k], hooks = _a2[0], eventType = _a2[1], handler = _a2[2];
        hooks.off(eventType, handler);
        hooksFn.splice(k, 1);
      }
    };
    NestedScroll2.prototype.addBScroll = function(scroll) {
      this.store.push(BScrollFamily.create(scroll));
    };
    NestedScroll2.prototype.buildBScrollGraph = function() {
      var store = this.store;
      var bf1;
      var bf2;
      var wrapper1;
      var wrapper2;
      var len = this.store.length;
      for (var i = 0; i < len; i++) {
        bf1 = store[i];
        wrapper1 = bf1.selfScroll.wrapper;
        for (var j = 0; j < len; j++) {
          bf2 = store[j];
          wrapper2 = bf2.selfScroll.wrapper;
          if (bf1 === bf2)
            continue;
          if (!wrapper1.contains(wrapper2))
            continue;
          var distance = calculateDistance(wrapper2, wrapper1);
          if (!bf1.hasDescendants(bf2)) {
            bf1.addDescendant(bf2, distance);
          }
          if (!bf2.hasAncestors(bf1)) {
            bf2.addAncestor(bf1, distance);
          }
        }
      }
    };
    NestedScroll2.prototype.analyzeBScrollGraph = function() {
      this.store.forEach(function(bscrollFamily) {
        if (bscrollFamily.analyzed) {
          return;
        }
        var ancestors = bscrollFamily.ancestors, descendants = bscrollFamily.descendants, currentScroll = bscrollFamily.selfScroll;
        var beforeScrollStartHandler = function() {
          var ancestorScrolls = ancestors.map(function(_a2) {
            var bscrollFamily2 = _a2[0];
            return bscrollFamily2.selfScroll;
          });
          var descendantScrolls = descendants.map(function(_a2) {
            var bscrollFamily2 = _a2[0];
            return bscrollFamily2.selfScroll;
          });
          forceScrollStopHandler(__spreadArrays(ancestorScrolls, descendantScrolls));
          if (isResettingPosition(currentScroll)) {
            resetPositionHandler(currentScroll);
          }
          syncTouchstartData(ancestorScrolls);
          disableScrollHander(ancestorScrolls, currentScroll);
        };
        var touchEndHandler = function() {
          var ancestorScrolls = ancestors.map(function(_a2) {
            var bscrollFamily2 = _a2[0];
            return bscrollFamily2.selfScroll;
          });
          var descendantScrolls = descendants.map(function(_a2) {
            var bscrollFamily2 = _a2[0];
            return bscrollFamily2.selfScroll;
          });
          enableScrollHander(__spreadArrays(ancestorScrolls, descendantScrolls));
        };
        bscrollFamily.registerHooks(currentScroll, currentScroll.eventTypes.beforeScrollStart, beforeScrollStartHandler);
        bscrollFamily.registerHooks(currentScroll, currentScroll.eventTypes.touchEnd, touchEndHandler);
        var selfActionsHooks = currentScroll.scroller.actions.hooks;
        bscrollFamily.registerHooks(selfActionsHooks, selfActionsHooks.eventTypes.detectMovingDirection, function() {
          var ancestorScrolls = ancestors.map(function(_a2) {
            var bscrollFamily2 = _a2[0];
            return bscrollFamily2.selfScroll;
          });
          var parentScroll = ancestorScrolls[0];
          var otherAncestorScrolls = ancestorScrolls.slice(1);
          var contentMoved = currentScroll.scroller.actions.contentMoved;
          var isTopScroll = ancestorScrolls.length === 0;
          if (contentMoved) {
            disableScrollHander(ancestorScrolls, currentScroll);
          } else if (!isTopScroll) {
            if (isOutOfBoundary(currentScroll)) {
              disableScrollHander([currentScroll], currentScroll);
              if (parentScroll) {
                enableScrollHander([parentScroll]);
              }
              disableScrollHander(otherAncestorScrolls, currentScroll);
              return true;
            }
          }
        });
        bscrollFamily.setAnalyzed(true);
      });
    };
    NestedScroll2.prototype.ensureEventInvokeSequence = function() {
      var copied = this.store.slice();
      var sequencedScroll = copied.sort(function(a, b) {
        return a.descendants.length - b.descendants.length;
      });
      sequencedScroll.forEach(function(bscrollFamily) {
        var scroll = bscrollFamily.selfScroll;
        scroll.scroller.actionsHandler.rebindDOMEvents();
      });
    };
    NestedScroll2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    NestedScroll2.prototype.purgeNestedScroll = function() {
      var groupId = this.options.groupId;
      this.store.forEach(function(bscrollFamily) {
        bscrollFamily.purge();
      });
      this.store = [];
      this.hooksFn.forEach(function(_a2) {
        var hooks = _a2[0], eventType = _a2[1], handler = _a2[2];
        hooks.off(eventType, handler);
      });
      this.hooksFn = [];
      delete NestedScroll2.instancesMap[groupId];
    };
    NestedScroll2.pluginName = "nestedScroll";
    NestedScroll2.instancesMap = {};
    return NestedScroll2;
  }()
);
var PRE_NUM = 10;
var POST_NUM = 30;
var IndexCalculator = (
  /** @class */
  function() {
    function IndexCalculator2(wrapperHeight, tombstoneHeight) {
      this.wrapperHeight = wrapperHeight;
      this.tombstoneHeight = tombstoneHeight;
      this.lastDirection = 1;
      this.lastPos = 0;
    }
    IndexCalculator2.prototype.calculate = function(pos, list) {
      var offset3 = pos - this.lastPos;
      this.lastPos = pos;
      var direction = this.getDirection(offset3);
      var start = this.calculateIndex(0, pos, list);
      var end = this.calculateIndex(start, pos + this.wrapperHeight, list);
      if (direction === 1) {
        start -= PRE_NUM;
        end += POST_NUM;
      } else {
        start -= POST_NUM;
        end += PRE_NUM;
      }
      if (start < 0) {
        start = 0;
      }
      return {
        start,
        end
      };
    };
    IndexCalculator2.prototype.getDirection = function(offset3) {
      var direction;
      if (offset3 > 0) {
        direction = 1;
      } else if (offset3 < 0) {
        direction = 0;
      } else {
        return this.lastDirection;
      }
      this.lastDirection = direction;
      return direction;
    };
    IndexCalculator2.prototype.calculateIndex = function(start, offset3, list) {
      if (offset3 <= 0) {
        return start;
      }
      var i = start;
      var startPos = list[i] && list[i].pos !== -1 ? list[i].pos : 0;
      var lastPos = startPos;
      var tombstone = 0;
      while (i < list.length && list[i].pos < offset3) {
        lastPos = list[i].pos;
        i++;
      }
      if (i === list.length) {
        tombstone = Math.floor((offset3 - lastPos) / this.tombstoneHeight);
      }
      i += tombstone;
      return i;
    };
    IndexCalculator2.prototype.resetState = function() {
      this.lastDirection = 1;
      this.lastPos = 0;
    };
    return IndexCalculator2;
  }()
);
var ListItem = (
  /** @class */
  function() {
    function ListItem2() {
      this.data = null;
      this.dom = null;
      this.tombstone = null;
      this.width = 0;
      this.height = 0;
      this.pos = 0;
    }
    return ListItem2;
  }()
);
var DataManager = (
  /** @class */
  function() {
    function DataManager2(list, fetchFn, onFetchFinish) {
      this.fetchFn = fetchFn;
      this.onFetchFinish = onFetchFinish;
      this.loadedNum = 0;
      this.fetching = false;
      this.hasMore = true;
      this.list = list || [];
    }
    DataManager2.prototype.update = function(end) {
      return __awaiter(this, void 0, void 0, function() {
        var len;
        return __generator(this, function(_a2) {
          if (!this.hasMore) {
            end = Math.min(end, this.list.length);
          }
          if (end > this.list.length) {
            len = end - this.list.length;
            this.addEmptyData(len);
          }
          return [2, this.checkToFetch(end)];
        });
      });
    };
    DataManager2.prototype.add = function(data) {
      for (var i = 0; i < data.length; i++) {
        if (!this.list[this.loadedNum]) {
          this.list[this.loadedNum] = { data: data[i] };
        } else {
          this.list[this.loadedNum] = __assign(__assign({}, this.list[this.loadedNum]), { data: data[i] });
        }
        this.loadedNum++;
      }
      return this.list;
    };
    DataManager2.prototype.addEmptyData = function(len) {
      for (var i = 0; i < len; i++) {
        this.list.push(new ListItem());
      }
      return this.list;
    };
    DataManager2.prototype.fetch = function(len) {
      return __awaiter(this, void 0, void 0, function() {
        var data;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (this.fetching) {
                return [2, []];
              }
              this.fetching = true;
              return [4, this.fetchFn(len)];
            case 1:
              data = _a2.sent();
              this.fetching = false;
              return [2, data];
          }
        });
      });
    };
    DataManager2.prototype.checkToFetch = function(end) {
      return __awaiter(this, void 0, void 0, function() {
        var min, newData, currentEnd;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!this.hasMore) {
                return [
                  2
                  /*return*/
                ];
              }
              if (end <= this.loadedNum) {
                return [
                  2
                  /*return*/
                ];
              }
              min = end - this.loadedNum;
              return [4, this.fetch(min)];
            case 1:
              newData = _a2.sent();
              if (newData instanceof Array && newData.length) {
                this.add(newData);
                currentEnd = this.onFetchFinish(this.list, true);
                return [2, this.checkToFetch(currentEnd)];
              } else if (typeof newData === "boolean" && newData === false) {
                this.hasMore = false;
                this.list.splice(this.loadedNum);
                this.onFetchFinish(this.list, false);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DataManager2.prototype.getList = function() {
      return this.list;
    };
    DataManager2.prototype.resetState = function() {
      this.loadedNum = 0;
      this.fetching = false;
      this.hasMore = true;
      this.list = [];
    };
    return DataManager2;
  }()
);
var Tombstone = (
  /** @class */
  function() {
    function Tombstone2(create) {
      this.create = create;
      this.cached = [];
      this.width = 0;
      this.height = 0;
      this.initialed = false;
      this.getSize();
    }
    Tombstone2.isTombstone = function(el) {
      if (el && el.classList) {
        return el.classList.contains("tombstone");
      }
      return false;
    };
    Tombstone2.prototype.getSize = function() {
      if (!this.initialed) {
        var tombstone = this.create();
        tombstone.style.position = "absolute";
        document.body.appendChild(tombstone);
        tombstone.style.display = "";
        this.height = tombstone.offsetHeight;
        this.width = tombstone.offsetWidth;
        document.body.removeChild(tombstone);
        this.cached.push(tombstone);
      }
    };
    Tombstone2.prototype.getOne = function() {
      var tombstone = this.cached.pop();
      if (tombstone) {
        var tombstoneStyle = tombstone.style;
        tombstoneStyle.display = "";
        tombstoneStyle.opacity = "1";
        tombstoneStyle[style.transform] = "";
        tombstoneStyle[style.transition] = "";
        return tombstone;
      }
      return this.create();
    };
    Tombstone2.prototype.recycle = function(tombstones) {
      for (var _i = 0, tombstones_1 = tombstones; _i < tombstones_1.length; _i++) {
        var tombstone = tombstones_1[_i];
        tombstone.style.display = "none";
        this.cached.push(tombstone);
      }
      return this.cached;
    };
    Tombstone2.prototype.recycleOne = function(tombstone) {
      this.cached.push(tombstone);
      return this.cached;
    };
    return Tombstone2;
  }()
);
var ANIMATION_DURATION_MS = 200;
var DomManager = (
  /** @class */
  function() {
    function DomManager2(content, renderFn, tombstone) {
      this.renderFn = renderFn;
      this.tombstone = tombstone;
      this.unusedDom = [];
      this.timers = [];
      this.setContent(content);
    }
    DomManager2.prototype.update = function(list, start, end) {
      if (start >= list.length) {
        start = list.length - 1;
      }
      if (end > list.length) {
        end = list.length;
      }
      this.collectUnusedDom(list, start, end);
      this.createDom(list, start, end);
      this.cacheHeight(list, start, end);
      var _a2 = this.positionDom(list, start, end), startPos = _a2.startPos, startDelta = _a2.startDelta, endPos = _a2.endPos;
      return {
        start,
        startPos,
        startDelta,
        end,
        endPos
      };
    };
    DomManager2.prototype.collectUnusedDom = function(list, start, end) {
      for (var i = 0; i < list.length; i++) {
        if (i === start) {
          i = end - 1;
          continue;
        }
        if (list[i].dom) {
          var dom = list[i].dom;
          if (Tombstone.isTombstone(dom)) {
            this.tombstone.recycleOne(dom);
            dom.style.display = "none";
          } else {
            this.unusedDom.push(dom);
          }
          list[i].dom = null;
        }
      }
      return list;
    };
    DomManager2.prototype.createDom = function(list, start, end) {
      for (var i = start; i < end; i++) {
        var dom = list[i].dom;
        var data = list[i].data;
        if (dom) {
          if (Tombstone.isTombstone(dom) && data) {
            list[i].tombstone = dom;
            list[i].dom = null;
          } else {
            continue;
          }
        }
        dom = data ? this.renderFn(data, this.unusedDom.pop()) : this.tombstone.getOne();
        dom.style.position = "absolute";
        list[i].dom = dom;
        list[i].pos = -1;
        this.content.appendChild(dom);
      }
    };
    DomManager2.prototype.cacheHeight = function(list, start, end) {
      for (var i = start; i < end; i++) {
        if (list[i].data && !list[i].height) {
          list[i].height = list[i].dom.offsetHeight;
        }
      }
    };
    DomManager2.prototype.positionDom = function(list, start, end) {
      var _this2 = this;
      var tombstoneEles = [];
      var _a2 = this.getStartPos(list, start, end), startPos = _a2.start, startDelta = _a2.delta;
      var pos = startPos;
      for (var i = start; i < end; i++) {
        var tombstone = list[i].tombstone;
        if (tombstone) {
          var tombstoneStyle = tombstone.style;
          tombstoneStyle[style.transition] = cssVendor + "transform " + ANIMATION_DURATION_MS + "ms, opacity " + ANIMATION_DURATION_MS + "ms";
          tombstoneStyle[style.transform] = "translateY(" + pos + "px)";
          tombstoneStyle.opacity = "0";
          list[i].tombstone = null;
          tombstoneEles.push(tombstone);
        }
        if (list[i].dom && list[i].pos !== pos) {
          list[i].dom.style[style.transform] = "translateY(" + pos + "px)";
          list[i].pos = pos;
        }
        pos += list[i].height || this.tombstone.height;
      }
      var timerId = window.setTimeout(function() {
        _this2.tombstone.recycle(tombstoneEles);
      }, ANIMATION_DURATION_MS);
      this.timers.push(timerId);
      return {
        startPos,
        startDelta,
        endPos: pos
      };
    };
    DomManager2.prototype.getStartPos = function(list, start, end) {
      if (list[start] && list[start].pos !== -1) {
        return {
          start: list[start].pos,
          delta: 0
        };
      }
      var pos = list[0].pos === -1 ? 0 : list[0].pos;
      for (var i_1 = 0; i_1 < start; i_1++) {
        pos += list[i_1].height || this.tombstone.height;
      }
      var originPos = pos;
      var i;
      for (i = start; i < end; i++) {
        if (!Tombstone.isTombstone(list[i].dom) && list[i].pos !== -1) {
          pos = list[i].pos;
          break;
        }
      }
      var x = i;
      if (x < end) {
        while (x > start) {
          pos -= list[x - 1].height;
          x--;
        }
      }
      var delta = originPos - pos;
      return {
        start: pos,
        delta
      };
    };
    DomManager2.prototype.removeTombstone = function() {
      var tombstones = this.content.querySelectorAll(".tombstone");
      for (var i = tombstones.length - 1; i >= 0; i--) {
        this.content.removeChild(tombstones[i]);
      }
    };
    DomManager2.prototype.setContent = function(content) {
      if (content !== this.content) {
        this.content = content;
      }
    };
    DomManager2.prototype.destroy = function() {
      this.removeTombstone();
      this.timers.forEach(function(id) {
        clearTimeout(id);
      });
    };
    DomManager2.prototype.resetState = function() {
      this.destroy();
      this.timers = [];
      this.unusedDom = [];
    };
    return DomManager2;
  }()
);
var EXTRA_SCROLL_Y = -2e3;
var InfinityScroll = (
  /** @class */
  function() {
    function InfinityScroll2(scroll) {
      this.scroll = scroll;
      this.start = 0;
      this.end = 0;
      this.init();
    }
    InfinityScroll2.prototype.init = function() {
      var _this2 = this;
      this.handleOptions();
      var _a2 = this.options, fetchFn = _a2.fetch, renderFn = _a2.render, createTombstoneFn = _a2.createTombstone;
      this.tombstone = new Tombstone(createTombstoneFn);
      this.indexCalculator = new IndexCalculator(this.scroll.scroller.scrollBehaviorY.wrapperSize, this.tombstone.height);
      this.domManager = new DomManager(this.scroll.scroller.content, renderFn, this.tombstone);
      this.dataManager = new DataManager([], fetchFn, this.onFetchFinish.bind(this));
      this.scroll.on(this.scroll.eventTypes.destroy, this.destroy, this);
      this.scroll.on(this.scroll.eventTypes.scroll, this.update, this);
      this.scroll.on(this.scroll.eventTypes.contentChanged, function(content) {
        _this2.domManager.setContent(content);
        _this2.indexCalculator.resetState();
        _this2.domManager.resetState();
        _this2.dataManager.resetState();
        _this2.update({ y: 0 });
      });
      var scrollBehaviorY = this.scroll.scroller.scrollBehaviorY;
      scrollBehaviorY.hooks.on(scrollBehaviorY.hooks.eventTypes.computeBoundary, this.modifyBoundary, this);
      this.update({ y: 0 });
    };
    InfinityScroll2.prototype.modifyBoundary = function(boundary) {
      boundary.maxScrollPos = EXTRA_SCROLL_Y;
    };
    InfinityScroll2.prototype.handleOptions = function() {
      var infinityOptions = this.scroll.options.infinity;
      if (infinityOptions) {
        if (typeof infinityOptions.fetch !== "function") {
          warn("Infinity plugin need fetch Function to new data.");
        }
        if (typeof infinityOptions.render !== "function") {
          warn("Infinity plugin need render Function to render each item.");
        }
        if (typeof infinityOptions.render !== "function") {
          warn("Infinity plugin need createTombstone Function to create tombstone.");
        }
        this.options = infinityOptions;
      }
      this.scroll.options.probeType = 3;
    };
    InfinityScroll2.prototype.update = function(pos) {
      var position = Math.round(-pos.y);
      var _a2 = this.indexCalculator.calculate(position, this.dataManager.getList()), start = _a2.start, end = _a2.end;
      this.start = start;
      this.end = end;
      this.dataManager.update(end);
      this.updateDom(this.dataManager.getList());
    };
    InfinityScroll2.prototype.onFetchFinish = function(list, hasMore) {
      var end = this.updateDom(list).end;
      if (!hasMore) {
        this.domManager.removeTombstone();
        this.scroll.scroller.animater.stop();
        this.scroll.resetPosition();
      }
      return end;
    };
    InfinityScroll2.prototype.updateDom = function(list) {
      var _a2 = this.domManager.update(list, this.start, this.end), end = _a2.end, startPos = _a2.startPos, endPos = _a2.endPos, startDelta = _a2.startDelta;
      if (startDelta) {
        this.scroll.minScrollY = startDelta;
      }
      if (endPos > this.scroll.maxScrollY) {
        this.scroll.maxScrollY = -(endPos - this.scroll.scroller.scrollBehaviorY.wrapperSize);
      }
      return {
        end,
        startPos,
        endPos
      };
    };
    InfinityScroll2.prototype.destroy = function() {
      var _a2 = this.scroll.scroller, content = _a2.content, scrollBehaviorY = _a2.scrollBehaviorY;
      while (content.firstChild) {
        content.removeChild(content.firstChild);
      }
      this.domManager.destroy();
      this.scroll.off("scroll", this.update);
      this.scroll.off("destroy", this.destroy);
      scrollBehaviorY.hooks.off(scrollBehaviorY.hooks.eventTypes.computeBoundary);
    };
    InfinityScroll2.pluginName = "infinity";
    return InfinityScroll2;
  }()
);
var sourcePrefix$6 = "plugins.movable";
var propertiesMap$6 = [
  {
    key: "putAt",
    name: "putAt"
  }
];
var propertiesConfig$7 = propertiesMap$6.map(function(item) {
  return {
    key: item.key,
    sourceKey: sourcePrefix$6 + "." + item.name
  };
});
var Movable = (
  /** @class */
  function() {
    function Movable2(scroll) {
      this.scroll = scroll;
      this.handleBScroll();
      this.handleHooks();
    }
    Movable2.prototype.handleBScroll = function() {
      this.scroll.proxy(propertiesConfig$7);
    };
    Movable2.prototype.handleHooks = function() {
      var _this2 = this;
      this.hooksFn = [];
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      var computeBoundary = function(boundary, behavior) {
        if (boundary.maxScrollPos > 0) {
          boundary.minScrollPos = behavior.wrapperSize - behavior.contentSize;
          boundary.maxScrollPos = 0;
        }
      };
      this.registerHooks(scrollBehaviorX.hooks, scrollBehaviorX.hooks.eventTypes.ignoreHasScroll, function() {
        return true;
      });
      this.registerHooks(scrollBehaviorX.hooks, scrollBehaviorX.hooks.eventTypes.computeBoundary, function(boundary) {
        computeBoundary(boundary, scrollBehaviorX);
      });
      this.registerHooks(scrollBehaviorY.hooks, scrollBehaviorY.hooks.eventTypes.ignoreHasScroll, function() {
        return true;
      });
      this.registerHooks(scrollBehaviorY.hooks, scrollBehaviorY.hooks.eventTypes.computeBoundary, function(boundary) {
        computeBoundary(boundary, scrollBehaviorY);
      });
      this.registerHooks(this.scroll.hooks, this.scroll.hooks.eventTypes.destroy, function() {
        _this2.destroy();
      });
    };
    Movable2.prototype.putAt = function(x, y, time, easing) {
      if (time === void 0) {
        time = this.scroll.options.bounceTime;
      }
      if (easing === void 0) {
        easing = ease.bounce;
      }
      var position = this.resolvePostion(x, y);
      this.scroll.scrollTo(position.x, position.y, time, easing);
    };
    Movable2.prototype.resolvePostion = function(x, y) {
      var _a2 = this.scroll.scroller, scrollBehaviorX = _a2.scrollBehaviorX, scrollBehaviorY = _a2.scrollBehaviorY;
      var resolveFormula = {
        left: function() {
          return 0;
        },
        top: function() {
          return 0;
        },
        right: function() {
          return scrollBehaviorX.minScrollPos;
        },
        bottom: function() {
          return scrollBehaviorY.minScrollPos;
        },
        center: function(index) {
          var baseSize = index === 0 ? scrollBehaviorX.minScrollPos : scrollBehaviorY.minScrollPos;
          return baseSize / 2;
        }
      };
      return {
        x: typeof x === "number" ? x : resolveFormula[x](0),
        y: typeof y === "number" ? y : resolveFormula[y](1)
      };
    };
    Movable2.prototype.destroy = function() {
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        hooks.off(hooksName, handlerFn);
      });
      this.hooksFn.length = 0;
    };
    Movable2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    Movable2.pluginName = "movable";
    Movable2.applyOrder = "pre";
    return Movable2;
  }()
);
var isImageTag = function(el) {
  return el.tagName.toLowerCase() === "img";
};
var ObserveImage = (
  /** @class */
  function() {
    function ObserveImage2(scroll) {
      this.scroll = scroll;
      this.refreshTimer = 0;
      this.init();
    }
    ObserveImage2.prototype.init = function() {
      this.handleOptions(this.scroll.options.observeImage);
      this.bindEventsToWrapper();
    };
    ObserveImage2.prototype.handleOptions = function(userOptions) {
      if (userOptions === void 0) {
        userOptions = {};
      }
      userOptions = userOptions === true ? {} : userOptions;
      var defaultOptions = {
        debounceTime: 100
      };
      this.options = extend(defaultOptions, userOptions);
    };
    ObserveImage2.prototype.bindEventsToWrapper = function() {
      var wrapper = this.scroll.scroller.wrapper;
      this.imageLoadEventRegister = new EventRegister(wrapper, [
        {
          name: "load",
          handler: this.load.bind(this),
          capture: true
        }
      ]);
      this.imageErrorEventRegister = new EventRegister(wrapper, [
        {
          name: "error",
          handler: this.load.bind(this),
          capture: true
        }
      ]);
    };
    ObserveImage2.prototype.load = function(e) {
      var _this2 = this;
      var target = e.target;
      var debounceTime = this.options.debounceTime;
      if (target && isImageTag(target)) {
        if (debounceTime === 0) {
          this.scroll.refresh();
        } else {
          clearTimeout(this.refreshTimer);
          this.refreshTimer = window.setTimeout(function() {
            _this2.scroll.refresh();
          }, this.options.debounceTime);
        }
      }
    };
    ObserveImage2.pluginName = "observeImage";
    return ObserveImage2;
  }()
);
var resolveRatioOption = function(ratioConfig) {
  var ret = {
    ratioX: 0,
    ratioY: 0
  };
  if (!ratioConfig) {
    return ret;
  }
  if (typeof ratioConfig === "number") {
    ret.ratioX = ret.ratioY = ratioConfig;
  } else if (typeof ratioConfig === "object" && ratioConfig) {
    ret.ratioX = ratioConfig.x || 0;
    ret.ratioY = ratioConfig.y || 0;
  }
  return ret;
};
var handleBubbleAndCancelable = function(e) {
  e.preventDefault();
  e.stopPropagation();
};
var Indicator$1 = (
  /** @class */
  function() {
    function Indicator2(scroll, options) {
      this.scroll = scroll;
      this.options = options;
      this.currentPos = {
        x: 0,
        y: 0
      };
      this.hooksFn = [];
      this.handleDOM();
      this.handleHooks();
      this.handleInteractive();
    }
    Indicator2.prototype.handleDOM = function() {
      var _a2 = this.options, relationElement = _a2.relationElement, _b2 = _a2.relationElementHandleElementIndex, relationElementHandleElementIndex = _b2 === void 0 ? 0 : _b2;
      this.wrapper = relationElement;
      this.indicatorEl = this.wrapper.children[relationElementHandleElementIndex];
    };
    Indicator2.prototype.handleHooks = function() {
      var _this2 = this;
      var scroll = this.scroll;
      var scrollHooks = scroll.hooks;
      var translaterHooks = scroll.scroller.translater.hooks;
      var animaterHooks = scroll.scroller.animater.hooks;
      this.registerHooks(scrollHooks, scrollHooks.eventTypes.refresh, this.refresh);
      this.registerHooks(translaterHooks, translaterHooks.eventTypes.translate, function(pos) {
        _this2.updatePosition(pos);
      });
      this.registerHooks(animaterHooks, animaterHooks.eventTypes.time, this.transitionTime);
      this.registerHooks(animaterHooks, animaterHooks.eventTypes.timeFunction, this.transitionTimingFunction);
    };
    Indicator2.prototype.transitionTime = function(time) {
      if (time === void 0) {
        time = 0;
      }
      this.indicatorEl.style[style.transitionDuration] = time + "ms";
    };
    Indicator2.prototype.transitionTimingFunction = function(easing) {
      this.indicatorEl.style[style.transitionTimingFunction] = easing;
    };
    Indicator2.prototype.handleInteractive = function() {
      if (this.options.interactive !== false) {
        this.registerEvents();
      }
    };
    Indicator2.prototype.registerHooks = function(hooks, name, handler) {
      hooks.on(name, handler, this);
      this.hooksFn.push([hooks, name, handler]);
    };
    Indicator2.prototype.registerEvents = function() {
      var _a2 = this.scroll.options, disableMouse = _a2.disableMouse, disableTouch = _a2.disableTouch;
      var startEvents = [];
      var moveEvents = [];
      var endEvents = [];
      if (!disableMouse) {
        startEvents.push({
          name: "mousedown",
          handler: this.start.bind(this)
        });
        moveEvents.push({
          name: "mousemove",
          handler: this.move.bind(this)
        });
        endEvents.push({
          name: "mouseup",
          handler: this.end.bind(this)
        });
      }
      if (!disableTouch) {
        startEvents.push({
          name: "touchstart",
          handler: this.start.bind(this)
        });
        moveEvents.push({
          name: "touchmove",
          handler: this.move.bind(this)
        });
        endEvents.push({
          name: "touchend",
          handler: this.end.bind(this)
        }, {
          name: "touchcancel",
          handler: this.end.bind(this)
        });
      }
      this.startEventRegister = new EventRegister(this.indicatorEl, startEvents);
      this.moveEventRegister = new EventRegister(window, moveEvents);
      this.endEventRegister = new EventRegister(window, endEvents);
    };
    Indicator2.prototype.refresh = function() {
      var _a2 = this.scroll, x = _a2.x, y = _a2.y, hasHorizontalScroll = _a2.hasHorizontalScroll, hasVerticalScroll = _a2.hasVerticalScroll, maxBScrollX = _a2.maxScrollX, maxBScrollY = _a2.maxScrollY;
      var _b2 = resolveRatioOption(this.options.ratio), ratioX = _b2.ratioX, ratioY = _b2.ratioY;
      var _c2 = getClientSize(this.wrapper), wrapperWidth = _c2.width, wrapperHeight = _c2.height;
      var _d2 = getRect(this.indicatorEl), indicatorWidth = _d2.width, indicatorHeight = _d2.height;
      if (hasHorizontalScroll) {
        this.maxScrollX = wrapperWidth - indicatorWidth;
        this.translateXSign = this.maxScrollX > 0 ? -1 : 1;
        this.minScrollX = 0;
        this.ratioX = ratioX ? ratioX : Math.abs(this.maxScrollX / maxBScrollX);
      }
      if (hasVerticalScroll) {
        this.maxScrollY = wrapperHeight - indicatorHeight;
        this.translateYSign = this.maxScrollY > 0 ? -1 : 1;
        this.minScrollY = 0;
        this.ratioY = ratioY ? ratioY : Math.abs(this.maxScrollY / maxBScrollY);
      }
      this.updatePosition({
        x,
        y
      });
    };
    Indicator2.prototype.start = function(e) {
      if (this.BScrollIsDisabled()) {
        return;
      }
      var point = e.touches ? e.touches[0] : e;
      handleBubbleAndCancelable(e);
      this.initiated = true;
      this.moved = false;
      this.lastPointX = point.pageX;
      this.lastPointY = point.pageY;
      this.startTime = getNow();
      this.scroll.scroller.hooks.trigger(this.scroll.scroller.hooks.eventTypes.beforeScrollStart);
    };
    Indicator2.prototype.BScrollIsDisabled = function() {
      return !this.scroll.enabled;
    };
    Indicator2.prototype.move = function(e) {
      if (!this.initiated) {
        return;
      }
      var point = e.touches ? e.touches[0] : e;
      var pointX = point.pageX;
      var pointY = point.pageY;
      handleBubbleAndCancelable(e);
      var deltaX = pointX - this.lastPointX;
      var deltaY = pointY - this.lastPointY;
      this.lastPointX = pointX;
      this.lastPointY = pointY;
      if (!this.moved && !this.indicatorNotMoved(deltaX, deltaY)) {
        this.moved = true;
        this.scroll.scroller.hooks.trigger(this.scroll.scroller.hooks.eventTypes.scrollStart);
      }
      if (this.moved) {
        var newPos = this.getBScrollPosByRatio(this.currentPos, deltaX, deltaY);
        this.syncBScroll(newPos);
      }
    };
    Indicator2.prototype.end = function(e) {
      if (!this.initiated) {
        return;
      }
      this.initiated = false;
      handleBubbleAndCancelable(e);
      if (this.moved) {
        var _a2 = this.scroll, x = _a2.x, y = _a2.y;
        this.scroll.scroller.hooks.trigger(this.scroll.scroller.hooks.eventTypes.scrollEnd, {
          x,
          y
        });
      }
    };
    Indicator2.prototype.getBScrollPosByRatio = function(currentPos, deltaX, deltaY) {
      var currentX = currentPos.x, currentY = currentPos.y;
      var _a2 = this.scroll, hasHorizontalScroll = _a2.hasHorizontalScroll, hasVerticalScroll = _a2.hasVerticalScroll, BScrollMinScrollX = _a2.minScrollX, BScrollMaxScrollX = _a2.maxScrollX, BScrollMinScrollY = _a2.minScrollY, BScrollMaxScrollY = _a2.maxScrollY;
      var _b2 = this.scroll, x = _b2.x, y = _b2.y;
      if (hasHorizontalScroll) {
        var newPosX = between(currentX + deltaX, Math.min(this.minScrollX, this.maxScrollX), Math.max(this.minScrollX, this.maxScrollX));
        var roundX = Math.round(newPosX / this.ratioX * this.translateXSign);
        x = between(roundX, BScrollMaxScrollX, BScrollMinScrollX);
      }
      if (hasVerticalScroll) {
        var newPosY = between(currentY + deltaY, Math.min(this.minScrollY, this.maxScrollY), Math.max(this.minScrollY, this.maxScrollY));
        var roundY = Math.round(newPosY / this.ratioY * this.translateYSign);
        y = between(roundY, BScrollMaxScrollY, BScrollMinScrollY);
      }
      return { x, y };
    };
    Indicator2.prototype.indicatorNotMoved = function(deltaX, deltaY) {
      var _a2 = this.currentPos, x = _a2.x, y = _a2.y;
      var xNotMoved = x === this.minScrollX && deltaX <= 0 || x === this.maxScrollX && deltaX >= 0;
      var yNotMoved = y === this.minScrollY && deltaY <= 0 || y === this.maxScrollY && deltaY >= 0;
      return xNotMoved && yNotMoved;
    };
    Indicator2.prototype.syncBScroll = function(newPos) {
      var timestamp = getNow();
      var _a2 = this.scroll, options = _a2.options, scroller = _a2.scroller;
      var probeType = options.probeType, momentumLimitTime = options.momentumLimitTime;
      scroller.translater.translate(newPos);
      if (timestamp - this.startTime > momentumLimitTime) {
        this.startTime = timestamp;
        if (probeType === 1) {
          scroller.hooks.trigger(scroller.hooks.eventTypes.scroll, newPos);
        }
      }
      if (probeType > 1) {
        scroller.hooks.trigger(scroller.hooks.eventTypes.scroll, newPos);
      }
    };
    Indicator2.prototype.updatePosition = function(BScrollPos) {
      var newIndicatorPos = this.getIndicatorPosByRatio(BScrollPos);
      this.applyTransformProperty(newIndicatorPos);
      this.currentPos = __assign({}, newIndicatorPos);
    };
    Indicator2.prototype.applyTransformProperty = function(pos) {
      var translateZ = this.scroll.options.translateZ;
      var transformProperties = [
        "translateX(" + pos.x + "px)",
        "translateY(" + pos.y + "px)",
        "" + translateZ
      ];
      this.indicatorEl.style[style.transform] = transformProperties.join(" ");
    };
    Indicator2.prototype.getIndicatorPosByRatio = function(BScrollPos) {
      var x = BScrollPos.x, y = BScrollPos.y;
      var _a2 = this.scroll, hasHorizontalScroll = _a2.hasHorizontalScroll, hasVerticalScroll = _a2.hasVerticalScroll;
      var position = __assign({}, this.currentPos);
      if (hasHorizontalScroll) {
        var roundX = Math.round(this.ratioX * x * this.translateXSign);
        position.x = between(roundX, Math.min(this.minScrollX, this.maxScrollX), Math.max(this.minScrollX, this.maxScrollX));
      }
      if (hasVerticalScroll) {
        var roundY = Math.round(this.ratioY * y * this.translateYSign);
        position.y = between(roundY, Math.min(this.minScrollY, this.maxScrollY), Math.max(this.minScrollY, this.maxScrollY));
      }
      return position;
    };
    Indicator2.prototype.destroy = function() {
      if (this.options.interactive !== false) {
        this.startEventRegister.destroy();
        this.moveEventRegister.destroy();
        this.endEventRegister.destroy();
      }
      this.hooksFn.forEach(function(item) {
        var hooks = item[0];
        var hooksName = item[1];
        var handlerFn = item[2];
        hooks.off(hooksName, handlerFn);
      });
      this.hooksFn.length = 0;
    };
    return Indicator2;
  }()
);
var Indicators = (
  /** @class */
  function() {
    function Indicators2(scroll) {
      this.scroll = scroll;
      this.options = [];
      this.indicators = [];
      this.handleOptions();
      this.handleHooks();
    }
    Indicators2.prototype.handleOptions = function() {
      var UserIndicatorsOptions = this.scroll.options.indicators;
      assert(Array.isArray(UserIndicatorsOptions), "'indicators' must be an array.");
      for (var _i = 0, UserIndicatorsOptions_1 = UserIndicatorsOptions; _i < UserIndicatorsOptions_1.length; _i++) {
        var indicatorOptions = UserIndicatorsOptions_1[_i];
        assert(!!indicatorOptions.relationElement, "'relationElement' must be a HTMLElement.");
        this.createIndicators(indicatorOptions);
      }
    };
    Indicators2.prototype.createIndicators = function(options) {
      this.indicators.push(new Indicator$1(this.scroll, options));
    };
    Indicators2.prototype.handleHooks = function() {
      var _this2 = this;
      var scrollHooks = this.scroll.hooks;
      scrollHooks.on(scrollHooks.eventTypes.destroy, function() {
        for (var _i = 0, _a2 = _this2.indicators; _i < _a2.length; _i++) {
          var indicator = _a2[_i];
          indicator.destroy();
        }
        _this2.indicators = [];
      });
    };
    Indicators2.pluginName = "indicators";
    return Indicators2;
  }()
);
BScroll.use(MouseWheel).use(ObserveDOM).use(PullDown).use(PullUp).use(ScrollBar).use(Slide).use(Wheel).use(Zoom).use(NestedScroll).use(InfinityScroll).use(Movable).use(ObserveImage).use(Indicators);
var better_scroll_esm_default = BScroll;

// node_modules/zarm/es/wheel/Wheel.js
var import_isEqual = __toESM(require_isEqual());

// node_modules/zarm/es/utils/validate.js
var isArray = function isArray2(val) {
  return Object.prototype.toString.call(val) === "[object Array]";
};
var isString = function isString2(val) {
  return Object.prototype.toString.call(val) === "[object String]";
};
var isObject = function isObject2(val) {
  return Object.prototype.toString.call(val) === "[object Object]";
};
var isCascader = function isCascader2(_ref) {
  var dataSource = _ref.dataSource;
  return dataSource && dataSource[0] && !isArray(dataSource[0]);
};

// node_modules/zarm/es/wheel/Wheel.js
function _createSuper20(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct20();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct20() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getValue3 = function getValue4(props, defaultValue) {
  if ("value" in props) {
    return props.value;
  }
  if ("defaultValue" in props) {
    return props.defaultValue;
  }
  if (isArray(props.dataSource) && props.dataSource[0]) {
    return props.dataSource[0][props.valueMember];
  }
  return defaultValue;
};
var Wheel2 = function(_Component) {
  _inherits(Wheel3, _Component);
  var _super = _createSuper20(Wheel3);
  function Wheel3() {
    var _this2;
    _classCallCheck(this, Wheel3);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.BScroll = void 0;
    _this2.wrapper = void 0;
    _this2.handleScrollEnd = function() {
      var _this$props = _this2.props, curDataSource = _this$props.dataSource, valueMember = _this$props.valueMember;
      var index = _this2.BScroll.getSelectedIndex();
      var child = curDataSource[index];
      if (child) {
        _this2.fireValueChange(child[valueMember]);
      }
    };
    _this2.getSelectedIndex = function(value, dataSource) {
      var valueMember = _this2.props.valueMember;
      var index = 0;
      if (dataSource) {
        dataSource.some(function(item, i) {
          if (item[valueMember] === value) {
            index = i;
            return true;
          }
          return false;
        });
      }
      return index;
    };
    _this2.fireValueChange = function(value) {
      var currentValue = getValue3(_this2.props);
      if (value === currentValue) {
        return;
      }
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(value);
      }
    };
    return _this2;
  }
  _createClass(Wheel3, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, dataSource = _this$props2.dataSource, disabled = _this$props2.disabled;
      var value = getValue3(this.props);
      var initIndex = this.getSelectedIndex(value, dataSource);
      this.BScroll = new better_scroll_esm_default(this.wrapper, {
        wheel: {
          selectedIndex: initIndex,
          wheelWrapperClass: "".concat(prefixCls, "-content"),
          wheelItemClass: "".concat(prefixCls, "-item")
        },
        probeType: 3
      });
      disabled && this.BScroll.disable();
      this.BScroll.on("scrollEnd", function() {
        _this2.handleScrollEnd();
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props3 = this.props, value = _this$props3.value, dataSource = _this$props3.dataSource, disabled = _this$props3.disabled, stopScroll = _this$props3.stopScroll;
      disabled && this.BScroll.disable();
      if (!(0, import_isEqual.default)(prevProps.dataSource, dataSource)) {
        this.BScroll.refresh();
      }
      var oldIndex = this.getSelectedIndex(prevProps.value, prevProps.dataSource);
      var newIndex = this.getSelectedIndex(value, dataSource);
      if (newIndex !== oldIndex) {
        this.BScroll.wheelTo(newIndex);
      }
      if (stopScroll && prevProps.stopScroll !== stopScroll) {
        this.BScroll.stop();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.BScroll.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, className = _this$props4.className, valueMember = _this$props4.valueMember, dataSource = _this$props4.dataSource, itemRender5 = _this$props4.itemRender, disabled = _this$props4.disabled;
      var value = getValue3(this.props);
      var items = dataSource.map(function(item, index) {
        var _classnames;
        var itemCls = (0, import_classnames15.default)("".concat(prefixCls, "__item"), (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "__item--selected"), value === item[valueMember]), _defineProperty(_classnames, "".concat(prefixCls, "__item--disabled"), disabled), _classnames));
        return import_react21.default.createElement("div", {
          key: +index,
          className: itemCls
        }, itemRender5(item));
      });
      var rollerCls = (0, import_classnames15.default)(prefixCls, className);
      return import_react21.default.createElement("div", {
        className: rollerCls,
        ref: function ref(wrapper) {
          _this3.wrapper = wrapper;
        }
      }, import_react21.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, items));
    }
  }]);
  return Wheel3;
}(import_react21.Component);
Wheel2.defaultProps = {
  prefixCls: "za-wheel",
  dataSource: [],
  valueMember: "value",
  itemRender: function itemRender(item) {
    return item.label;
  },
  stopScroll: false
};

// node_modules/zarm/es/wheel/index.js
var wheel_default = Wheel2;

// node_modules/zarm/es/picker-view/utils/parseProps.js
var isValueValid = function isValueValid2(value) {
  var valueArray = [].concat(value);
  return valueArray.some(function(item) {
    return !!item || item === 0 || item === false;
  });
};
var getValues = function getValues2(props, defaultValue) {
  if ("value" in props && isValueValid(props.value)) {
    return [].concat(props.value);
  }
  if ("defaultValue" in props && isValueValid(props.defaultValue)) {
    return [].concat(props.defaultValue);
  }
  if ("wheelDefaultValue" in props && isValueValid(props.wheelDefaultValue)) {
    return [].concat(props.wheelDefaultValue);
  }
  return defaultValue;
};
var normalState = function normalState2(props) {
  var valueMember = props.valueMember, dataSource = props.dataSource;
  var value = getValues(props, dataSource.map(function(item) {
    return item[0] && item[0][valueMember];
  }));
  return {
    value,
    objValue: props.dataSource.map(function(item, index) {
      return item.filter(function(d) {
        return d[valueMember] === value[index];
      })[0];
    }),
    dataSource: props.dataSource
  };
};
var cascaderState = function cascaderState2(props) {
  var valueMember = props.valueMember, cols = props.cols;
  var newValues = getValues(props, []);
  var newObjValues = [];
  var newDateSource = [];
  var parseLevel = function parseLevel2(_ref) {
    var _ref$level = _ref.level, level = _ref$level === void 0 ? 0 : _ref$level, dataSource = _ref.dataSource;
    newDateSource[level] = dataSource.map(function(item, index) {
      var children = item.children, others = _objectWithoutProperties(item, ["children"]);
      if (
        // eslint-disable-next-line operator-linebreak
        isValueValid(newValues[level]) && item[valueMember] === newValues[level] || !isValueValid(newValues[level]) && index === 0
      ) {
        newValues[level] = item[valueMember];
        newObjValues[level] = others;
        if (isArray(children) && children.length > 0 && level + 1 < cols) {
          parseLevel2({
            level: level + 1,
            dataSource: children
          });
        }
      }
      return others;
    });
    return newValues;
  };
  newValues = parseLevel({
    dataSource: props.dataSource
  });
  return {
    value: newValues,
    objValue: newObjValues,
    dataSource: newDateSource
  };
};
var parseProps_default = {
  getSource: function getSource(props) {
    return isCascader(props) ? cascaderState(props) : normalState(props);
  },
  isValueValid
};

// node_modules/zarm/es/picker-view/PickerView.js
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper21(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct21();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct21() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var PickerView = function(_Component) {
  _inherits(PickerView2, _Component);
  var _super = _createSuper21(PickerView2);
  function PickerView2() {
    var _this2;
    _classCallCheck(this, PickerView2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = parseProps_default.getSource(_this2.props);
    _this2.onValueChange = function(selected, level) {
      var value = _this2.state.value.slice();
      var _this$props = _this2.props, dataSource = _this$props.dataSource, onChange2 = _this$props.onChange, valueMember = _this$props.valueMember, cols = _this$props.cols;
      if (isCascader({
        dataSource
      })) {
        value.length = level + 1;
      }
      value[level] = selected;
      var newState = parseProps_default.getSource({
        dataSource,
        value,
        valueMember,
        cols
      });
      _this2.setState(newState);
      if (typeof onChange2 === "function") {
        onChange2(newState.objValue, level);
      }
    };
    _this2.renderWheel = function() {
      var _this$props2 = _this2.props, valueMember = _this$props2.valueMember, itemRender5 = _this$props2.itemRender, disabled = _this$props2.disabled, stopScroll = _this$props2.stopScroll;
      var _this$state = _this2.state, dataSource = _this$state.dataSource, value = _this$state.value;
      return dataSource.map(function(item, index) {
        return import_react22.default.createElement(wheel_default, {
          key: +index,
          dataSource: item,
          value: value[index],
          valueMember,
          itemRender: itemRender5,
          disabled,
          onChange: function onChange2(selected) {
            return _this2.onValueChange(selected, index);
          },
          stopScroll
        });
      });
    };
    return _this2;
  }
  _createClass(PickerView2, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className;
      var cls = (0, import_classnames16.default)(prefixCls, className);
      return import_react22.default.createElement("div", {
        className: cls
      }, import_react22.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, this.renderWheel()), import_react22.default.createElement("div", {
        className: "".concat(prefixCls, "__mask ").concat(prefixCls, "__mask--top")
      }), import_react22.default.createElement("div", {
        className: "".concat(prefixCls, "__mask ").concat(prefixCls, "__mask--bottom")
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: (
      // TODO: is this method still be used?
      function getDerivedStateFromProps(props, state) {
        if (!(0, import_isEqual2.default)(removeFnFromProps_default(props, ["onChange"]), removeFnFromProps_default(state.prevProps, ["onChange"]))) {
          return _objectSpread3({
            prevProps: props
          }, parseProps_default.getSource(props));
        }
        return null;
      }
    )
  }]);
  return PickerView2;
}(import_react22.Component);
PickerView.defaultProps = {
  prefixCls: "za-picker-view",
  dataSource: [],
  cols: Infinity,
  valueMember: "value",
  itemRender: function itemRender2(data) {
    return data.label;
  },
  disabled: false
};

// node_modules/zarm/es/picker-view/index.js
var picker_view_default = PickerView;

// node_modules/zarm/es/date-picker-view/utils/parseState.js
var isExtendDate = function isExtendDate2(date) {
  if (date instanceof Date) {
    return date;
  }
  if (!date) {
    return "";
  }
  return new Date(date.toString().replace(/-/g, "/"));
};
var parseState3 = function parseState4(props) {
  var date = props.value && isExtendDate(props.value);
  var defaultDate = props.defaultValue && isExtendDate(props.defaultValue);
  var wheelDefault = props.wheelDefaultValue && isExtendDate(props.wheelDefaultValue);
  return {
    date: date || defaultDate,
    wheelDefault
  };
};

// node_modules/zarm/es/date-picker-view/utils/date.js
var getGregorianCalendar = function getGregorianCalendar2(year, month, day, hour, minutes, seconds) {
  return new Date(year, month, day, hour, minutes, seconds);
};
var cloneDate2 = function cloneDate3(date) {
  return /* @__PURE__ */ new Date(+date);
};
function getDaysInMonth2(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
}
var setMonth = function setMonth2(date, month) {
  date.setDate(Math.min(date.getDate(), getDaysInMonth2(new Date(date.getFullYear(), month))));
  date.setMonth(month);
};
var pad = function pad2(n) {
  return n < 10 ? "0".concat(n) : n;
};

// node_modules/zarm/es/date-picker-view/DatePickerView.js
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys4(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper22(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct22();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct22() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DATETIME = "datetime";
var DATE = "date";
var TIME = "time";
var MONTH = "month";
var YEAR = "year";
var ONE_DAY = 24 * 60 * 60 * 1e3;
var DatePickerView = function(_Component) {
  _inherits(DatePickerView2, _Component);
  var _super = _createSuper22(DatePickerView2);
  function DatePickerView2(props) {
    var _this2;
    _classCallCheck(this, DatePickerView2);
    _this2 = _super.call(this, props);
    _this2.onValueChange = function(selected, index) {
      var onChange2 = _this2.props.onChange;
      var newValue = _this2.getNewDate(selected, index);
      _this2.setState({
        date: newValue
      });
      if (typeof onChange2 === "function") {
        onChange2(newValue);
      }
    };
    _this2.getNewDate = function(values, index) {
      var _this$props = _this2.props, mode = _this$props.mode, valueMember = _this$props.valueMember;
      var value = parseInt(values[index][valueMember], 10);
      var newValue = cloneDate2(_this2.getDate());
      if (mode === YEAR || mode === MONTH || mode === DATE || mode === DATETIME) {
        switch (index) {
          case 0:
            newValue.setFullYear(value);
            break;
          case 1:
            setMonth(newValue, value);
            break;
          case 2:
            newValue.setDate(value);
            break;
          case 3:
            newValue.setHours(value);
            break;
          case 4:
            newValue.setMinutes(value);
            break;
          default:
            break;
        }
      } else {
        switch (index) {
          case 0:
            newValue.setHours(value);
            break;
          case 1:
            newValue.setMinutes(value);
            break;
          default:
            break;
        }
      }
      return _this2.clipDate(newValue);
    };
    _this2.getDateData = function() {
      var _this$props2 = _this2.props, locale = _this$props2.locale, mode = _this$props2.mode;
      var date = _this2.getDate();
      var yearCol = [];
      var monthCol = [];
      var dayCol = [];
      var selectYear = date.getFullYear();
      var selectMonth = date.getMonth();
      var minYear = _this2.getMinYear();
      var maxYear = _this2.getMaxYear();
      for (var i = minYear; i <= maxYear; i += 1) {
        yearCol.push({
          label: i + locale.year,
          value: i
        });
      }
      if (mode === YEAR) {
        return [yearCol];
      }
      var minMonth = 0;
      var maxMonth = 11;
      if (selectYear === minYear) {
        minMonth = _this2.getMinMonth();
      }
      if (selectYear === maxYear) {
        maxMonth = _this2.getMaxMonth();
      }
      for (var _i = minMonth; _i <= maxMonth; _i += 1) {
        monthCol.push({
          label: _i + 1 + locale.month,
          value: _i
        });
      }
      if (mode === MONTH) {
        return [yearCol, monthCol];
      }
      var minDay = 1;
      var maxDay = getDaysInMonth2(date);
      if (selectYear === minYear && selectMonth === minMonth) {
        minDay = _this2.getMinDay();
      }
      if (selectYear === maxYear && selectMonth === maxMonth) {
        maxDay = _this2.getMaxDay();
      }
      for (var _i2 = minDay; _i2 <= maxDay; _i2 += 1) {
        dayCol.push({
          label: _i2 + locale.day,
          value: _i2
        });
      }
      if (mode === DATE) {
        return [yearCol, monthCol, dayCol];
      }
      return [yearCol, monthCol, dayCol];
    };
    _this2.getTimeData = function() {
      var _this$props3 = _this2.props, locale = _this$props3.locale, mode = _this$props3.mode, minuteStep = _this$props3.minuteStep;
      var date = _this2.getDate();
      var hourCol = [];
      var minuteCol = [];
      var minHour = 0;
      var maxHour = 23;
      var minMinute = 0;
      var maxMinute = 59;
      var minDateHour = _this2.getMinHour();
      var maxDateHour = _this2.getMaxHour();
      var minDateMinute = _this2.getMinMinute();
      var maxDateMinute = _this2.getMaxMinute();
      var selectHour = date.getHours();
      if (mode === DATETIME) {
        var selectYear = date.getFullYear();
        var selectMonth = date.getMonth();
        var selectDay = date.getDate();
        var minYear = _this2.getMinYear();
        var maxYear = _this2.getMaxYear();
        var minMonth = _this2.getMinMonth();
        var maxMonth = _this2.getMaxMonth();
        var minDay = _this2.getMinDay();
        var maxDay = _this2.getMaxDay();
        if (selectYear === minYear && selectMonth === minMonth && selectDay === minDay) {
          minHour = minDateHour;
          if (selectHour === minHour) {
            minMinute = minDateMinute;
          }
        }
        if (selectYear === maxYear && selectMonth === maxMonth && selectDay === maxDay) {
          maxHour = maxDateHour;
          if (selectHour === maxHour) {
            maxMinute = maxDateMinute;
          }
        }
      } else {
        minHour = minDateHour;
        if (selectHour === minHour) {
          minMinute = minDateMinute;
        }
        maxHour = maxDateHour;
        if (selectHour === maxHour) {
          maxMinute = maxDateMinute;
        }
      }
      for (var i = minHour; i <= maxHour; i += 1) {
        hourCol.push({
          label: locale.hour ? i + locale.hour : pad(i),
          value: i
        });
      }
      for (var _i3 = minMinute; _i3 <= maxMinute; _i3 += minuteStep) {
        minuteCol.push({
          label: locale.minute ? _i3 + locale.minute : pad(_i3),
          value: _i3
        });
      }
      return [hourCol, minuteCol];
    };
    _this2.getDefaultDate = function() {
      var _this$props4 = _this2.props, min = _this$props4.min, mode = _this$props4.mode, minuteStep = _this$props4.minuteStep;
      if (min && _this2.getMinDate().getTime() >= Date.now()) {
        return _this2.getMinDate();
      }
      if (minuteStep && minuteStep > 1 && (mode === DATETIME || mode === TIME)) {
        return new Date((/* @__PURE__ */ new Date()).setMinutes(0));
      }
      return /* @__PURE__ */ new Date();
    };
    _this2.getMinYear = function() {
      return _this2.getMinDate().getFullYear();
    };
    _this2.getMaxYear = function() {
      return _this2.getMaxDate().getFullYear();
    };
    _this2.getMinMonth = function() {
      return _this2.getMinDate().getMonth();
    };
    _this2.getMaxMonth = function() {
      return _this2.getMaxDate().getMonth();
    };
    _this2.getMinDay = function() {
      return _this2.getMinDate().getDate();
    };
    _this2.getMaxDay = function() {
      return _this2.getMaxDate().getDate();
    };
    _this2.getMinHour = function() {
      return _this2.getMinDate().getHours();
    };
    _this2.getMaxHour = function() {
      return _this2.getMaxDate().getHours();
    };
    _this2.getMinMinute = function() {
      return _this2.getMinDate().getMinutes();
    };
    _this2.getMaxMinute = function() {
      return _this2.getMaxDate().getMinutes();
    };
    _this2.getMinDate = function() {
      var minDate = isExtendDate(_this2.props.min);
      return minDate || _this2.getDefaultMinDate();
    };
    _this2.getMaxDate = function() {
      var maxDate = isExtendDate(_this2.props.max);
      return maxDate || _this2.getDefaultMaxDate();
    };
    _this2.getDefaultMinDate = function() {
      return getGregorianCalendar(1900, 0, 1, 0, 0, 0);
    };
    _this2.getDefaultMaxDate = function() {
      return getGregorianCalendar(2030, 11, 30, 23, 59, 59);
    };
    _this2.clipDate = function(date) {
      var mode = _this2.props.mode;
      var minDate = _this2.getMinDate();
      var maxDate = _this2.getMaxDate();
      if (mode === DATETIME) {
        if (date < minDate) {
          return cloneDate2(minDate);
        }
        if (date > maxDate) {
          return cloneDate2(maxDate);
        }
      } else if (mode === DATE || mode === MONTH || mode === YEAR) {
        if (+date + ONE_DAY <= +minDate) {
          return cloneDate2(minDate);
        }
        if (date >= +maxDate + ONE_DAY) {
          return cloneDate2(maxDate);
        }
      } else {
        var maxHour = maxDate.getHours();
        var maxMinutes = maxDate.getMinutes();
        var minHour = minDate.getHours();
        var minMinutes = minDate.getMinutes();
        var hour = date.getHours();
        var minutes = date.getMinutes();
        if (hour < minHour || hour === minHour && minutes < minMinutes) {
          return cloneDate2(minDate);
        }
        if (hour > maxHour || hour === maxHour && minutes > maxMinutes) {
          return cloneDate2(maxDate);
        }
      }
      return date;
    };
    _this2.state = parseState3(props);
    var onInit2 = _this2.props.onInit;
    if (typeof onInit2 === "function") {
      onInit2(_this2.getDate());
    }
    _this2.getColsValue = _this2.getColsValue.bind(_assertThisInitialized(_this2));
    return _this2;
  }
  _createClass(DatePickerView2, [{
    key: "getColsValue",
    value: function getColsValue() {
      var mode = this.props.mode;
      var date = this.getDate();
      var dataSource = [];
      var value = [];
      if (mode === YEAR) {
        dataSource = this.getDateData();
        value = [date.getFullYear()];
      }
      if (mode === MONTH) {
        dataSource = this.getDateData();
        value = [date.getFullYear(), date.getMonth()];
      }
      if (mode === DATE || mode === DATETIME) {
        dataSource = this.getDateData();
        value = [date.getFullYear(), date.getMonth(), date.getDate()];
      }
      if (mode === DATETIME) {
        dataSource = dataSource.concat(this.getTimeData());
        value = value.concat([date.getHours(), date.getMinutes()]);
      }
      if (mode === TIME) {
        dataSource = this.getTimeData();
        value = [date.getHours(), date.getMinutes()];
      }
      return {
        dataSource,
        value
      };
    }
  }, {
    key: "getDate",
    value: function getDate() {
      var _this$state = this.state, date = _this$state.date, wheelDefault = _this$state.wheelDefault;
      return this.clipDate(date || wheelDefault || this.getDefaultDate());
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props, prefixCls = _this$props5.prefixCls, className = _this$props5.className, onInit2 = _this$props5.onInit, defaultValue = _this$props5.defaultValue, wheelDefaultValue = _this$props5.wheelDefaultValue, others = _objectWithoutProperties(_this$props5, ["prefixCls", "className", "onInit", "defaultValue", "wheelDefaultValue"]);
      var _this$getColsValue = this.getColsValue(), dataSource = _this$getColsValue.dataSource, value = _this$getColsValue.value;
      return import_react23.default.createElement(picker_view_default, _extends({}, others, {
        className,
        prefixCls,
        dataSource,
        value,
        onChange: this.onValueChange
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!(0, import_isEqual3.default)(removeFnFromProps_default(props, ["onChange", "onInit", "onTransition"]), removeFnFromProps_default(state.prevProps, ["onChange", "onInit", "onTransition"]))) {
        return _objectSpread4({
          prevProps: props
        }, parseState3(props));
      }
      return null;
    }
  }]);
  return DatePickerView2;
}(import_react23.Component);
DatePickerView.defaultProps = {
  prefixCls: "za-date-picker-view",
  mode: DATE,
  disabled: false,
  minuteStep: 1,
  valueMember: "value",
  stopScroll: false
};

// node_modules/zarm/es/date-picker-view/index.js
var date_picker_view_default = config_receiver_default("DatePickerView")(DatePickerView);

// node_modules/zarm/es/date-picker/DatePicker.js
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys5(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper23(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct23();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct23() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DatePicker = function(_Component) {
  _inherits(DatePicker2, _Component);
  var _super = _createSuper23(DatePicker2);
  function DatePicker2(props) {
    var _this2;
    _classCallCheck(this, DatePicker2);
    _this2 = _super.call(this, props);
    _this2.onCancel = function() {
      var onCancel3 = _this2.props.onCancel;
      if (typeof onCancel3 === "function") {
        onCancel3();
      }
    };
    _this2.onOk = function() {
      var onOk = _this2.props.onOk;
      _this2.setState({
        stopScroll: true
      }, function() {
        _this2.setState({
          stopScroll: false
        }, function() {
          if (typeof onOk === "function") {
            onOk(_this2.state.date);
          }
        });
      });
    };
    _this2.onInit = function(selected) {
      _this2.setState({
        date: selected
      });
    };
    _this2.onValueChange = function(newValue) {
      var onChange2 = _this2.props.onChange;
      _this2.setState({
        date: newValue
      });
      if (typeof onChange2 === "function") {
        onChange2(newValue);
      }
    };
    _this2.state = _objectSpread5(_objectSpread5({}, parseState3(props)), {}, {
      stopScroll: false
    });
    return _this2;
  }
  _createClass(DatePicker2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, title = _this$props.title, okText = _this$props.okText, cancelText = _this$props.cancelText, locale = _this$props.locale, mountContainer = _this$props.mountContainer, maskClosable = _this$props.maskClosable, onOk = _this$props.onOk, onCancel3 = _this$props.onCancel, onInit2 = _this$props.onInit, visible = _this$props.visible, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "title", "okText", "cancelText", "locale", "mountContainer", "maskClosable", "onOk", "onCancel", "onInit", "visible"]);
      var _this$state = this.state, date = _this$state.date, stopScroll = _this$state.stopScroll;
      var noop3 = function noop4() {
      };
      return import_react24.default.createElement(popup_default, {
        className,
        visible,
        onMaskClick: maskClosable ? this.onCancel : noop3,
        mountContainer,
        destroy: true
      }, import_react24.default.createElement("div", {
        className: prefixCls,
        onClick: function onClick2(e) {
          e.stopPropagation();
        }
      }, import_react24.default.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, import_react24.default.createElement("div", {
        className: "".concat(prefixCls, "__cancel"),
        onClick: this.onCancel
      }, cancelText || locale.cancelText), import_react24.default.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title || locale.title), import_react24.default.createElement("div", {
        className: "".concat(prefixCls, "__submit"),
        onClick: this.onOk
      }, okText || locale.okText)), import_react24.default.createElement(date_picker_view_default, _extends({}, others, {
        className,
        value: date,
        onInit: this.onInit,
        onChange: this.onValueChange,
        stopScroll
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!(0, import_isEqual4.default)(removeFnFromProps_default(props, ["onOk", "onCancel", "onChange"]), removeFnFromProps_default(state.prevProps, ["onOk", "onCancel", "onChange"]))) {
        return _objectSpread5({
          prevProps: props
        }, parseState3(props));
      }
      return null;
    }
  }]);
  return DatePicker2;
}(import_react24.Component);
DatePicker.defaultProps = {
  mode: "date",
  minuteStep: 1,
  prefixCls: "za-date-picker",
  valueMember: "value",
  maskClosable: true,
  onCancel: function onCancel() {
  },
  onInit: function onInit() {
  }
};

// node_modules/zarm/es/date-picker/index.js
var date_picker_default = config_receiver_default("DatePicker")(DatePicker);

// node_modules/zarm/es/date-select/DateSelect.js
var import_react25 = __toESM(require_react());
var import_classnames17 = __toESM(require_classnames());

// node_modules/zarm/es/date-picker-view/utils/format.js
function getFormatter(type) {
  var formatter;
  if (type === "year") {
    formatter = "yyyy年";
  } else if (type === "month") {
    formatter = "yyyy-MM";
  } else if (type === "time") {
    formatter = "HH:mm";
  } else if (type === "datetime") {
    formatter = "yyyy-MM-dd HH:mm";
  } else {
    formatter = "yyyy-MM-dd";
  }
  return formatter;
}
function formatDate(date, fmt) {
  if (!date || !fmt) {
    return date;
  }
  var o = {
    "M+": date.getMonth() + 1,
    // 月份
    "d+": date.getDate(),
    // 日
    "H+": date.getHours(),
    // 小时
    "m+": date.getMinutes(),
    // 分
    "s+": date.getSeconds(),
    // 秒
    "q+": Math.floor((date.getMonth() + 3) / 3),
    // 季度
    S: date.getMilliseconds()
    // 毫秒
  };
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, "".concat(date.getFullYear()).substr(4 - RegExp.$1.length));
  }
  Object.keys(o).forEach(function(k) {
    if (new RegExp("(".concat(k, ")")).test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : "00".concat(o[k]).substr("".concat(o[k]).length));
    }
  });
  return fmt;
}
function formatFn(instance, value) {
  var format = instance.props.format;
  var type = _typeof(format);
  if (format && type === "string") {
    return formatDate(value, format) || "";
  }
  if (typeof value === "string") {
    return value;
  }
  if (type === "function") {
    return format(value) || "";
  }
  return formatDate(value, getFormatter(instance.props.mode)) || "";
}

// node_modules/zarm/es/date-select/DateSelect.js
function _createSuper24(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct24();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct24() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DateSelect = function(_PureComponent) {
  _inherits(DateSelect2, _PureComponent);
  var _super = _createSuper24(DateSelect2);
  function DateSelect2(props) {
    var _this2;
    _classCallCheck(this, DateSelect2);
    _this2 = _super.call(this, props);
    _this2.handleClick = function() {
      var disabled = _this2.props.disabled;
      if (disabled) {
        return false;
      }
      _this2.setState({
        visible: true
      });
    };
    _this2.onChange = function(selected) {
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(selected);
      }
    };
    _this2.onOk = function(selected) {
      var onOk = _this2.props.onOk;
      _this2.setState({
        visible: false,
        selectValue: selected
      });
      if (typeof onOk === "function") {
        onOk(selected);
      }
    };
    _this2.onCancel = function() {
      var onCancel3 = _this2.props.onCancel;
      _this2.setState({
        visible: false
      });
      if (typeof onCancel3 === "function") {
        onCancel3();
      }
    };
    _this2.state = {
      visible: false,
      selectValue: props.value
    };
    return _this2;
  }
  _createClass(DateSelect2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, placeholder = _this$props.placeholder, disabled = _this$props.disabled, onChange2 = _this$props.onChange, locale = _this$props.locale, value = _this$props.value, hasArrow = _this$props.hasArrow, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "placeholder", "disabled", "onChange", "locale", "value", "hasArrow"]);
      var _this$state = this.state, visible = _this$state.visible, selectValue = _this$state.selectValue;
      var cls = (0, import_classnames17.default)(prefixCls, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--placeholder"), !selectValue), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--arrow"), hasArrow), _classnames));
      return import_react25.default.createElement("div", {
        className: cls,
        onClick: this.handleClick
      }, import_react25.default.createElement("input", {
        type: "hidden",
        value: formatFn(this, selectValue)
      }), import_react25.default.createElement("div", {
        className: "".concat(prefixCls, "__input")
      }, import_react25.default.createElement("div", {
        className: "".concat(prefixCls, "__value")
      }, formatFn(this, selectValue) || placeholder || locale.placeholder)), import_react25.default.createElement(date_picker_default, _extends({}, others, {
        className,
        visible,
        value: selectValue,
        onOk: this.onOk,
        onCancel: this.onCancel
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props) {
      return {
        selectValue: props.value
      };
    }
  }]);
  return DateSelect2;
}(import_react25.PureComponent);
DateSelect.defaultProps = {
  prefixCls: "za-date-select",
  mode: "date",
  disabled: false,
  minuteStep: 1,
  valueMember: "value",
  hasArrow: true,
  onCancel: function onCancel2() {
  }
};

// node_modules/zarm/es/date-select/index.js
var date_select_default = config_receiver_default("DateSelect")(DateSelect);

// node_modules/zarm/es/drag/index.js
var import_react26 = __toESM(require_react());
function ownKeys6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys6(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper25(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct25();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct25() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function isMouseEvent(e) {
  return e && !("touches" in e);
}
var Drag = function(_PureComponent) {
  _inherits(Drag2, _PureComponent);
  var _super = _createSuper25(Drag2);
  function Drag2() {
    var _this2;
    _classCallCheck(this, Drag2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.currentX = void 0;
    _this2.currentY = void 0;
    _this2.dragState = /* @__PURE__ */ Object.create(null);
    _this2.onTouchStart = function(event) {
      _this2.dragState.startTime = /* @__PURE__ */ new Date();
      if (isMouseEvent(event)) {
        _this2.dragState.startX = event.clientX;
        _this2.dragState.startY = event.clientY;
        events_default.on(document.body, "mousemove", _this2.onTouchMove);
        events_default.on(document.body, "mouseup", _this2.onTouchEnd);
      } else {
        var touch = event.touches[0];
        _this2.dragState.startX = touch.pageX;
        _this2.dragState.startY = touch.pageY;
      }
      var state = _objectSpread6({}, _this2.dragState);
      var onDragStart = _this2.props.onDragStart;
      if (typeof onDragStart === "function") {
        onDragStart(event, state);
      }
    };
    _this2.onTouchMove = function(event) {
      if (!_this2.isDragStart)
        return false;
      if (isMouseEvent(event)) {
        _this2.currentX = event.clientX;
        _this2.currentY = event.clientY;
      } else {
        var touch = event.touches[0];
        _this2.currentX = touch.pageX;
        _this2.currentY = touch.pageY;
      }
      var offsetX = _this2.currentX - _this2.dragState.startX;
      var offsetY = _this2.currentY - _this2.dragState.startY;
      var state = _objectSpread6(_objectSpread6({}, _this2.dragState), {}, {
        offsetX,
        offsetY
        // currentX: this.currentX,
        // currentY: this.currentY,
      });
      var onDragMove = _this2.props.onDragMove;
      if (typeof onDragMove === "function" && !onDragMove(event, state)) {
        return;
      }
      _this2.dragState = state;
    };
    _this2.onTouchEnd = function(event) {
      if (!_this2.isDragStart)
        return false;
      if (isMouseEvent(event)) {
        events_default.off(document.body, "mousemove", _this2.onTouchMove);
        events_default.off(document.body, "mouseup", _this2.onTouchEnd);
      }
      var onDragEnd = _this2.props.onDragEnd;
      if (typeof onDragEnd === "function") {
        onDragEnd(event, _this2.dragState);
      }
      _this2.dragState = /* @__PURE__ */ Object.create(null);
    };
    return _this2;
  }
  _createClass(Drag2, [{
    key: "isDragStart",
    get: function get() {
      return this.dragState.startX !== void 0 && this.dragState.startY !== void 0;
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return (0, import_react26.cloneElement)(children, {
        onTouchStart: this.onTouchStart,
        onTouchMove: this.onTouchMove,
        onTouchEnd: this.onTouchEnd,
        onMouseDown: this.onTouchStart,
        onMouseMove: this.onTouchMove,
        onMouseUp: this.onTouchEnd
      });
    }
  }]);
  return Drag2;
}(import_react26.PureComponent);

// node_modules/zarm/es/file-picker/index.js
var import_react27 = __toESM(require_react());
var import_classnames18 = __toESM(require_classnames());

// node_modules/zarm/es/file-picker/utils/isImage.js
function isImage(fileType) {
  var imageType = /image.*/;
  return !!fileType.match(imageType);
}

// node_modules/zarm/es/file-picker/utils/getFileDetail.js
function getFileDetail(file) {
  var fileSize = file.size;
  var fileName = file.name;
  var fileType = file.type || fileName.substr(fileName.lastIndexOf(".") + 1);
  var isPic = isImage(fileType);
  return {
    fileName,
    fileSize,
    fileType,
    isPic
  };
}

// node_modules/zarm/es/file-picker/utils/changeImageSize.js
function changeImageSize(img, quality, fileType) {
  var canvas = document.createElement("canvas");
  var ctx = canvas.getContext("2d");
  if (!ctx) {
    console.error("请使用高版本浏览器，该版本浏览器不支持生成缩略图");
    return "";
  }
  var width = img.width, height = img.height;
  canvas.width = width;
  canvas.height = height;
  ctx.fillStyle = "#fff";
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, 0, 0, width, height);
  if (quality && !(quality > 0 && quality <= 1)) {
    console.error("请输入有效的压缩比例, 没有将默认使用 0.92");
  }
  return canvas.toDataURL(fileType, quality);
}

// node_modules/zarm/es/file-picker/utils/createThumbnail.js
function createThumbnail(_ref) {
  var file = _ref.file, quality = _ref.quality, fileType = _ref.fileType, maxWidth = _ref.maxWidth, maxHeight = _ref.maxHeight;
  return new Promise(function(resolve) {
    var img = document.createElement("img");
    window.URL = window.URL || window.webkitURL;
    img.onload = function() {
      var imgUrl;
      if (quality || maxWidth || maxHeight) {
        imgUrl = changeImageSize(img, quality, fileType);
      } else {
        imgUrl = img.src;
      }
      resolve(imgUrl || "");
    };
    img.src = window.URL.createObjectURL(file);
  });
}

// node_modules/zarm/es/file-picker/utils/handleFileInfo.js
function handleFileInfo(_ref, callback) {
  var file = _ref.file, quality = _ref.quality;
  var _getFileDetail = getFileDetail(file), fileSize = _getFileDetail.fileSize, fileType = _getFileDetail.fileType, isPic = _getFileDetail.isPic, fileName = _getFileDetail.fileName;
  var fileDetail = {
    file,
    fileType,
    fileSize,
    fileName,
    thumbnail: ""
  };
  var callbackFunc = function callbackFunc2(url) {
    fileDetail.thumbnail = url;
    callback(fileDetail);
  };
  if (isPic) {
    createThumbnail({
      file,
      quality,
      fileType
    }).then(function(url) {
      return callbackFunc(url);
    }).catch(function(e) {
      return console.error(e);
    });
  } else {
    callback(fileDetail);
  }
}

// node_modules/zarm/es/file-picker/index.js
function _createSuper26(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct26();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct26() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var FilePicker = function(_PureComponent) {
  _inherits(FilePicker2, _PureComponent);
  var _super = _createSuper26(FilePicker2);
  function FilePicker2() {
    var _this2;
    _classCallCheck(this, FilePicker2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.file = null;
    _this2.handleDefaultInput = function(e) {
      e.currentTarget.value = "";
      var _this$props = _this2.props, onBeforeSelect2 = _this$props.onBeforeSelect, disabled = _this$props.disabled;
      if (typeof onBeforeSelect2 !== "function") {
        return;
      }
      if (onBeforeSelect2() === false || disabled) {
        e.preventDefault();
      }
    };
    _this2.handleClick = function() {
      _this2.file.click();
    };
    _this2.handleChange = function(e) {
      var _this$props2 = _this2.props, onChange2 = _this$props2.onChange, quality = _this$props2.quality, multiple = _this$props2.multiple;
      var files = [].slice.call(e.target.files);
      var fileList = [];
      var getFileInfo = function getFileInfo2(data) {
        if (multiple) {
          fileList.push(data);
          if (files.length === fileList.length && typeof onChange2 === "function") {
            onChange2(fileList);
          }
        } else {
          typeof onChange2 === "function" && onChange2(data);
        }
      };
      if (files) {
        files.map(function(file) {
          return handleFileInfo({
            file,
            quality
          }, getFileInfo);
        });
      }
    };
    return _this2;
  }
  _createClass(FilePicker2, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className, multiple = _this$props3.multiple, accept = _this$props3.accept, capture = _this$props3.capture, disabled = _this$props3.disabled, children = _this$props3.children;
      var cls = (0, import_classnames18.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--disabled"), disabled));
      var content = (0, import_react27.cloneElement)(children, {
        onClick: this.handleClick,
        className: (0, import_classnames18.default)(children.props.className, "needsclick")
        // 修复加载fastClick库后引起的合成事件问题
      });
      return import_react27.default.createElement("div", {
        className: cls
      }, import_react27.default.createElement("input", {
        className: "".concat(prefixCls, "__input"),
        type: "file",
        ref: function ref(ele) {
          _this2.file = ele;
        },
        accept,
        multiple,
        capture,
        onClick: this.handleDefaultInput,
        onChange: this.handleChange
      }), content);
    }
  }]);
  return FilePicker2;
}(import_react27.PureComponent);
FilePicker.defaultProps = {
  prefixCls: "za-file-picker",
  disabled: false,
  multiple: false,
  onBeforeSelect: function onBeforeSelect() {
    return true;
  }
};

// node_modules/zarm/es/icon/index.js
var import_react29 = __toESM(require_react());
var import_dedupe = __toESM(require_dedupe());

// node_modules/zarm/es/icon/IconFont.js
var import_react28 = __toESM(require_react());
var customCache = /* @__PURE__ */ new Set();
function createFromIconfont(scriptUrl) {
  if (typeof document !== "undefined" && typeof window !== "undefined" && typeof document.createElement === "function" && typeof scriptUrl === "string" && scriptUrl.length && !customCache.has(scriptUrl)) {
    var script = document.createElement("script");
    script.setAttribute("src", scriptUrl);
    script.setAttribute("data-namespace", scriptUrl);
    customCache.add(scriptUrl);
    document.body.appendChild(script);
  }
  var Iconfont = function Iconfont2(props) {
    Iconfont2.displayName = "Iconfont";
    var type = props.type;
    var content;
    if (type) {
      content = import_react28.default.createElement("use", {
        xlinkHref: "#".concat(type)
      });
    }
    return import_react28.default.createElement(icon_default, props, content);
  };
  return Iconfont;
}

// node_modules/zarm/es/icon/index.js
function ownKeys7(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread7(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys7(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys7(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper27(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct27();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct27() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var INNER_SVG_PROPS = {
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 32 32"
};
var Icon = function(_PureComponent) {
  _inherits(Icon2, _PureComponent);
  var _super = _createSuper27(Icon2);
  function Icon2() {
    _classCallCheck(this, Icon2);
    return _super.apply(this, arguments);
  }
  _createClass(Icon2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props = this.props, className = _this$props.className, type = _this$props.type, style2 = _this$props.style, prefixCls = _this$props.prefixCls, theme = _this$props.theme, size = _this$props.size, children = _this$props.children, SvgComponent = _this$props.component, viewBox = _this$props.viewBox, rest = _objectWithoutProperties(_this$props, ["className", "type", "style", "prefixCls", "theme", "size", "children", "component", "viewBox"]);
      var cls = (0, import_dedupe.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(type), !!type), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _classnames));
      var newProps = _objectSpread7({
        className: cls,
        style: style2,
        type,
        theme,
        size
      }, rest);
      var iconNode;
      if (SvgComponent) {
        INNER_SVG_PROPS.viewBox = viewBox;
        iconNode = import_react29.default.createElement("i", newProps, import_react29.default.createElement(SvgComponent, INNER_SVG_PROPS, children));
      } else if (children) {
        iconNode = import_react29.default.createElement("i", newProps, import_react29.default.createElement("svg", INNER_SVG_PROPS, children));
      } else if (type) {
        var MyIcon = Icon2.createFromIconfont("//at.alicdn.com/t/font_1285036_9ze0vm44z57.js");
        iconNode = import_react29.default.createElement(MyIcon, newProps);
      }
      return iconNode;
    }
  }]);
  return Icon2;
}(import_react29.PureComponent);
Icon.displayName = "Icon";
Icon.defaultProps = {
  prefixCls: "za-icon",
  theme: "default",
  size: "md",
  viewBox: INNER_SVG_PROPS.viewBox
};
Icon.createFromIconfont = createFromIconfont;
var icon_default = Icon;

// node_modules/zarm/es/input/Input.js
var import_react35 = __toESM(require_react());

// node_modules/zarm/es/input/InputNumber.js
var import_react32 = __toESM(require_react());
var import_classnames20 = __toESM(require_classnames());

// node_modules/zarm/es/keyboard-picker/index.js
var import_react31 = __toESM(require_react());

// node_modules/zarm/es/keyboard/Keyboard.js
var import_react30 = __toESM(require_react());
var import_classnames19 = __toESM(require_classnames());
function _createSuper28(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct28();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct28() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var KEYS = {
  number: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "", "0", "close"],
  price: ["1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "0", "close"],
  idcard: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "X", "0", "close"]
};
var Keyboard = function(_PureComponent) {
  _inherits(Keyboard2, _PureComponent);
  var _super = _createSuper28(Keyboard2);
  function Keyboard2() {
    var _this2;
    _classCallCheck(this, Keyboard2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.longPressTimer = void 0;
    _this2.onLongPressIn = function(key) {
      _this2.onKeyClick(key);
      _this2.longPressTimer = setTimeout(function() {
        _this2.longPressTimer = setInterval(function() {
          _this2.onKeyClick(key);
        }, 100);
      }, 800);
    };
    _this2.onLongPressOut = function(e) {
      e.preventDefault();
      clearInterval(_this2.longPressTimer);
    };
    _this2.onKeyClick = function(key) {
      if (key.length === 0) {
        return;
      }
      var onKeyClick = _this2.props.onKeyClick;
      if (typeof onKeyClick === "function") {
        onKeyClick(key);
      }
    };
    _this2.getKeys = function() {
      var type = _this2.props.type;
      return type ? KEYS[type] : KEYS.number;
    };
    _this2.renderKey = function(text2, index) {
      var prefixCls = _this2.props.prefixCls;
      var keyCls = (0, import_classnames19.default)("".concat(prefixCls, "__item"), _defineProperty({}, "".concat(prefixCls, "__item--disabled"), text2.length === 0));
      return import_react30.default.createElement("div", {
        className: keyCls,
        key: +index,
        onClick: function onClick2() {
          return _this2.onKeyClick(text2);
        }
      }, text2 === "close" ? import_react30.default.createElement(icon_default, {
        type: "keyboard",
        size: "lg"
      }) : text2);
    };
    return _this2;
  }
  _createClass(Keyboard2, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, locale = _this$props.locale;
      var cls = (0, import_classnames19.default)(prefixCls, className);
      return import_react30.default.createElement("div", {
        className: cls
      }, import_react30.default.createElement("div", {
        className: "".concat(prefixCls, "__keys")
      }, this.getKeys().map(this.renderKey)), import_react30.default.createElement("div", {
        className: "".concat(prefixCls, "__handle")
      }, import_react30.default.createElement("div", {
        className: "".concat(prefixCls, "__item"),
        onTouchStart: function onTouchStart() {
          return _this2.onLongPressIn("delete");
        },
        onTouchEnd: this.onLongPressOut,
        onTouchCancel: this.onLongPressOut,
        onMouseDown: function onMouseDown() {
          return _this2.onLongPressIn("delete");
        },
        onMouseUp: this.onLongPressOut
      }, import_react30.default.createElement(icon_default, {
        type: "deletekey",
        size: "lg"
      })), import_react30.default.createElement("div", {
        className: "".concat(prefixCls, "__item ").concat(prefixCls, "__item--ok"),
        onClick: function onClick2() {
          return _this2.onKeyClick("ok");
        }
      }, locale.okText)));
    }
  }]);
  return Keyboard2;
}(import_react30.PureComponent);
Keyboard.defaultProps = {
  prefixCls: "za-keyboard",
  type: "number"
};

// node_modules/zarm/es/keyboard/index.js
var keyboard_default = config_receiver_default("Keyboard")(Keyboard);

// node_modules/zarm/es/keyboard-picker/index.js
function _createSuper29(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct29();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct29() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var KeyboardPicker = function(_PureComponent) {
  _inherits(KeyboardPicker2, _PureComponent);
  var _super = _createSuper29(KeyboardPicker2);
  function KeyboardPicker2(props) {
    var _this2;
    _classCallCheck(this, KeyboardPicker2);
    _this2 = _super.call(this, props);
    _this2.onKeyClick = function(key) {
      if (["ok", "close"].indexOf(key) > -1) {
        _this2.setState({
          visible: false
        });
      }
      var onKeyClick = _this2.props.onKeyClick;
      if (typeof onKeyClick === "function") {
        onKeyClick(key);
      }
    };
    _this2.state = {
      visible: props.visible
    };
    return _this2;
  }
  _createClass(KeyboardPicker2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, destroy2 = _this$props.destroy, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "destroy"]);
      var visible = this.state.visible;
      return import_react31.default.createElement(popup_default, {
        className,
        visible,
        mask: false,
        destroy: destroy2
      }, import_react31.default.createElement("div", {
        className: prefixCls
      }, import_react31.default.createElement(keyboard_default, _extends({}, others, {
        onKeyClick: this.onKeyClick
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ("visible" in nextProps) {
        return {
          visible: nextProps.visible
        };
      }
      return null;
    }
  }]);
  return KeyboardPicker2;
}(import_react31.PureComponent);
KeyboardPicker.defaultProps = {
  prefixCls: "za-keyboard-picker",
  visible: false,
  type: "number",
  destroy: true
};

// node_modules/zarm/es/input/utils.js
function getValue5(props) {
  var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  if (typeof props.value !== "undefined" && props.value !== null) {
    return props.value;
  }
  if (typeof props.defaultValue !== "undefined" && props.defaultValue !== null) {
    return props.defaultValue;
  }
  return defaultValue;
}

// node_modules/zarm/es/input/InputNumber.js
function _createSuper30(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct30();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct30() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var InputNumber = function(_Component) {
  _inherits(InputNumber2, _Component);
  var _super = _createSuper30(InputNumber2);
  function InputNumber2(props) {
    var _this2;
    _classCallCheck(this, InputNumber2);
    _this2 = _super.call(this, props);
    _this2.content = void 0;
    _this2.picker = void 0;
    _this2.container = void 0;
    _this2.onMaskClick = function(e) {
      var clsRegExp = new RegExp("(^|\\s)".concat(_this2.picker.props.prefixCls, "(\\s|$)"), "g");
      if (!_this2.state.visible || _this2.state.focused) {
        return;
      }
      var cNode = function(node) {
        while (node.parentNode && node.parentNode !== document.body) {
          if (node === _this2.picker || node === _this2.container || clsRegExp.test(node.className)) {
            return node;
          }
          node = node.parentNode;
        }
      }(e.target);
      if (!cNode) {
        _this2.onBlur();
      }
    };
    _this2.onKeyClick = function(key) {
      if (["close", "ok"].indexOf(key) > -1) {
        _this2.onBlur();
        return;
      }
      var value = _this2.state.value;
      var newValue = key === "delete" ? String(value).slice(0, String(value).length - 1) : value + key;
      if (!("value" in _this2.props)) {
        _this2.setState({
          value: newValue
        });
      }
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(newValue);
      }
    };
    _this2.onFocus = function() {
      var _this$props = _this2.props, disabled = _this$props.disabled, readOnly = _this$props.readOnly, onFocus = _this$props.onFocus;
      var _this$state = _this2.state, visible = _this$state.visible, value = _this$state.value;
      if (disabled || readOnly || visible) {
        return;
      }
      _this2.setState({
        visible: true
      });
      if (typeof onFocus === "function") {
        onFocus(value);
      }
    };
    _this2.onBlur = function() {
      var _this$state2 = _this2.state, visible = _this$state2.visible, value = _this$state2.value;
      if (!visible) {
        return;
      }
      _this2.setState({
        visible: false
      });
      var onBlur = _this2.props.onBlur;
      if (typeof onBlur === "function") {
        onBlur(value);
      }
    };
    _this2.onClear = function() {
      var _this$props2 = _this2.props, onChange2 = _this$props2.onChange, onClear = _this$props2.onClear;
      _this2.setState({
        value: ""
      }, _this2.onFocus);
      if (onClear) {
        onClear("");
      }
      if (typeof onChange2 === "function") {
        onChange2("");
      }
    };
    _this2.scrollToStart = function() {
      _this2.content.scrollLeft = 0;
    };
    _this2.scrollToEnd = function() {
      _this2.content.scrollLeft = _this2.content.scrollWidth;
    };
    _this2.focus = function() {
      _this2.onFocus();
    };
    _this2.blur = function() {
      _this2.onBlur();
    };
    _this2.state = {
      value: getValue5(props),
      visible: props.focused || false,
      focused: false
    };
    return _this2;
  }
  _createClass(InputNumber2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props3 = this.props, autoFocus = _this$props3.autoFocus, focused = _this$props3.focused;
      events_default.on(document.body, "click", this.onMaskClick);
      if (autoFocus || focused) {
        this.onFocus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var visible = this.state.visible;
      if (visible) {
        this.scrollToEnd();
      } else {
        this.scrollToStart();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      events_default.off(document.body, "click", this.onMaskClick);
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, className = _this$props4.className, type = _this$props4.type, clearable = _this$props4.clearable, disabled = _this$props4.disabled, readOnly = _this$props4.readOnly, placeholder = _this$props4.placeholder;
      var _this$state3 = this.state, visible = _this$state3.visible, value = _this$state3.value;
      var showClearIcon = clearable && "value" in this.props && value.length > 0 && "onChange" in this.props;
      var cls = (0, import_classnames20.default)(prefixCls, "".concat(prefixCls, "--").concat(type), className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--focus"), visible), _defineProperty(_classnames, "".concat(prefixCls, "--clearable"), showClearIcon), _defineProperty(_classnames, "".concat(prefixCls, "--readonly"), readOnly), _classnames));
      var renderInput = import_react32.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, (value === void 0 || value === "") && !readOnly && import_react32.default.createElement("div", {
        className: "".concat(prefixCls, "__placeholder")
      }, placeholder), import_react32.default.createElement("div", {
        className: "".concat(prefixCls, "__virtual-input"),
        ref: function ref(ele) {
          _this2.content = ele;
        }
      }, value), import_react32.default.createElement("input", {
        type: "hidden",
        value,
        disabled
      }), import_react32.default.createElement(KeyboardPicker, {
        ref: function ref(ele) {
          _this2.picker = ele;
        },
        visible,
        type,
        onKeyClick: this.onKeyClick
      }));
      var renderText = import_react32.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, value);
      var renderClearIcon = showClearIcon && import_react32.default.createElement(icon_default, {
        type: "wrong-round-fill",
        className: "".concat(prefixCls, "__clear"),
        onClick: function onClick2(e) {
          e.stopPropagation();
          _this2.onClear();
        }
      });
      return import_react32.default.createElement("div", {
        className: cls,
        onClick: this.onFocus,
        ref: function ref(ele) {
          _this2.container = ele;
        }
      }, readOnly ? renderText : renderInput, renderClearIcon);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("value" in nextProps && nextProps.value !== state.prevValue) {
        return {
          value: getValue5(nextProps),
          prevValue: getValue5(nextProps)
        };
      }
      return null;
    }
  }]);
  return InputNumber2;
}(import_react32.Component);
InputNumber.defaultProps = {
  prefixCls: "za-input",
  disabled: false,
  clearable: true
};

// node_modules/zarm/es/input/InputBase.js
var import_react33 = __toESM(require_react());
var import_classnames21 = __toESM(require_classnames());
function _createSuper31(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct31();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct31() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var InputBase = function(_PureComponent) {
  _inherits(InputBase2, _PureComponent);
  var _super = _createSuper31(InputBase2);
  function InputBase2(props) {
    var _this2;
    _classCallCheck(this, InputBase2);
    _this2 = _super.call(this, props);
    _this2.input = void 0;
    _this2.onBlurTimeout = void 0;
    _this2.blurFromClear = void 0;
    _this2.onFocus = function(e) {
      _this2.setState({
        focused: true
      });
      var onFocus = _this2.props.onFocus;
      if (typeof onFocus === "function") {
        onFocus(e.target.value);
      }
    };
    _this2.onBlur = function(e) {
      var onBlur = _this2.props.onBlur;
      var value = e.target.value;
      _this2.onBlurTimeout = setTimeout(function() {
        if (!_this2.blurFromClear && document.activeElement !== _this2.input) {
          _this2.setState({
            focused: false
          });
          if (typeof onBlur === "function") {
            onBlur(value);
          }
        }
        _this2.blurFromClear = false;
      }, 200);
    };
    _this2.onChange = function(e) {
      var onChange2 = _this2.props.onChange;
      var focused = _this2.state.focused;
      var value = e.target.value;
      if (!focused) {
        _this2.setState({
          focused: true
        });
      }
      if (!("value" in _this2.props)) {
        _this2.setState({
          value
        });
      }
      if (typeof onChange2 === "function") {
        onChange2(value);
      }
    };
    _this2.onClear = function() {
      var isOnComposition = _this2.state.isOnComposition;
      var _this$props = _this2.props, onChange2 = _this$props.onChange, onClear = _this$props.onClear;
      _this2.blurFromClear = true;
      _this2.setState({
        value: ""
      });
      !isOnComposition && _this2.focus();
      typeof onChange2 === "function" && onChange2("");
      typeof onClear === "function" && onClear("");
    };
    _this2.handleComposition = function(e) {
      var _this$props2 = _this2.props, onCompositionStart = _this$props2.onCompositionStart, onCompositionUpdate = _this$props2.onCompositionUpdate, onCompositionEnd = _this$props2.onCompositionEnd, onChange2 = _this$props2.onChange;
      if (e.type === "compositionstart") {
        _this2.setState({
          isOnComposition: true
        });
        if (typeof onCompositionStart === "function") {
          onCompositionStart(e);
        }
      }
      if (e.type === "compositionupdate") {
        if (typeof onCompositionUpdate === "function") {
          onCompositionUpdate(e);
        }
      }
      if (e.type === "compositionend") {
        var value = e.target.value;
        _this2.setState({
          isOnComposition: false
        });
        if (typeof onCompositionEnd === "function") {
          onCompositionEnd(e);
        }
        if (typeof onChange2 === "function") {
          onChange2(value);
        }
      }
    };
    _this2.focus = function() {
      _this2.input.focus();
    };
    _this2.blur = function() {
      _this2.input.blur();
    };
    _this2.state = {
      focused: props.autoFocus || false,
      value: getValue5(props)
    };
    return _this2;
  }
  _createClass(InputBase2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var focused = this.state.focused;
      if (focused) {
        this.input.focus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.onBlurTimeout) {
        clearTimeout(this.onBlurTimeout);
        this.onBlurTimeout = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className, disabled = _this$props3.disabled, clearable = _this$props3.clearable, readOnly = _this$props3.readOnly, type = _this$props3.type, onClear = _this$props3.onClear, rest = _objectWithoutProperties(_this$props3, ["prefixCls", "className", "disabled", "clearable", "readOnly", "type", "onClear"]);
      var _this$state = this.state, value = _this$state.value, focused = _this$state.focused;
      var showClearIcon = clearable && "value" in this.props && "onChange" in this.props;
      var cls = (0, import_classnames21.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--focus"), focused && value && value.length > 0), _defineProperty(_classnames, "".concat(prefixCls, "--clearable"), showClearIcon), _defineProperty(_classnames, "".concat(prefixCls, "--readonly"), readOnly), _classnames));
      var renderInput = import_react33.default.createElement("input", _extends({}, rest, {
        value: "value" in this.props ? value : void 0,
        autoComplete: "off",
        ref: function ref(ele) {
          _this2.input = ele;
        },
        type,
        disabled,
        onChange: this.onChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        onCompositionStart: function onCompositionStart(e) {
          _this2.handleComposition(e);
        },
        onCompositionUpdate: function onCompositionUpdate(e) {
          _this2.handleComposition(e);
        },
        onCompositionEnd: function onCompositionEnd(e) {
          _this2.handleComposition(e);
        }
      }));
      var renderText = import_react33.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, value);
      var renderClearIcon = showClearIcon && import_react33.default.createElement(icon_default, {
        type: "wrong-round-fill",
        className: "".concat(prefixCls, "__clear"),
        onClick: function onClick2() {
          _this2.onClear();
        }
      });
      return import_react33.default.createElement("div", {
        className: cls
      }, readOnly ? renderText : renderInput, renderClearIcon);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ("value" in nextProps) {
        return {
          value: getValue5(nextProps)
        };
      }
      return null;
    }
  }]);
  return InputBase2;
}(import_react33.PureComponent);
InputBase.defaultProps = {
  prefixCls: "za-input",
  disabled: false,
  type: "text",
  clearable: true,
  readOnly: false
};

// node_modules/zarm/es/input/InputTextarea.js
var import_react34 = __toESM(require_react());
var import_classnames22 = __toESM(require_classnames());
function _createSuper32(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct32();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct32() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]|\n/g;
var countSymbols = function countSymbols2() {
  var text2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return text2.replace(regexAstralSymbols, "_").length;
};
var InputTextarea = function(_PureComponent) {
  _inherits(InputTextarea2, _PureComponent);
  var _super = _createSuper32(InputTextarea2);
  function InputTextarea2(props) {
    var _this2;
    _classCallCheck(this, InputTextarea2);
    _this2 = _super.call(this, props);
    _this2.input = void 0;
    _this2.onFocus = function(e) {
      if (!("focused" in _this2.props)) {
        _this2.setState({
          focused: true
        });
      }
      var onFocus = _this2.props.onFocus;
      if (typeof onFocus === "function") {
        onFocus(e.target.value);
      }
    };
    _this2.onBlur = function(e) {
      if (!("focused" in _this2.props)) {
        _this2.setState({
          focused: false
        });
      }
      var onBlur = _this2.props.onBlur;
      if (typeof onBlur === "function") {
        onBlur(e.target.value);
      }
    };
    _this2.handleComposition = function(e) {
      var _this$props = _this2.props, onCompositionStart = _this$props.onCompositionStart, onCompositionUpdate = _this$props.onCompositionUpdate, onCompositionEnd = _this$props.onCompositionEnd, onChange2 = _this$props.onChange;
      if (e.type === "compositionstart") {
        if (typeof onCompositionStart === "function") {
          onCompositionStart(e);
        }
      }
      if (e.type === "compositionupdate") {
        if (typeof onCompositionUpdate === "function") {
          onCompositionUpdate(e);
        }
      }
      if (e.type === "compositionend") {
        var value = e.target.value;
        if (typeof onCompositionEnd === "function") {
          onCompositionEnd(e);
        }
        if (typeof onChange2 === "function") {
          onChange2(value);
        }
      }
    };
    _this2.onChange = function(e) {
      var onChange2 = _this2.props.onChange;
      var value = e.target.value;
      if (!("value" in _this2.props)) {
        _this2.setState({
          value
        });
      }
      if (typeof onChange2 === "function") {
        onChange2(value);
      }
    };
    _this2.state = {
      value: getValue5(props),
      focused: props.focused || false
    };
    return _this2;
  }
  _createClass(InputTextarea2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;
      var focused = this.state.focused;
      if (autoFocus || focused) {
        this.input.focus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this$props2 = this.props, autoHeight = _this$props2.autoHeight, rows = _this$props2.rows, readOnly = _this$props2.readOnly;
      var focused = this.state.focused;
      if (autoHeight) {
        this.input.style.height = "auto";
        this.input.scrollTop = 0;
        this.input.style.height = "".concat(this.input.scrollHeight, "px");
      }
      if (autoHeight && readOnly && rows) {
        this.input.style.height = "".concat(this.input.scrollHeight * rows, "px");
      }
      if (focused) {
        this.input.focus();
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className, maxLength = _this$props3.maxLength, disabled = _this$props3.disabled, readOnly = _this$props3.readOnly, autoHeight = _this$props3.autoHeight, showLength = _this$props3.showLength, focused = _this$props3.focused, rest = _objectWithoutProperties(_this$props3, ["prefixCls", "className", "maxLength", "disabled", "readOnly", "autoHeight", "showLength", "focused"]);
      var cls = (0, import_classnames22.default)(prefixCls, "".concat(prefixCls, "--textarea"), className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--readonly"), readOnly), _classnames));
      var value = this.state.value;
      var length = countSymbols(value);
      var textLengthRender = showLength && maxLength && import_react34.default.createElement("div", {
        className: "".concat(prefixCls, "__length")
      }, "".concat(length, "/").concat(maxLength));
      var renderInput = import_react34.default.createElement("textarea", _extends({}, rest, {
        value: "value" in this.props ? value : void 0,
        ref: function ref(ele) {
          _this2.input = ele;
        },
        maxLength,
        disabled,
        onChange: this.onChange,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onCompositionStart: function onCompositionStart(e) {
          _this2.handleComposition(e);
        },
        onCompositionUpdate: function onCompositionUpdate(e) {
          _this2.handleComposition(e);
        },
        onCompositionEnd: function onCompositionEnd(e) {
          _this2.handleComposition(e);
        }
      }));
      var renderText = import_react34.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        ref: function ref(ele) {
          _this2.input = ele;
        }
      }, value);
      return import_react34.default.createElement("div", {
        className: cls
      }, !readOnly ? renderInput : renderText, textLengthRender);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ("focused" in nextProps || "value" in nextProps) {
        return {
          value: getValue5(nextProps),
          focused: nextProps.focused || false
        };
      }
      return null;
    }
  }]);
  return InputTextarea2;
}(import_react34.PureComponent);
InputTextarea.defaultProps = {
  prefixCls: "za-input",
  disabled: false,
  autoHeight: false,
  showLength: false,
  focused: false
};

// node_modules/zarm/es/input/Input.js
function _createSuper33(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct33();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct33() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Input = function(_PureComponent) {
  _inherits(Input2, _PureComponent);
  var _super = _createSuper33(Input2);
  function Input2() {
    var _this2;
    _classCallCheck(this, Input2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.input = void 0;
    return _this2;
  }
  _createClass(Input2, [{
    key: "focus",
    value: function focus() {
      if (this.input) {
        this.input.focus();
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this.input) {
        this.input.blur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props, type = _this$props.type, rest = _objectWithoutProperties(_this$props, ["type"]);
      if (type === "text" && "rows" in this.props) {
        return import_react35.default.createElement(InputTextarea, _extends({
          ref: function ref(ele) {
            _this2.input = ele;
          }
        }, rest));
      }
      switch (type) {
        case "idcard":
        case "price":
        case "number":
          return import_react35.default.createElement(InputNumber, _extends({
            ref: function ref(ele) {
              _this2.input = ele;
            }
          }, this.props));
        case "text":
        case "search":
        case "password":
        default:
          return import_react35.default.createElement(InputBase, _extends({
            ref: function ref(ele) {
              _this2.input = ele;
            }
          }, this.props));
      }
    }
  }]);
  return Input2;
}(import_react35.PureComponent);
Input.defaultProps = {
  type: "text"
};

// node_modules/zarm/es/input/index.js
var input_default = Input;

// node_modules/zarm/es/loading/index.js
var import_react36 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
function ownKeys8(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread8(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys8(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys8(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper34(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct34();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct34() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Loading = function(_PureComponent) {
  _inherits(Loading2, _PureComponent);
  var _super = _createSuper34(Loading2);
  function Loading2() {
    var _this2;
    _classCallCheck(this, Loading2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.timer = void 0;
    _this2.state = {
      visible: _this2.props.visible
    };
    _this2.afterClose = function() {
      var afterClose = _this2.props.afterClose;
      if (Loading2.zarmLoading) {
        Loading2.loadingContainer.removeChild(Loading2.zarmLoading);
        Loading2.zarmLoading = null;
      }
      if (typeof afterClose === "function") {
        afterClose();
      }
    };
    _this2._hide = function() {
      _this2.setState({
        visible: false
      });
    };
    return _this2;
  }
  _createClass(Loading2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoClose();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;
      if (prevProps.visible !== visible) {
        if (visible) {
          this.setState({
            visible: true
          });
          this.autoClose();
        } else {
          this._hide();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timer);
    }
  }, {
    key: "autoClose",
    value: function autoClose() {
      var _this2 = this;
      var stayTime = this.props.stayTime;
      if (stayTime && stayTime > 0) {
        this.timer = setTimeout(function() {
          _this2._hide();
          clearTimeout(_this2.timer);
        }, stayTime);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, content = _this$props.content, stayTime = _this$props.stayTime, className = _this$props.className, others = _objectWithoutProperties(_this$props, ["prefixCls", "content", "stayTime", "className"]);
      var visible = this.state.visible;
      return import_react36.default.createElement(popup_default, _extends({
        direction: "center",
        maskType: "transparent",
        width: "70%"
      }, others, {
        visible,
        afterClose: this.afterClose
      }), import_react36.default.createElement("div", {
        className: prefixCls
      }, import_react36.default.createElement("div", {
        className: "".concat(prefixCls, "__container")
      }, content || import_react36.default.createElement(ActivityIndicator, {
        type: "spinner",
        size: "lg"
      }))));
    }
  }]);
  return Loading2;
}(import_react36.PureComponent);
Loading.defaultProps = {
  prefixCls: "za-loading",
  mask: true
};
Loading.zarmLoading = void 0;
Loading.loadingContainer = void 0;
Loading.hideHelper = void 0;
Loading.show = function(content) {
  Loading.unmountNode();
  if (!Loading.zarmLoading) {
    Loading.zarmLoading = document.createElement("div");
    Loading.zarmLoading.classList.add("za-loading-container");
    if (content && content.className) {
      Loading.zarmLoading.classList.add(content.className);
    }
    Loading.loadingContainer = content && content.mountContainer ? getMountContainer(content.mountContainer) : getMountContainer();
    Loading.loadingContainer.appendChild(Loading.zarmLoading);
  }
  var props = _objectSpread8(_objectSpread8(_objectSpread8({}, Loading.defaultProps), content), {
    visible: true,
    mountContainer: false
  });
  Loading.hideHelper = function() {
    import_react_dom3.default.render(import_react36.default.createElement(Loading, _extends({}, props, {
      visible: false
    })), Loading.zarmLoading);
  };
  import_react_dom3.default.render(import_react36.default.createElement(Loading, props), Loading.zarmLoading);
};
Loading.hide = function() {
  if (Loading.zarmLoading) {
    Loading.hideHelper();
  }
};
Loading.unmountNode = function() {
  var zarmLoading = Loading.zarmLoading;
  if (zarmLoading) {
    import_react_dom3.default.render(import_react36.default.createElement(import_react36.default.Fragment, null), zarmLoading);
    Loading.loadingContainer.removeChild(zarmLoading);
    Loading.zarmLoading = null;
  }
};

// node_modules/zarm/es/message/index.js
var import_react37 = __toESM(require_react());
var import_classnames23 = __toESM(require_classnames());
function _createSuper35(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct35();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct35() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Message = function(_PureComponent) {
  _inherits(Message2, _PureComponent);
  var _super = _createSuper35(Message2);
  function Message2(props) {
    var _this2;
    _classCallCheck(this, Message2);
    _this2 = _super.call(this, props);
    _this2.onClick = function(e) {
      var _this$props = _this2.props, hasArrow = _this$props.hasArrow, onClick2 = _this$props.onClick;
      if (hasArrow && typeof onClick2 === "function") {
        onClick2(e);
      }
    };
    _this2.onClose = function() {
      _this2.setState({
        visible: false
      });
    };
    _this2.state = {
      visible: true
    };
    return _this2;
  }
  _createClass(Message2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, theme = _this$props2.theme, size = _this$props2.size, icon = _this$props2.icon, hasArrow = _this$props2.hasArrow, closable = _this$props2.closable, children = _this$props2.children;
      var visible = this.state.visible;
      var classes = (0, import_classnames23.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _classnames));
      var iconRender = icon && import_react37.default.createElement("div", {
        className: "".concat(prefixCls, "__icon")
      }, icon);
      var renderCloseIcon = closable && import_react37.default.createElement(icon_default, {
        type: "wrong",
        onClick: this.onClose
      });
      var renderArrow = hasArrow && import_react37.default.createElement(icon_default, {
        type: "arrow-right"
      });
      var noFooter = !closable && !hasArrow;
      return visible && import_react37.default.createElement("div", {
        className: classes,
        onClick: this.onClick
      }, import_react37.default.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, iconRender), import_react37.default.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, children), !noFooter && import_react37.default.createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, renderArrow, renderCloseIcon));
    }
  }]);
  return Message2;
}(import_react37.PureComponent);
Message.defaultProps = {
  prefixCls: "za-message",
  theme: "primary",
  hasArrow: false,
  closable: false
};

// node_modules/zarm/es/modal/index.js
var import_react44 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/zarm/es/modal/Modal.js
var import_react41 = __toESM(require_react());
var import_classnames27 = __toESM(require_classnames());

// node_modules/zarm/es/modal/ModalHeader.js
var import_react38 = __toESM(require_react());
var import_classnames24 = __toESM(require_classnames());
function _createSuper36(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct36();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct36() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ModalHeader = function(_PureComponent) {
  _inherits(ModalHeader2, _PureComponent);
  var _super = _createSuper36(ModalHeader2);
  function ModalHeader2() {
    _classCallCheck(this, ModalHeader2);
    return _super.apply(this, arguments);
  }
  _createClass(ModalHeader2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, title = _this$props.title, closable = _this$props.closable, onCancel3 = _this$props.onCancel, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "title", "closable", "onCancel"]);
      var cls = (0, import_classnames24.default)("".concat(prefixCls, "__header"), className);
      var btnClose = closable && import_react38.default.createElement(icon_default, {
        type: "wrong",
        size: "sm",
        className: "".concat(prefixCls, "__header__close"),
        onClick: onCancel3
      });
      return import_react38.default.createElement("div", _extends({
        className: cls
      }, others), import_react38.default.createElement("div", {
        className: "".concat(prefixCls, "__header__title")
      }, title), btnClose);
    }
  }]);
  return ModalHeader2;
}(import_react38.PureComponent);
ModalHeader.defaultProps = {
  prefixCls: "za-modal"
};

// node_modules/zarm/es/modal/ModalBody.js
var import_react39 = __toESM(require_react());
var import_classnames25 = __toESM(require_classnames());
function _createSuper37(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct37();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct37() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ModalBody = function(_PureComponent) {
  _inherits(ModalBody2, _PureComponent);
  var _super = _createSuper37(ModalBody2);
  function ModalBody2() {
    _classCallCheck(this, ModalBody2);
    return _super.apply(this, arguments);
  }
  _createClass(ModalBody2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, children = _this$props.children;
      var cls = (0, import_classnames25.default)("".concat(prefixCls, "__body"), className);
      return import_react39.default.createElement("div", {
        className: cls
      }, children);
    }
  }]);
  return ModalBody2;
}(import_react39.PureComponent);
ModalBody.defaultProps = {
  prefixCls: "za-modal"
};

// node_modules/zarm/es/modal/ModalFooter.js
var import_react40 = __toESM(require_react());
var import_classnames26 = __toESM(require_classnames());
function _createSuper38(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct38();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct38() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ModalFooter = function(_PureComponent) {
  _inherits(ModalFooter2, _PureComponent);
  var _super = _createSuper38(ModalFooter2);
  function ModalFooter2() {
    _classCallCheck(this, ModalFooter2);
    return _super.apply(this, arguments);
  }
  _createClass(ModalFooter2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, children = _this$props.children;
      var cls = (0, import_classnames26.default)("".concat(prefixCls, "__footer"));
      return import_react40.default.createElement("div", {
        className: cls
      }, children);
    }
  }]);
  return ModalFooter2;
}(import_react40.PureComponent);
ModalFooter.defaultProps = {
  prefixCls: "za-modal"
};

// node_modules/zarm/es/modal/Modal.js
function _createSuper39(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct39();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct39() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Modal = function(_Component) {
  _inherits(Modal2, _Component);
  var _super = _createSuper39(Modal2);
  function Modal2() {
    _classCallCheck(this, Modal2);
    return _super.apply(this, arguments);
  }
  _createClass(Modal2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, shape = _this$props.shape, children = _this$props.children, maskClosable = _this$props.maskClosable, title = _this$props.title, closable = _this$props.closable, footer = _this$props.footer, onCancel3 = _this$props.onCancel, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "shape", "children", "maskClosable", "title", "closable", "footer", "onCancel"]);
      var cls = {
        modal: (0, import_classnames27.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--").concat(shape), !!shape)),
        dialog: (0, import_classnames27.default)("".concat(prefixCls, "__dialog"))
      };
      var showHeader = title || closable;
      var noop3 = function noop4() {
      };
      return import_react41.default.createElement(popup_default, _extends({
        className: cls.modal,
        direction: "center",
        onMaskClick: maskClosable ? onCancel3 : noop3
      }, others), import_react41.default.createElement("div", {
        className: cls.dialog
      }, showHeader && import_react41.default.createElement(ModalHeader, {
        title,
        closable,
        onCancel: onCancel3
      }), import_react41.default.createElement(ModalBody, null, children), footer && import_react41.default.createElement(ModalFooter, null, footer)));
    }
  }]);
  return Modal2;
}(import_react41.Component);
Modal.alert = void 0;
Modal.confirm = void 0;
Modal.defaultProps = {
  prefixCls: "za-modal",
  visible: false,
  animationType: "fade",
  animationDuration: 200,
  width: "70%",
  mask: true,
  maskType: "normal",
  shape: "radius",
  closable: false,
  maskClosable: false,
  destroy: true
};

// node_modules/zarm/es/alert/Alert.js
var import_react42 = __toESM(require_react());
var import_classnames28 = __toESM(require_classnames());
function _createSuper40(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct40();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct40() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Alert = function(_PureComponent) {
  _inherits(Alert2, _PureComponent);
  var _super = _createSuper40(Alert2);
  function Alert2() {
    _classCallCheck(this, Alert2);
    return _super.apply(this, arguments);
  }
  _createClass(Alert2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, content = _this$props.content, cancelText = _this$props.cancelText, onCancel3 = _this$props.onCancel, locale = _this$props.locale, shape = _this$props.shape, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "content", "cancelText", "onCancel", "locale", "shape"]);
      var cls = {
        alert: (0, import_classnames28.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--").concat(shape), !!shape))
      };
      return import_react42.default.createElement("div", {
        className: cls.alert
      }, import_react42.default.createElement(modal_default, _extends({}, others, {
        footer: import_react42.default.createElement("button", {
          type: "button",
          className: "".concat(prefixCls, "__button"),
          onClick: onCancel3
        }, cancelText || locale.cancelText)
      }), content));
    }
  }]);
  return Alert2;
}(import_react42.PureComponent);
Alert.defaultProps = {
  prefixCls: "za-alert",
  animationType: "zoom",
  locale: zh_CN_default2,
  shape: "radius"
};

// node_modules/zarm/es/confirm/Confirm.js
var import_react43 = __toESM(require_react());
var import_classnames29 = __toESM(require_classnames());
function _createSuper41(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct41();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct41() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Confirm = function(_PureComponent) {
  _inherits(Confirm2, _PureComponent);
  var _super = _createSuper41(Confirm2);
  function Confirm2() {
    _classCallCheck(this, Confirm2);
    return _super.apply(this, arguments);
  }
  _createClass(Confirm2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, content = _this$props.content, okText = _this$props.okText, cancelText = _this$props.cancelText, shape = _this$props.shape, onOk = _this$props.onOk, onCancel3 = _this$props.onCancel, locale = _this$props.locale, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "content", "okText", "cancelText", "shape", "onOk", "onCancel", "locale"]);
      var cls = {
        confirm: (0, import_classnames29.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--").concat(shape), !!shape))
      };
      return import_react43.default.createElement("div", {
        className: cls.confirm
      }, import_react43.default.createElement(modal_default, _extends({}, others, {
        footer: import_react43.default.createElement(import_react43.default.Fragment, null, import_react43.default.createElement("button", {
          type: "button",
          className: "".concat(prefixCls, "__button"),
          onClick: onCancel3
        }, cancelText || locale.cancelText), import_react43.default.createElement("button", {
          type: "button",
          className: "".concat(prefixCls, "__button ").concat(prefixCls, "__button--ok"),
          onClick: onOk
        }, okText || locale.okText))
      }), content));
    }
  }]);
  return Confirm2;
}(import_react43.PureComponent);
Confirm.defaultProps = {
  prefixCls: "za-confirm",
  animationType: "zoom",
  locale: zh_CN_default3,
  shape: "radius"
};

// node_modules/zarm/es/modal/index.js
function ownKeys9(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread9(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys9(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys9(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function modalType(props, type) {
  var _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, mountContainer = props.mountContainer;
  var container = document.createElement("div");
  container.className += "za-".concat(type, "-container ").concat(className);
  var mountNode = getMountContainer(mountContainer);
  mountNode.appendChild(container);
  var resolveFn = function resolveFn2(result) {
    return result;
  };
  var onCancel3 = props.onCancel, onOk = props.onOk;
  function _onCancel(renderFn) {
    if (!onCancel3) {
      renderFn(false);
      resolveFn(false);
      return;
    }
    var cancelResult = onCancel3();
    if (cancelResult instanceof Promise) {
      cancelResult.then(function(res) {
        if (res === false) {
          return;
        }
        renderFn(false);
        resolveFn(true);
      });
    } else {
      if (cancelResult === false) {
        return;
      }
      renderFn(false);
      resolveFn(true);
    }
  }
  function _onOk(renderFn) {
    if (!onOk) {
      renderFn(false);
      resolveFn(true);
      return;
    }
    var okResult = onOk();
    if (okResult instanceof Promise) {
      okResult.then(function(res) {
        if (res === false) {
          return;
        }
        renderFn(false);
        resolveFn(true);
      });
    } else {
      if (okResult === false) {
        return;
      }
      renderFn(false);
      resolveFn(true);
    }
  }
  function _afterClose() {
    if (mountNode) {
      mountNode.removeChild(container);
    }
  }
  function render(visible) {
    var runTimeLocale2 = getRunTimeLocale();
    if (type === "alert") {
      var _props = props;
      if (runTimeLocale2 && runTimeLocale2.Alert) {
        _props = _objectSpread9(_objectSpread9({}, props), {}, {
          className: "",
          locale: runTimeLocale2.Alert
        });
      }
      import_react_dom4.default.render(import_react44.default.createElement(Alert, _extends({}, _props, {
        mountContainer: false,
        onCancel: function onCancel4() {
          _onCancel(render);
        },
        afterClose: _afterClose,
        visible
      })), container);
    } else {
      var _props2 = props;
      if (runTimeLocale2 && runTimeLocale2.Confirm) {
        _props2 = _objectSpread9(_objectSpread9({}, props), {}, {
          className: "",
          locale: runTimeLocale2.Confirm
        });
      }
      import_react_dom4.default.render(import_react44.default.createElement(Confirm, _extends({}, _props2, {
        mountContainer: false,
        onCancel: function onCancel4() {
          _onCancel(render);
        },
        onOk: function onOk2() {
          _onOk(render);
        },
        afterClose: _afterClose,
        visible
      })), container);
    }
  }
  var returnResult = new Promise(function(resolve) {
    resolveFn = resolve;
    render(true);
  });
  return {
    hide: function hide2() {
      render(false);
      resolveFn(true);
    },
    then: function then(resolve) {
      return returnResult.then(function(res) {
        resolve(res);
      });
    },
    catch: function _catch(_resolve, reject) {
      return returnResult.catch(function(res) {
        reject(res);
      });
    }
  };
}
Modal.alert = function alert(props) {
  return modalType(props, "alert");
};
Modal.confirm = function confirm(props) {
  return modalType(props, "confirm");
};
var modal_default = Modal;

// node_modules/zarm/es/notice-bar/index.js
var import_react45 = __toESM(require_react());

// node_modules/zarm/es/utils/keyframes.js
var toKeyframe = function toKeyframe2(name, content) {
  return "\n  @-webkit-keyframes ".concat(name, " {\n    ").concat(content, "\n  }\n  @keyframes ").concat(name, " {\n    ").concat(content, "\n  }\n");
};
var removeKeyframe = function removeKeyframe2(name) {
  var keyframe = document.getElementById(name);
  !!keyframe && document.getElementsByTagName("head")[0].removeChild(keyframe);
};
var addKeyframe = function addKeyframe2(name, content) {
  var style2 = document.createElement("style");
  style2.id = name;
  style2.type = "text/css";
  style2.innerHTML = toKeyframe(name, content);
  document.getElementsByTagName("head")[0].appendChild(style2);
};
var existKeyframe = function existKeyframe2(name) {
  var keyframe = document.getElementById(name);
  return !!keyframe;
};

// node_modules/zarm/es/notice-bar/index.js
function _createSuper42(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct42();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct42() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var NOTICEBAR_KEYFRAME_NAME = "za-notice-bar-scrolling";
var NoticeBar = function(_PureComponent) {
  _inherits(NoticeBar2, _PureComponent);
  var _super = _createSuper42(NoticeBar2);
  function NoticeBar2() {
    var _this2;
    _classCallCheck(this, NoticeBar2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.wrapper = null;
    _this2.content = null;
    _this2.state = {
      animationDuration: 0
    };
    return _this2;
  }
  _createClass(NoticeBar2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateScrolling();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateScrolling();
    }
  }, {
    key: "updateScrolling",
    value: function updateScrolling() {
      var _this$props = this.props, speed = _this$props.speed, delay = _this$props.delay;
      var wrapWidth = this.wrapper.getBoundingClientRect().width;
      var offsetWidth = this.content.getBoundingClientRect().width;
      if (offsetWidth > wrapWidth) {
        var animationDuration = Math.round(delay * 2 + offsetWidth / speed * 1e3);
        var delayPercent = Math.round(delay * 100 / animationDuration);
        if (existKeyframe(NOTICEBAR_KEYFRAME_NAME)) {
          removeKeyframe(NOTICEBAR_KEYFRAME_NAME);
        }
        addKeyframe(NOTICEBAR_KEYFRAME_NAME, "\n        0%, ".concat(delayPercent, "% {\n          -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n        }\n\n        ").concat(100 - delayPercent, "%, 100% {\n          -webkit-transform: translate3d(").concat(-(offsetWidth - wrapWidth), "px, 0, 0);\n          transform: translate3d(").concat(-(offsetWidth - wrapWidth), "px, 0, 0);\n        }\n      "));
        this.setState({
          animationDuration
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, children = _this$props2.children, others = _objectWithoutProperties(_this$props2, ["prefixCls", "children"]);
      var animationDuration = this.state.animationDuration;
      return import_react45.default.createElement(Message, _extends({}, others, {
        size: "lg"
      }), import_react45.default.createElement("div", {
        className: prefixCls,
        ref: function ref(ele) {
          _this2.wrapper = ele;
        }
      }, import_react45.default.createElement("div", {
        className: "".concat(prefixCls, "__body"),
        ref: function ref(ele) {
          _this2.content = ele;
        },
        style: animationDuration > 0 ? {
          WebkitAnimation: "".concat(NOTICEBAR_KEYFRAME_NAME, " ").concat(animationDuration, "ms linear infinite"),
          animation: "".concat(NOTICEBAR_KEYFRAME_NAME, " ").concat(animationDuration, "ms linear infinite")
        } : void 0
      }, children)));
    }
  }]);
  return NoticeBar2;
}(import_react45.PureComponent);
NoticeBar.displayName = "NoticeBar";
NoticeBar.defaultProps = {
  prefixCls: "za-notice-bar",
  theme: "warning",
  icon: import_react45.default.createElement(icon_default, {
    type: "broadcast"
  }),
  hasArrow: false,
  closable: false,
  speed: 50,
  delay: 2e3
};

// node_modules/zarm/es/panel/index.js
var import_react46 = __toESM(require_react());
var import_classnames30 = __toESM(require_classnames());
function _createSuper43(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct43();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct43() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Panel = function(_PureComponent) {
  _inherits(Panel2, _PureComponent);
  var _super = _createSuper43(Panel2);
  function Panel2() {
    _classCallCheck(this, Panel2);
    return _super.apply(this, arguments);
  }
  _createClass(Panel2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, title = _this$props.title, more = _this$props.more, children = _this$props.children;
      var cls = (0, import_classnames30.default)("".concat(prefixCls), className);
      return import_react46.default.createElement("div", {
        className: cls
      }, import_react46.default.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, title && import_react46.default.createElement("div", {
        className: "".concat(prefixCls, "__header__title")
      }, title), more && import_react46.default.createElement("div", {
        className: "".concat(prefixCls, "__header__more")
      }, more)), import_react46.default.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, children));
    }
  }]);
  return Panel2;
}(import_react46.PureComponent);
Panel.defaultProps = {
  prefixCls: "za-panel"
};

// node_modules/zarm/es/picker/Picker.js
var import_react47 = __toESM(require_react());
var import_isEqual5 = __toESM(require_isEqual());
function ownKeys10(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread10(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys10(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys10(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper44(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct44();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct44() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Picker = function(_Component) {
  _inherits(Picker2, _Component);
  var _super = _createSuper44(Picker2);
  function Picker2() {
    var _this2;
    _classCallCheck(this, Picker2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = _objectSpread10(_objectSpread10({}, parseProps_default.getSource(_this2.props)), {}, {
      stopScroll: false
    });
    _this2.onChange = function(selected) {
      var _this$props = _this2.props, valueMember = _this$props.valueMember, onChange2 = _this$props.onChange;
      var value = selected.map(function(item) {
        return item[valueMember];
      });
      _this2.setState({
        value,
        objValue: selected
      });
      if (typeof onChange2 === "function") {
        onChange2(selected);
      }
    };
    _this2.onCancel = function() {
      var onCancel3 = _this2.props.onCancel;
      var _this$state = _this2.state, _this$state$tempValue = _this$state.tempValue, tempValue = _this$state$tempValue === void 0 ? [] : _this$state$tempValue, _this$state$tempObjVa = _this$state.tempObjValue, tempObjValue = _this$state$tempObjVa === void 0 ? [] : _this$state$tempObjVa;
      _this2.setState({
        value: tempValue,
        objValue: tempObjValue
      });
      if (typeof onCancel3 === "function") {
        onCancel3();
      }
    };
    _this2.onOk = function() {
      var onOk = _this2.props.onOk;
      _this2.setState({
        stopScroll: true
      }, function() {
        _this2.setState({
          stopScroll: false
        }, function() {
          if (typeof onOk === "function") {
            onOk(_this2.state.objValue);
          }
        });
      });
    };
    return _this2;
  }
  _createClass(Picker2, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, cancelText = _this$props2.cancelText, okText = _this$props2.okText, title = _this$props2.title, locale = _this$props2.locale, maskClosable = _this$props2.maskClosable, mountContainer = _this$props2.mountContainer, destroy2 = _this$props2.destroy, onOk = _this$props2.onOk, onCancel3 = _this$props2.onCancel, visible = _this$props2.visible, others = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "cancelText", "okText", "title", "locale", "maskClosable", "mountContainer", "destroy", "onOk", "onCancel", "visible"]);
      var _this$state2 = this.state, value = _this$state2.value, _this$state2$stopScro = _this$state2.stopScroll, stopScroll = _this$state2$stopScro === void 0 ? false : _this$state2$stopScro;
      var noop3 = function noop4() {
      };
      return import_react47.default.createElement(popup_default, {
        className,
        visible,
        onMaskClick: maskClosable ? this.onCancel : noop3,
        mountContainer,
        destroy: destroy2
      }, import_react47.default.createElement("div", {
        className: prefixCls,
        onClick: function onClick2(e) {
          e.stopPropagation();
        }
      }, import_react47.default.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, import_react47.default.createElement("div", {
        className: "".concat(prefixCls, "__cancel"),
        onClick: this.onCancel
      }, cancelText || locale.cancelText), import_react47.default.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title || locale.title), import_react47.default.createElement("div", {
        className: "".concat(prefixCls, "__submit"),
        onClick: this.onOk
      }, okText || locale.okText)), import_react47.default.createElement(picker_view_default, _extends({}, others, {
        value,
        onChange: this.onChange,
        stopScroll
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!(0, import_isEqual5.default)(removeFnFromProps_default(props, ["onOk", "onCancel", "onChange"]), removeFnFromProps_default(state.prevProps, ["onOk", "onCancel", "onChange"]))) {
        return _objectSpread10(_objectSpread10({
          prevProps: props
        }, parseProps_default.getSource(props)), {}, {
          tempValue: parseProps_default.getSource(props).value,
          tempObjValue: parseProps_default.getSource(props).objValue
        });
      }
      return null;
    }
  }]);
  return Picker2;
}(import_react47.Component);
Picker.defaultProps = {
  dataSource: [],
  prefixCls: "za-picker",
  valueMember: "value",
  cols: Infinity,
  maskClosable: true,
  itemRender: function itemRender3(data) {
    return data.label;
  },
  destroy: false
};

// node_modules/zarm/es/picker/index.js
var picker_default = config_receiver_default("Picker")(Picker);

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d2 = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d2 = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
          return;
      } finally {
        if (_d2)
          throw _e;
      }
    }
    return _arr;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

// node_modules/zarm/es/popper/index.js
var import_react49 = __toESM(require_react());
var import_react_dom5 = __toESM(require_react_dom());

// node_modules/popper.js/dist/esm/popper.js
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && typeof navigator !== "undefined";
var timeoutDuration = function() {
  var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();
function microtaskDebounce(fn) {
  var called = false;
  return function() {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function() {
      called = false;
      fn();
    });
  };
}
function taskDebounce(fn) {
  var scheduled = false;
  return function() {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function() {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}
var supportsMicroTasks = isBrowser && window.Promise;
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
}
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  var window2 = element.ownerDocument.defaultView;
  var css = window2.getComputedStyle(element, null);
  return property ? css[property] : css;
}
function getParentNode(element) {
  if (element.nodeName === "HTML") {
    return element;
  }
  return element.parentNode || element.host;
}
function getScrollParent(element) {
  if (!element) {
    return document.body;
  }
  switch (element.nodeName) {
    case "HTML":
    case "BODY":
      return element.ownerDocument.body;
    case "#document":
      return element.body;
  }
  var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }
  return getScrollParent(getParentNode(element));
}
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}
var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }
  var noOffsetParent = isIE(10) ? document.body : null;
  var offsetParent = element.offsetParent || null;
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }
  var nodeName = offsetParent && offsetParent.nodeName;
  if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }
  if (["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, "position") === "static") {
    return getOffsetParent(offsetParent);
  }
  return offsetParent;
}
function isOffsetContainer(element) {
  var nodeName = element.nodeName;
  if (nodeName === "BODY") {
    return false;
  }
  return nodeName === "HTML" || getOffsetParent(element.firstElementChild) === element;
}
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }
  return node;
}
function findCommonOffsetParent(element1, element2) {
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;
  var range2 = document.createRange();
  range2.setStart(start, 0);
  range2.setEnd(end, 0);
  var commonAncestorContainer = range2.commonAncestorContainer;
  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }
    return getOffsetParent(commonAncestorContainer);
  }
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "top";
  var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
  var nodeName = element.nodeName;
  if (nodeName === "BODY" || nodeName === "HTML") {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }
  return element[upperSide];
}
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var scrollTop = getScroll(element, "top");
  var scrollLeft = getScroll(element, "left");
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}
function getBordersSize(styles, axis) {
  var sideA = axis === "x" ? "Left" : "Top";
  var sideB = sideA === "Left" ? "Right" : "Bottom";
  return parseFloat(styles["border" + sideA + "Width"]) + parseFloat(styles["border" + sideB + "Width"]);
}
function getSize(axis, body, html, computedStyle) {
  return Math.max(body["offset" + axis], body["scroll" + axis], html["client" + axis], html["offset" + axis], html["scroll" + axis], isIE(10) ? parseInt(html["offset" + axis]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Top" : "Left")]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Bottom" : "Right")]) : 0);
}
function getWindowSizes(document2) {
  var body = document2.body;
  var html = document2.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);
  return {
    height: getSize("Height", body, html, computedStyle),
    width: getSize("Width", body, html, computedStyle)
  };
}
var classCallCheck = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps)
      defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var defineProperty = function(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
};
var _extends2 = Object.assign || function(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};
function getClientRect(offsets) {
  return _extends2({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}
function getBoundingClientRect(element) {
  var rect = {};
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, "top");
      var scrollLeft = getScroll(element, "left");
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {
  }
  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };
  var sizes = element.nodeName === "HTML" ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;
  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, "x");
    vertScrollbar -= getBordersSize(styles, "y");
    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }
  return getClientRect(result);
}
function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var isIE102 = isIE(10);
  var isHTML = parent.nodeName === "HTML";
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);
  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;
  if (!isIE102 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);
    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }
  if (isIE102 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== "BODY") {
    offsets = includeScroll(offsets, parent);
  }
  return offsets;
}
function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);
  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;
  var offset3 = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width,
    height
  };
  return getClientRect(offset3);
}
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === "BODY" || nodeName === "HTML") {
    return false;
  }
  if (getStyleComputedProperty(element, "position") === "fixed") {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}
function getFixedPositionOffsetParent(element) {
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, "transform") === "none") {
    el = el.parentElement;
  }
  return el || document.documentElement;
}
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  if (boundariesElement === "viewport") {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    var boundariesNode = void 0;
    if (boundariesElement === "scrollParent") {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === "BODY") {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === "window") {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }
    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
    if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument), height = _getWindowSizes.height, width = _getWindowSizes.width;
      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      boundaries = offsets;
    }
  }
  padding = padding || 0;
  var isPaddingNumber = typeof padding === "number";
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
  return boundaries;
}
function getArea(_ref) {
  var width = _ref.width, height = _ref.height;
  return width * height;
}
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
  if (placement.indexOf("auto") === -1) {
    return placement;
  }
  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };
  var sortedAreas = Object.keys(rects).map(function(key) {
    return _extends2({
      key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function(a, b) {
    return b.area - a.area;
  });
  var filteredAreas = sortedAreas.filter(function(_ref2) {
    var width = _ref2.width, height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });
  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
  var variation = placement.split("-")[1];
  return computedPlacement + (variation ? "-" + variation : "");
}
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}
function getOuterSizes3(element) {
  var window2 = element.ownerDocument.defaultView;
  var styles = window2.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}
function getOppositePlacement(placement) {
  var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split("-")[0];
  var popperRect = getOuterSizes3(popper);
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };
  var isHoriz = ["right", "left"].indexOf(placement) !== -1;
  var mainSide = isHoriz ? "top" : "left";
  var secondarySide = isHoriz ? "left" : "top";
  var measurement = isHoriz ? "height" : "width";
  var secondaryMeasurement = !isHoriz ? "height" : "width";
  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }
  return popperOffsets;
}
function find(arr, check) {
  if (Array.prototype.find) {
    return arr.find(check);
  }
  return arr.filter(check)[0];
}
function findIndex2(arr, prop, value) {
  if (Array.prototype.findIndex) {
    return arr.findIndex(function(cur) {
      return cur[prop] === value;
    });
  }
  var match = find(arr, function(obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}
function runModifiers(modifiers2, data, ends) {
  var modifiersToRun = ends === void 0 ? modifiers2 : modifiers2.slice(0, findIndex2(modifiers2, "name", ends));
  modifiersToRun.forEach(function(modifier) {
    if (modifier["function"]) {
      console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
    }
    var fn = modifier["function"] || modifier.fn;
    if (modifier.enabled && isFunction(fn)) {
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);
      data = fn(data, modifier);
    }
  });
  return data;
}
function update() {
  if (this.state.isDestroyed) {
    return;
  }
  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
  data.originalPlacement = data.placement;
  data.positionFixed = this.options.positionFixed;
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute";
  data = runModifiers(this.modifiers, data);
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}
function isModifierEnabled(modifiers2, modifierName) {
  return modifiers2.some(function(_ref) {
    var name = _ref.name, enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}
function getSupportedPropertyName(property) {
  var prefixes = [false, "ms", "Webkit", "Moz", "O"];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? "" + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== "undefined") {
      return toCheck;
    }
  }
  return null;
}
function destroy() {
  this.state.isDestroyed = true;
  if (isModifierEnabled(this.modifiers, "applyStyle")) {
    this.popper.removeAttribute("x-placement");
    this.popper.style.position = "";
    this.popper.style.top = "";
    this.popper.style.left = "";
    this.popper.style.right = "";
    this.popper.style.bottom = "";
    this.popper.style.willChange = "";
    this.popper.style[getSupportedPropertyName("transform")] = "";
  }
  this.disableEventListeners();
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}
function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === "BODY";
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });
  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}
function setupEventListeners(reference, options, state, updateBound) {
  state.updateBound = updateBound;
  getWindow(reference).addEventListener("resize", state.updateBound, { passive: true });
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, "scroll", state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;
  return state;
}
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}
function removeEventListeners(reference, state) {
  getWindow(reference).removeEventListener("resize", state.updateBound);
  state.scrollParents.forEach(function(target) {
    target.removeEventListener("scroll", state.updateBound);
  });
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}
function isNumeric(n) {
  return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
}
function setStyles(element, styles) {
  Object.keys(styles).forEach(function(prop) {
    var unit = "";
    if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = "px";
    }
    element.style[prop] = styles[prop] + unit;
  });
}
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function(prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}
function applyStyle(data) {
  setStyles(data.instance.popper, data.styles);
  setAttributes(data.instance.popper, data.attributes);
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }
  return data;
}
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
  popper.setAttribute("x-placement", placement);
  setStyles(popper, { position: options.positionFixed ? "fixed" : "absolute" });
  return options;
}
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var round = Math.round, floor = Math.floor;
  var noRound = function noRound2(v) {
    return v;
  };
  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);
  var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf("-") !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;
  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}
var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
function computeStyle(data, options) {
  var x = options.x, y = options.y;
  var popper = data.offsets.popper;
  var legacyGpuAccelerationOption = find(data.instance.modifiers, function(modifier) {
    return modifier.name === "applyStyle";
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== void 0) {
    console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== void 0 ? legacyGpuAccelerationOption : options.gpuAcceleration;
  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);
  var styles = {
    position: popper.position
  };
  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
  var sideA = x === "bottom" ? "top" : "bottom";
  var sideB = y === "right" ? "left" : "right";
  var prefixedProperty = getSupportedPropertyName("transform");
  var left = void 0, top = void 0;
  if (sideA === "bottom") {
    if (offsetParent.nodeName === "HTML") {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === "right") {
    if (offsetParent.nodeName === "HTML") {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = "translate3d(" + left + "px, " + top + "px, 0)";
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = "transform";
  } else {
    var invertTop = sideA === "bottom" ? -1 : 1;
    var invertLeft = sideB === "right" ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ", " + sideB;
  }
  var attributes = {
    "x-placement": data.placement
  };
  data.attributes = _extends2({}, attributes, data.attributes);
  data.styles = _extends2({}, styles, data.styles);
  data.arrowStyles = _extends2({}, data.offsets.arrow, data.arrowStyles);
  return data;
}
function isModifierRequired(modifiers2, requestingName, requestedName) {
  var requesting = find(modifiers2, function(_ref) {
    var name = _ref.name;
    return name === requestingName;
  });
  var isRequired = !!requesting && modifiers2.some(function(modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });
  if (!isRequired) {
    var _requesting = "`" + requestingName + "`";
    var requested = "`" + requestedName + "`";
    console.warn(requested + " modifier is required by " + _requesting + " modifier in order to work, be sure to include it before " + _requesting + "!");
  }
  return isRequired;
}
function arrow(data, options) {
  var _data$offsets$arrow;
  if (!isModifierRequired(data.instance.modifiers, "arrow", "keepTogether")) {
    return data;
  }
  var arrowElement = options.element;
  if (typeof arrowElement === "string") {
    arrowElement = data.instance.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return data;
    }
  } else {
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn("WARNING: `arrow.element` must be child of its popper element!");
      return data;
    }
  }
  var placement = data.placement.split("-")[0];
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var isVertical = ["left", "right"].indexOf(placement) !== -1;
  var len = isVertical ? "height" : "width";
  var sideCapitalized = isVertical ? "Top" : "Left";
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? "left" : "top";
  var opSide = isVertical ? "bottom" : "right";
  var arrowElementSize = getOuterSizes3(arrowElement)[len];
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css["margin" + sideCapitalized]);
  var popperBorderSide = parseFloat(css["border" + sideCapitalized + "Width"]);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ""), _data$offsets$arrow);
  return data;
}
function getOppositeVariation(variation) {
  if (variation === "end") {
    return "start";
  } else if (variation === "start") {
    return "end";
  }
  return variation;
}
var placements = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"];
var validPlacements = placements.slice(3);
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}
var BEHAVIORS = {
  FLIP: "flip",
  CLOCKWISE: "clockwise",
  COUNTERCLOCKWISE: "counterclockwise"
};
function flip(data, options) {
  if (isModifierEnabled(data.instance.modifiers, "inner")) {
    return data;
  }
  if (data.flipped && data.placement === data.originalPlacement) {
    return data;
  }
  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
  var placement = data.placement.split("-")[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split("-")[1] || "";
  var flipOrder = [];
  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }
  flipOrder.forEach(function(step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }
    placement = data.placement.split("-")[0];
    placementOpposite = getOppositePlacement(placement);
    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;
    var floor = Math.floor;
    var overlapsRef = placement === "left" && floor(popperOffsets.right) > floor(refOffsets.left) || placement === "right" && floor(popperOffsets.left) < floor(refOffsets.right) || placement === "top" && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === "bottom" && floor(popperOffsets.top) < floor(refOffsets.bottom);
    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
    var overflowsBoundaries = placement === "left" && overflowsLeft || placement === "right" && overflowsRight || placement === "top" && overflowsTop || placement === "bottom" && overflowsBottom;
    var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === "start" && overflowsLeft || isVertical && variation === "end" && overflowsRight || !isVertical && variation === "start" && overflowsTop || !isVertical && variation === "end" && overflowsBottom);
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === "start" && overflowsRight || isVertical && variation === "end" && overflowsLeft || !isVertical && variation === "start" && overflowsBottom || !isVertical && variation === "end" && overflowsTop);
    var flippedVariation = flippedVariationByRef || flippedVariationByContent;
    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      data.flipped = true;
      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }
      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }
      data.placement = placement + (variation ? "-" + variation : "");
      data.offsets.popper = _extends2({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
      data = runModifiers(data.instance.modifiers, data, "flip");
    }
  });
  return data;
}
function keepTogether(data) {
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var placement = data.placement.split("-")[0];
  var floor = Math.floor;
  var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
  var side = isVertical ? "right" : "bottom";
  var opSide = isVertical ? "left" : "top";
  var measurement = isVertical ? "width" : "height";
  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }
  return data;
}
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];
  if (!value) {
    return str;
  }
  if (unit.indexOf("%") === 0) {
    var element = void 0;
    switch (unit) {
      case "%p":
        element = popperOffsets;
        break;
      case "%":
      case "%r":
      default:
        element = referenceOffsets;
    }
    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === "vh" || unit === "vw") {
    var size = void 0;
    if (unit === "vh") {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    return value;
  }
}
function parseOffset(offset3, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];
  var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;
  var fragments = offset3.split(/(\+|\-)/).map(function(frag) {
    return frag.trim();
  });
  var divider = fragments.indexOf(find(fragments, function(frag) {
    return frag.search(/,|\s/) !== -1;
  }));
  if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
    console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
  }
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
  ops = ops.map(function(op, index) {
    var measurement = (index === 1 ? !useHeight : useHeight) ? "height" : "width";
    var mergeWithPrevious = false;
    return op.reduce(function(a, b) {
      if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, []).map(function(str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });
  ops.forEach(function(op, index) {
    op.forEach(function(frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
      }
    });
  });
  return offsets;
}
function offset2(data, _ref) {
  var offset3 = _ref.offset;
  var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var basePlacement = placement.split("-")[0];
  var offsets = void 0;
  if (isNumeric(+offset3)) {
    offsets = [+offset3, 0];
  } else {
    offsets = parseOffset(offset3, popper, reference, basePlacement);
  }
  if (basePlacement === "left") {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === "right") {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === "top") {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === "bottom") {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }
  data.popper = popper;
  return data;
}
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }
  var transformProp = getSupportedPropertyName("transform");
  var popperStyles = data.instance.popper.style;
  var top = popperStyles.top, left = popperStyles.left, transform2 = popperStyles[transformProp];
  popperStyles.top = "";
  popperStyles.left = "";
  popperStyles[transformProp] = "";
  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform2;
  options.boundaries = boundaries;
  var order = options.priority;
  var popper = data.offsets.popper;
  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === "right" ? "left" : "top";
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === "right" ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };
  order.forEach(function(placement) {
    var side = ["left", "top"].indexOf(placement) !== -1 ? "primary" : "secondary";
    popper = _extends2({}, popper, check[side](placement));
  });
  data.offsets.popper = popper;
  return data;
}
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split("-")[0];
  var shiftvariation = placement.split("-")[1];
  if (shiftvariation) {
    var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
    var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
    var side = isVertical ? "left" : "top";
    var measurement = isVertical ? "width" : "height";
    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };
    data.offsets.popper = _extends2({}, popper, shiftOffsets[shiftvariation]);
  }
  return data;
}
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, "hide", "preventOverflow")) {
    return data;
  }
  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function(modifier) {
    return modifier.name === "preventOverflow";
  }).boundaries;
  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    if (data.hide === true) {
      return data;
    }
    data.hide = true;
    data.attributes["x-out-of-boundaries"] = "";
  } else {
    if (data.hide === false) {
      return data;
    }
    data.hide = false;
    data.attributes["x-out-of-boundaries"] = false;
  }
  return data;
}
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split("-")[0];
  var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
  var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;
  var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;
  popper[isHoriz ? "left" : "top"] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);
  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);
  return data;
}
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },
  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset2,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },
  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ["left", "right", "top", "bottom"],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: "scrollParent"
  },
  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },
  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: "[x-arrow]"
  },
  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: "flip",
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: "viewport",
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },
  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },
  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },
  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: "bottom",
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: "right"
  },
  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: void 0
  }
};
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: "bottom",
  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,
  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,
  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,
  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {
  },
  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {
  },
  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers
};
var Popper = function() {
  function Popper3(reference, popper) {
    var _this2 = this;
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    classCallCheck(this, Popper3);
    this.scheduleUpdate = function() {
      return requestAnimationFrame(_this2.update);
    };
    this.update = debounce(this.update.bind(this));
    this.options = _extends2({}, Popper3.Defaults, options);
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;
    this.options.modifiers = {};
    Object.keys(_extends2({}, Popper3.Defaults.modifiers, options.modifiers)).forEach(function(name) {
      _this2.options.modifiers[name] = _extends2({}, Popper3.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });
    this.modifiers = Object.keys(this.options.modifiers).map(function(name) {
      return _extends2({
        name
      }, _this2.options.modifiers[name]);
    }).sort(function(a, b) {
      return a.order - b.order;
    });
    this.modifiers.forEach(function(modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this2.reference, _this2.popper, _this2.options, modifierOptions, _this2.state);
      }
    });
    this.update();
    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      this.enableEventListeners();
    }
    this.state.eventsEnabled = eventsEnabled;
  }
  createClass(Popper3, [{
    key: "update",
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: "destroy",
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: "enableEventListeners",
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: "disableEventListeners",
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }
    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */
    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */
  }]);
  return Popper3;
}();
Popper.Utils = (typeof window !== "undefined" ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;
var popper_default = Popper;

// node_modules/zarm/es/popper/index.js
var import_classnames31 = __toESM(require_classnames());

// node_modules/zarm/es/click-outside/ClickOutside.js
var import_react48 = __toESM(require_react());
function _createSuper45(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct45();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct45() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ClickOutside = function(_React$Component) {
  _inherits(ClickOutside2, _React$Component);
  var _super = _createSuper45(ClickOutside2);
  function ClickOutside2() {
    var _this2;
    _classCallCheck(this, ClickOutside2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.isTouch = false;
    _this2.container = null;
    _this2.mountContainer = function(node) {
      _this2.container = node;
    };
    _this2.handle = function(event) {
      if (event.type === "touchend") {
        _this2.isTouch = true;
      }
      if (event.type === "click" && _this2.isTouch)
        return;
      var _this$props = _this2.props, onClickOutside = _this$props.onClickOutside, ignoredNode = _this$props.ignoredNode;
      if (!onClickOutside)
        return;
      var el = _this2.container;
      if (ignoredNode && ignoredNode.contains(event.target))
        return;
      if (el && !el.contains(event.target))
        onClickOutside(event);
    };
    return _this2;
  }
  _createClass(ClickOutside2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var disabled = this.props.disabled;
      if (!disabled) {
        this.bindEvent();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var disabled = this.props.disabled;
      if (prevProps.disabled !== disabled) {
        if (disabled) {
          this.unBindEvent();
        } else {
          this.bindEvent();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var disabled = this.props.disabled;
      if (!disabled) {
        this.unBindEvent();
      }
    }
  }, {
    key: "bindEvent",
    value: function bindEvent() {
      events_default.on(document, "click", this.handle);
      events_default.on(document, "touchend", this.handle);
    }
  }, {
    key: "unBindEvent",
    value: function unBindEvent() {
      events_default.off(document, "click", this.handle);
      events_default.off(document, "touchend", this.handle);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props, onClickOutside = _this$props2.onClickOutside, disabled = _this$props2.disabled, children = _this$props2.children, ignoredNode = _this$props2.ignoredNode, rest = _objectWithoutProperties(_this$props2, ["onClickOutside", "disabled", "children", "ignoredNode"]);
      return import_react48.default.createElement("div", _extends({
        ref: this.mountContainer
      }, rest), children);
    }
  }]);
  return ClickOutside2;
}(import_react48.default.Component);
ClickOutside.defaultProps = {
  disabled: false
};

// node_modules/zarm/es/click-outside/index.js
var click_outside_default = ClickOutside;

// node_modules/zarm/es/popper/PropsType.js
var directionMap = {
  top: "top",
  topLeft: "top-start",
  topRight: "top-end",
  right: "right",
  rightTop: "right-start",
  rightBottom: "right-end",
  bottom: "bottom",
  bottomLeft: "bottom-start",
  bottomRight: "bottom-end",
  left: "left",
  leftTop: "left-start",
  leftBottom: "left-end"
};

// node_modules/zarm/es/popper/index.js
function _createSuper46(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct46();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct46() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function ownKeys11(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread11(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys11(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys11(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var invertKeyValues = function invertKeyValues2(obj, fn) {
  return Object.keys(obj).reduce(function(acc, key) {
    var val = fn ? fn(obj[key]) : obj[key];
    acc[val] = acc[val] || [];
    acc[val].push(key);
    return acc;
  }, {});
};
var getPopperClientRect = function getPopperClientRect2(popperOffsets) {
  var offsets = _objectSpread11({}, popperOffsets);
  offsets.right = offsets.left + offsets.width;
  offsets.bottom = offsets.top + offsets.height;
  return offsets;
};
var setTransformOrigin = function setTransformOrigin2(domNode) {
  var placement = domNode.getAttribute("x-placement");
  var transformOrigin = {
    "top-start": "left bottom",
    top: "center bottom",
    "top-end": "right bottom",
    "left-start": "right top",
    left: "right center",
    "left-end": "right bottom",
    "bottom-start": "left top",
    bottom: "center top",
    "bottom-end": "right top",
    "right-start": "left top",
    right: "left center",
    "right-end": "left bottom"
  };
  domNode.style.transformOrigin = transformOrigin[placement];
};
var customArrowOffsetFn = function customArrowOffsetFn2(data) {
  var _data$placement$split = data.placement.split("-"), _data$placement$split2 = _slicedToArray(_data$placement$split, 2), placement = _data$placement$split2[0], placement1 = _data$placement$split2[1];
  var arrow2 = data.instance.options.modifiers && data.instance.options.modifiers.arrow.element;
  var reference = data.offsets.reference;
  var popper = getPopperClientRect(data.offsets.popper);
  var isVertical = ["left", "right"].indexOf(placement) !== -1;
  var len = isVertical ? "height" : "width";
  var side = isVertical ? "top" : "left";
  var altSide = isVertical ? "left" : "top";
  var opSide = isVertical ? "bottom" : "right";
  var arrowSize = getOuterSizes(arrow2)[len];
  var offsetSize = parseFloat(getComputedStyle(data.instance.popper, null).paddingLeft);
  var hashMap = {
    start: side === "top" || side === "left" ? reference[side] + offsetSize : reference[opSide] - offsetSize - arrowSize,
    center: reference[side] + reference[len] / 2 - arrowSize / 2,
    end: side === "top" || side === "left" ? reference[opSide] - offsetSize - arrowSize : reference[side] + offsetSize
  };
  var place = hashMap[placement1 || "center"];
  var sideValue = place - popper[side];
  data.arrowElement = arrow2;
  data.arrowStyles[side] = Math.floor(sideValue).toString();
  data.arrowStyles[altSide] = "";
  return data;
};
var popperInstances = /* @__PURE__ */ new Set();
var Popper2 = function(_React$Component) {
  _inherits(Popper3, _React$Component);
  var _super = _createSuper46(Popper3);
  function Popper3() {
    var _this2;
    _classCallCheck(this, Popper3);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.popper = void 0;
    _this2.popperNode = void 0;
    _this2.reference = void 0;
    _this2.arrowRef = void 0;
    _this2.enterTimer = void 0;
    _this2.leaveTimer = void 0;
    _this2.state = {
      show: false,
      direction: _this2.props.direction,
      arrowRef: null,
      mounted: false,
      isPending: false,
      animationState: "leave"
    };
    _this2.handleOpen = function() {
      var _this$props = _this2.props, direction = _this$props.direction, hasArrow = _this$props.hasArrow, arrowPointAtCenter = _this$props.arrowPointAtCenter;
      var reference = _this2.reference;
      var popperNode = _this2.popperNode;
      if (!popperNode) {
        return;
      }
      if (_this2.popper) {
        _this2.destroy();
      }
      _this2.popper = new popper_default(reference, popperNode, {
        placement: directionMap[direction],
        modifiers: {
          preventOverflow: {
            boundariesElement: "window"
          },
          computeStyle: {
            gpuAcceleration: false
          },
          arrow: _objectSpread11({
            enabled: Boolean(_this2.arrowRef),
            element: _this2.arrowRef
          }, !(hasArrow && arrowPointAtCenter) && {
            fn: customArrowOffsetFn
          })
        },
        onCreate: _this2.handlePopperUpdate,
        onUpdate: _this2.handlePopperUpdate
      });
      events_default.on(_this2.popperNode, "webkitAnimationEnd", _this2.animationEnd);
      events_default.on(_this2.popperNode, "animationend", _this2.animationEnd);
      _this2.enter();
      popperInstances.add(_this2.popper);
    };
    _this2.animationEnd = function(e) {
      e.stopPropagation();
      var animationState = _this2.state.animationState;
      var destroy2 = _this2.props.destroy;
      if (animationState === "leave") {
        _this2.setState(_objectSpread11({
          show: false,
          isPending: false
        }, destroy2 && {
          mounted: false
        }), function() {
          _this2.destroy();
          _this2.props.onVisibleChange(false);
        });
      } else {
        _this2.props.onVisibleChange(true);
      }
    };
    _this2.handlePopperUpdate = function(data) {
      var animationType = _this2.props.animationType;
      if (animationType !== "menuSlide")
        setTransformOrigin(_this2.popperNode);
      if (data.placement !== _this2.state.direction) {
        _this2.setState({
          direction: invertKeyValues(directionMap)[data.placement]
        });
      }
    };
    _this2.handleClose = function() {
      if (!_this2.popper) {
        return;
      }
      _this2.leave();
    };
    _this2.handleClick = function(event) {
      var trigger = _this2.props.trigger;
      var show = _this2.state.show;
      if (trigger === "contextMenu")
        event.preventDefault();
      _this2.setState({
        mounted: true
      }, function() {
        if (!show) {
          _this2.handleOpen();
        } else {
          _this2.handleClose();
        }
      });
    };
    _this2.handleEnter = function(event) {
      var _this$props2 = _this2.props, children = _this$props2.children, mouseEnterDelay = _this$props2.mouseEnterDelay;
      var childrenProps = children.props;
      if (import_react49.default.isValidElement(children) && event.type === "mouseover" && childrenProps.onMouseOver) {
        childrenProps.onMouseOver(event);
      }
      clearTimeout(_this2.enterTimer);
      clearTimeout(_this2.leaveTimer);
      _this2.enterTimer = setTimeout(function() {
        _this2.setState({
          mounted: true
        }, _this2.handleOpen);
      }, mouseEnterDelay);
    };
    _this2.handleLeave = function(event) {
      var _this$props3 = _this2.props, children = _this$props3.children, mouseLeaveDelay = _this$props3.mouseLeaveDelay;
      var childrenProps = children.props;
      if (import_react49.default.isValidElement(children) && event.type === "blur" && childrenProps.onBlur) {
        childrenProps.onBlur(event);
      }
      if (import_react49.default.isValidElement(children) && event.type === "mouseleave" && childrenProps.onMouseLeave) {
        childrenProps.onMouseLeave(event);
      }
      clearTimeout(_this2.enterTimer);
      clearTimeout(_this2.leaveTimer);
      _this2.leaveTimer = setTimeout(function() {
        _this2.handleClose();
      }, mouseLeaveDelay);
    };
    return _this2;
  }
  _createClass(Popper3, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props4 = this.props, direction = _this$props4.direction, visible = _this$props4.visible;
      if (visible && (prevProps.visible !== visible || prevProps.direction !== direction)) {
        this.handleOpen();
      }
      if (prevProps.visible !== visible && !visible) {
        this.handleClose();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.popperNode) {
        events_default.off(this.popperNode, "webkitAnimationEnd", this.animationEnd);
        events_default.off(this.popperNode, "animationend", this.animationEnd);
      }
      this.destroy();
      clearTimeout(this.enterTimer);
      clearTimeout(this.leaveTimer);
    }
  }, {
    key: "getPopperDomNode",
    value: function getPopperDomNode() {
      return this.popperNode;
    }
  }, {
    key: "getTransitionName",
    value: function getTransitionName(animationType, animationState) {
      if (this.popperNode) {
        var placement = this.popperNode.getAttribute("x-placement");
        if (animationType === "menuSlide" && placement) {
          if (placement.includes("top")) {
            return "za-".concat(animationType, "-down-").concat(animationState);
          }
          return "za-".concat(animationType, "-up-").concat(animationState);
        }
        return "za-".concat(animationType, "-").concat(animationState);
      }
    }
  }, {
    key: "mountContainer",
    value: function mountContainer() {
      var mountContainer2 = this.props.mountContainer;
      if (mountContainer2) {
        if (typeof mountContainer2 === "function") {
          return mountContainer2();
        }
        if (_typeof(mountContainer2) === "object" && mountContainer2 instanceof HTMLElement) {
          return mountContainer2;
        }
      }
      return document.body;
    }
  }, {
    key: "enter",
    value: function enter() {
      this.setState({
        show: true,
        isPending: true,
        animationState: "enter"
      });
    }
  }, {
    key: "leave",
    value: function leave() {
      this.setState({
        show: false,
        isPending: true,
        animationState: "leave"
      });
    }
  }, {
    key: "destroy",
    value: function destroy2() {
      if (this.popper) {
        this.popper.destroy();
        popperInstances.delete(this.popper);
        this.popper = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props5 = this.props, children = _this$props5.children, content = _this$props5.content, prefixCls = _this$props5.prefixCls, className = _this$props5.className, trigger = _this$props5.trigger, hasArrow = _this$props5.hasArrow, animationType = _this$props5.animationType, animationDuration = _this$props5.animationDuration, style2 = _this$props5.style;
      var _this$state = this.state, direction = _this$state.direction, mounted = _this$state.mounted, animationState = _this$state.animationState, isPending = _this$state.isPending;
      var transitionName = this.getTransitionName(animationType, animationState);
      var innerCls = (0, import_classnames31.default)(className, prefixCls, "".concat(prefixCls, "--").concat(direction), (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--hidden"), animationState === "leave"), _defineProperty(_classnames, transitionName, isPending), _classnames));
      var child = import_react49.default.isValidElement(children) ? children : import_react49.default.createElement("span", null, children);
      var childrenProps = _objectSpread11({}, children && children.props);
      var event = {};
      if (trigger === "click") {
        childrenProps.onClick = this.handleClick;
      }
      if (trigger === "contextMenu") {
        childrenProps.onContextMenu = this.handleClick;
      }
      if (trigger === "hover") {
        childrenProps.onMouseOver = this.handleEnter;
        childrenProps.onMouseLeave = this.handleLeave;
        event.onMouseOver = this.handleEnter;
        event.onMouseLeave = this.handleLeave;
      }
      if (trigger === "focus") {
        childrenProps.onFocus = this.handleClick;
      }
      var toolTip = import_react49.default.createElement(click_outside_default, {
        onClickOutside: this.handleClose,
        ignoredNode: this.reference,
        className: "".concat(prefixCls, "-container"),
        disabled: trigger === "manual"
      }, import_react49.default.createElement("div", _extends({
        role: "tooltip",
        style: _objectSpread11(_objectSpread11({
          position: "absolute",
          animationDuration: "".concat(animationDuration, "ms")
        }, animationState === "leave" && !isPending && {
          display: "none"
        }), style2),
        className: innerCls,
        ref: function ref(node) {
          _this2.popperNode = node;
        }
      }, event), import_react49.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, content), hasArrow && import_react49.default.createElement("span", {
        className: "".concat(prefixCls, "__arrow"),
        ref: function ref(el) {
          _this2.arrowRef = el;
        }
      })));
      return import_react49.default.createElement(import_react49.default.Fragment, null, mounted && (0, import_react_dom5.createPortal)(toolTip, this.mountContainer()), import_react49.default.cloneElement(child, _objectSpread11({
        ref: function ref(node) {
          _this2.reference = import_react_dom5.default.findDOMNode(node);
        }
      }, childrenProps)));
    }
  }], [{
    key: "update",
    value: function update2() {
      popperInstances.forEach(function(popperInstance) {
        return popperInstance.scheduleUpdate();
      });
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if ("visible" in props && props.trigger === "manual") {
        return _objectSpread11(_objectSpread11({}, state), {}, {
          show: props.visible
        }, props.visible && {
          mounted: true
        });
      }
      return null;
    }
  }]);
  return Popper3;
}(import_react49.default.Component);
Popper2.defaultProps = {
  prefixCls: "za-popper",
  hasArrow: false,
  destroy: true,
  arrowPointAtCenter: false,
  trigger: (canUseDOM && /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent) ? "click" : "hover") || "click",
  direction: "top",
  mouseEnterDelay: 150,
  mouseLeaveDelay: 100,
  visible: false,
  content: "",
  animationType: "zoomFade",
  animationDuration: 300,
  onVisibleChange: function onVisibleChange() {
  }
};
var popper_default2 = Popper2;

// node_modules/zarm/es/progress/index.js
var import_react50 = __toESM(require_react());
var import_classnames32 = __toESM(require_classnames());
function ownKeys12(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread12(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys12(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys12(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper47(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct47();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct47() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Progress = function(_PureComponent) {
  _inherits(Progress2, _PureComponent);
  var _super = _createSuper47(Progress2);
  function Progress2(props) {
    var _this2;
    _classCallCheck(this, Progress2);
    _this2 = _super.call(this, props);
    _this2.progressElement = void 0;
    _this2.state = {
      svgStrokeWidth: _this2.strokeWidth
    };
    return _this2;
  }
  _createClass(Progress2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.useSVG) {
        this.resetSVGStrokeWidth();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var props = this.props;
      if (prevProps.strokeWidth !== props.strokeWidth) {
        this.resetSVGStrokeWidth();
      }
    }
  }, {
    key: "useSVG",
    get: function get() {
      var props = this.props;
      return props.shape === "semi-circle" || props.shape === "circle";
    }
  }, {
    key: "strokeWidth",
    get: function get() {
      var _this$props = this.props, strokeWidth = _this$props.strokeWidth, size = _this$props.size;
      var strokeWeights = Progress2.strokeWeights;
      var backup = strokeWeights[size && size in strokeWeights ? size : "md"];
      return Math.max(1, strokeWidth || backup);
    }
  }, {
    key: "resetSVGStrokeWidth",
    value: function resetSVGStrokeWidth() {
      var baseWidth = 32;
      var clientWidth = this.progressElement.clientWidth;
      this.setState({
        svgStrokeWidth: baseWidth / clientWidth * this.strokeWidth
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props2 = this.props, theme = _this$props2.theme, percent = _this$props2.percent, strokeShape = _this$props2.strokeShape, shape = _this$props2.shape, size = _this$props2.size, style2 = _this$props2.style, prefixCls = _this$props2.prefixCls, className = _this$props2.className, children = _this$props2.children, format = _this$props2.text;
      var state = this.state;
      var strokeWidth = this.useSVG ? state.svgStrokeWidth : this.strokeWidth;
      var hasKnownSize = size && size in Progress2.strokeWeights;
      var cls = (0, import_classnames32.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), hasKnownSize), _classnames));
      var sizeStyle = {};
      if (!hasKnownSize) {
        sizeStyle.width = size;
        if (shape === "circle") {
          sizeStyle.height = size;
        }
        if (shape === "semi-circle") {
          if (typeof size === "number") {
            sizeStyle.height = "".concat(size / 2, "px");
          } else if (typeof size === "string") {
            sizeStyle.height = size.replace(/^(\d+)(.+)$/, function() {
              return parseFloat(arguments.length <= 1 ? void 0 : arguments[1]) / 2 + (arguments.length <= 2 ? void 0 : arguments[2]);
            });
          }
        }
      }
      var diameter = 32;
      var radius = diameter / 2;
      var extendRadius = radius + strokeWidth / 2;
      var strokeLinecap = strokeShape === "round" ? "round" : "butt";
      var viewBox = shape === "circle" ? "0 0 ".concat(diameter + strokeWidth, " ").concat(diameter + strokeWidth) : "0 0 ".concat(diameter + strokeWidth, " ").concat((diameter + strokeWidth) / 2);
      var path = shape === "circle" ? "\n        M".concat(extendRadius, ", ").concat(extendRadius, "\n        m0 ").concat(-radius, "\n        a").concat(radius, " ").concat(radius, " 0 1 1 0 ").concat(diameter, "\n        a").concat(radius, " ").concat(radius, " 0 1 1 0 ").concat(-diameter) : "\n        M".concat(extendRadius, ", ").concat(extendRadius, "\n        m").concat(-radius, " 0\n        a").concat(radius, " ").concat(radius, " 0 0 1 ").concat(diameter, " 0");
      var dasharray = shape === "circle" ? Math.PI * diameter : Math.PI * diameter / 2;
      var borderRadius = strokeShape === "round" ? "".concat(this.strokeWidth, "px") : "0";
      var lineTrackStyle = {
        height: "".concat(strokeWidth),
        borderRadius
      };
      var lineThumbStyle = {
        width: "".concat(percent, "%"),
        height: "".concat(strokeWidth, "px"),
        borderRadius
      };
      var formattedPercent = format ? format(percent || 0) : null;
      var hasIndicator = children || formattedPercent;
      var roundInner = (shape === "circle" || shape === "semi-circle") && import_react50.default.createElement(import_react50.default.Fragment, null, import_react50.default.createElement("svg", {
        viewBox
      }, import_react50.default.createElement("path", {
        className: "".concat(prefixCls, "__track"),
        d: path,
        strokeWidth,
        strokeLinecap
      }), import_react50.default.createElement("path", {
        className: "".concat(prefixCls, "__thumb"),
        d: path,
        strokeWidth,
        strokeLinecap,
        strokeDasharray: dasharray,
        strokeDashoffset: dasharray * (100 - percent) / 100
      })), hasIndicator && import_react50.default.createElement("div", {
        className: "".concat(prefixCls, "__text")
      }, children || formattedPercent));
      var rectInner = shape === "line" && import_react50.default.createElement("div", {
        className: "".concat(prefixCls, "__outer")
      }, import_react50.default.createElement("div", {
        className: "".concat(prefixCls, "__track"),
        style: lineTrackStyle
      }, import_react50.default.createElement("div", {
        className: "".concat(prefixCls, "__thumb"),
        style: lineThumbStyle
      })), hasIndicator && import_react50.default.createElement("div", {
        className: "".concat(prefixCls, "__text")
      }, children || formattedPercent));
      return import_react50.default.createElement("div", {
        className: cls,
        style: _objectSpread12(_objectSpread12({}, sizeStyle), style2),
        ref: function ref(ele) {
          _this2.progressElement = ele;
        }
      }, shape === "line" ? rectInner : roundInner);
    }
  }]);
  return Progress2;
}(import_react50.PureComponent);
Progress.defaultProps = {
  prefixCls: "za-progress",
  theme: "primary",
  shape: "line",
  size: "md",
  percent: 0,
  strokeShape: "round",
  text: function text(percent) {
    return "".concat(percent, "%");
  }
};
Progress.strokeWeights = {
  lg: 10,
  md: 8,
  sm: 4
};

// node_modules/zarm/es/pull/Pull.js
var import_react51 = __toESM(require_react());
var import_classnames33 = __toESM(require_classnames());

// node_modules/zarm/es/pull/PropsType.js
var REFRESH_STATE;
(function(REFRESH_STATE2) {
  REFRESH_STATE2[REFRESH_STATE2["normal"] = 0] = "normal";
  REFRESH_STATE2[REFRESH_STATE2["pull"] = 1] = "pull";
  REFRESH_STATE2[REFRESH_STATE2["drop"] = 2] = "drop";
  REFRESH_STATE2[REFRESH_STATE2["loading"] = 3] = "loading";
  REFRESH_STATE2[REFRESH_STATE2["success"] = 4] = "success";
  REFRESH_STATE2[REFRESH_STATE2["failure"] = 5] = "failure";
})(REFRESH_STATE || (REFRESH_STATE = {}));
var LOAD_STATE;
(function(LOAD_STATE2) {
  LOAD_STATE2[LOAD_STATE2["normal"] = 0] = "normal";
  LOAD_STATE2[LOAD_STATE2["abort"] = 1] = "abort";
  LOAD_STATE2[LOAD_STATE2["loading"] = 2] = "loading";
  LOAD_STATE2[LOAD_STATE2["success"] = 3] = "success";
  LOAD_STATE2[LOAD_STATE2["failure"] = 4] = "failure";
  LOAD_STATE2[LOAD_STATE2["complete"] = 5] = "complete";
})(LOAD_STATE || (LOAD_STATE = {}));

// node_modules/zarm/es/pull/Pull.js
function ownKeys13(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread13(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys13(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys13(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper48(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct48();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct48() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Pull = function(_PureComponent) {
  _inherits(Pull2, _PureComponent);
  var _super = _createSuper48(Pull2);
  function Pull2(props) {
    var _this2;
    _classCallCheck(this, Pull2);
    _this2 = _super.call(this, props);
    _this2.pull = void 0;
    _this2.wrap = void 0;
    _this2.throttledScroll = void 0;
    _this2.wrapTouchstartY = void 0;
    _this2.mounted = true;
    _this2.getScrollContainer = function() {
      if (true) {
        console.warn("Warning: getScrollContainer() has been renamed, and is not recommended for use.\n\n* Rename `getScrollContainer()` to `scrollContainer` to suppress this warning.");
      }
      return _this2.scrollContainer;
    };
    _this2.wrapTouchstart = function(event) {
      var touch = event.touches[0];
      _this2.wrapTouchstartY = touch.pageY;
    };
    _this2.wrapTouchmove = function(event) {
      var touch = event.touches[0];
      var currentY = touch.pageY;
      if (currentY - _this2.wrapTouchstartY > 0 && event.cancelable && _this2.scrollTop === 0) {
        event.preventDefault();
      }
    };
    _this2.wrapTouchEnd = function() {
      _this2.wrapTouchstartY = 0;
      _this2.setState({
        animationDuration: _this2.props.animationDuration
      });
    };
    _this2.addScrollEvent = function() {
      _this2.wrap = _this2.scrollContainer;
      var scroller = _this2.wrap === document.documentElement ? window : _this2.wrap;
      events_default.on(scroller, "scroll", _this2.throttledScroll);
    };
    _this2.onScroll = function() {
      var _this$state = _this2.state, refreshState = _this$state.refreshState, loadState = _this$state.loadState;
      var _this$wrap = _this2.wrap, scrollHeight = _this$wrap.scrollHeight, clientHeight = _this$wrap.clientHeight;
      var load = _objectSpread13(_objectSpread13({}, Pull2.defaultProps.load), _this2.props.load);
      var handler = load.handler, distance = load.distance;
      if (typeof handler !== "function" || refreshState !== REFRESH_STATE.normal || loadState !== LOAD_STATE.normal || scrollHeight <= clientHeight || // 内容高度 - 偏移值 - 修正距离 <= 容器可见高度
      scrollHeight - _this2.scrollTop - distance > clientHeight) {
        return;
      }
      handler();
    };
    _this2.onDragMove = function(event, _ref) {
      var offsetY = _ref.offsetY;
      var _ref2 = _this2.props.refresh, handler = _ref2.handler;
      if (
        // 未设置刷新事件
        !handler || // 上拉
        offsetY <= 0 || // 未滚动到顶部
        offsetY > 0 && _this2.scrollTop > 0 || // 已经触发过加载状态
        _this2.state.refreshState >= REFRESH_STATE.loading
      ) {
        return false;
      }
      if (!events_default.supportsPassiveEvents) {
        event.preventDefault();
      }
      var refresh = _objectSpread13(_objectSpread13({}, Pull2.defaultProps.refresh), _this2.props.refresh);
      var startDistance = refresh.startDistance, distance = refresh.distance;
      var offset3 = offsetY / 3;
      var action = offset3 - startDistance < distance ? REFRESH_STATE.pull : REFRESH_STATE.drop;
      _this2.doRefreshAction(action, offset3);
      return true;
    };
    _this2.onDragEnd = function(_event, _ref3) {
      var offsetY = _ref3.offsetY;
      if (!offsetY) {
        return;
      }
      var refreshState = _this2.state.refreshState;
      if (refreshState === REFRESH_STATE.pull) {
        _this2.doRefreshAction(REFRESH_STATE.normal);
        return;
      }
      var _ref4 = _this2.props.refresh, handler = _ref4.handler;
      if (typeof handler === "function") {
        handler();
      }
    };
    _this2.doTransition = function(_ref5) {
      var offsetY = _ref5.offsetY, animationDuration = _ref5.animationDuration;
      _this2.setState({
        offsetY,
        animationDuration
      });
    };
    _this2.doRefreshAction = function(refreshState, offsetY) {
      var _this$props = _this2.props, animationDuration = _this$props.animationDuration, stayTime = _this$props.stayTime;
      _this2.setState({
        refreshState
      });
      switch (refreshState) {
        case REFRESH_STATE.pull:
        case REFRESH_STATE.drop:
          _this2.doTransition({
            offsetY,
            animationDuration: 0
          });
          break;
        case REFRESH_STATE.loading:
          _this2.doTransition({
            offsetY: "auto",
            animationDuration
          });
          break;
        case REFRESH_STATE.success:
        case REFRESH_STATE.failure:
          _this2.doTransition({
            offsetY: "auto",
            animationDuration
          });
          setTimeout(function() {
            if (!_this2.mounted)
              return;
            _this2.doRefreshAction(REFRESH_STATE.normal);
            _this2.doLoadAction(LOAD_STATE.normal);
          }, stayTime);
          break;
        default:
          _this2.doTransition({
            offsetY: 0,
            animationDuration
          });
      }
    };
    _this2.doLoadAction = function(loadState) {
      var stayTime = _this2.props.stayTime;
      _this2.setState({
        loadState
      });
      switch (loadState) {
        case LOAD_STATE.success:
          _this2.doLoadAction(LOAD_STATE.normal);
          break;
        case LOAD_STATE.failure:
          setTimeout(function() {
            if (!_this2.mounted)
              return;
            _this2.doLoadAction(LOAD_STATE.abort);
          }, stayTime);
          break;
        default:
      }
    };
    _this2.renderRefresh = function() {
      var refresh = _objectSpread13(_objectSpread13({}, Pull2.defaultProps.refresh), _this2.props.refresh);
      var startDistance = refresh.startDistance, distance = refresh.distance, render = refresh.render;
      var _this$state2 = _this2.state, refreshState = _this$state2.refreshState, offsetY = _this$state2.offsetY;
      var percent = 0;
      if (offsetY >= startDistance) {
        percent = (offsetY - startDistance < distance ? offsetY - startDistance : distance) * 100 / distance;
      }
      if (typeof render === "function") {
        return render(refreshState, percent);
      }
      var _this$props2 = _this2.props, prefixCls = _this$props2.prefixCls, locale = _this$props2.locale;
      var cls = "".concat(prefixCls, "__control");
      switch (refreshState) {
        case REFRESH_STATE.pull:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(ActivityIndicator, {
            loading: false,
            percent
          }), import_react51.default.createElement("span", null, locale.pullText));
        case REFRESH_STATE.drop:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(ActivityIndicator, {
            loading: false,
            percent: 100
          }), import_react51.default.createElement("span", null, locale.dropText));
        case REFRESH_STATE.loading:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(ActivityIndicator, {
            type: "spinner"
          }), import_react51.default.createElement("span", null, locale.loadingText));
        case REFRESH_STATE.success:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(icon_default, {
            type: "right-round",
            theme: "success"
          }), import_react51.default.createElement("span", null, locale.successText));
        case REFRESH_STATE.failure:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(icon_default, {
            type: "wrong-round",
            theme: "danger"
          }), import_react51.default.createElement("span", null, locale.failureText));
        default:
      }
    };
    _this2.renderLoad = function() {
      var load = _objectSpread13(_objectSpread13({}, Pull2.defaultProps.load), _this2.props.load);
      var render = load.render;
      var loadState = _this2.state.loadState;
      if (typeof render === "function") {
        return render(loadState);
      }
      var _this$props3 = _this2.props, prefixCls = _this$props3.prefixCls, locale = _this$props3.locale;
      var cls = "".concat(prefixCls, "__control");
      switch (loadState) {
        case LOAD_STATE.loading:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(ActivityIndicator, {
            type: "spinner"
          }), import_react51.default.createElement("span", null, locale.loadingText));
        case LOAD_STATE.failure:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement(icon_default, {
            type: "wrong-round",
            theme: "danger"
          }), import_react51.default.createElement("span", null, locale.failureText));
        case LOAD_STATE.complete:
          return import_react51.default.createElement("div", {
            className: cls
          }, import_react51.default.createElement("span", null, locale.completeText));
        default:
      }
    };
    _this2.state = {
      offsetY: 0,
      animationDuration: 0,
      refreshState: props.refresh.state,
      loadState: props.load.state
    };
    _this2.throttledScroll = throttle_default(_this2.onScroll, 250);
    return _this2;
  }
  _createClass(Pull2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.addScrollEvent();
      events_default.on(this.wrap, "touchstart", this.wrapTouchstart);
      events_default.on(this.wrap, "touchmove", this.wrapTouchmove);
      events_default.on(this.wrap, "touchend", this.wrapTouchEnd);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.wrap !== this.scrollContainer) {
        this.addScrollEvent();
      }
      var _this$props4 = this.props, load = _this$props4.load, refresh = _this$props4.refresh;
      if (prevProps.load.state !== load.state) {
        this.doLoadAction(load.state);
      }
      if (prevProps.refresh.state !== refresh.state) {
        this.doRefreshAction(refresh.state);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;
      var scroller = this.wrap === document.documentElement ? window : this.wrap;
      events_default.off(scroller, "scroll", this.throttledScroll);
      events_default.off(this.wrap, "touchstart", this.wrapTouchstart);
      events_default.off(this.wrap, "touchmove", this.wrapTouchmove);
      events_default.off(this.wrap, "touchend", this.wrapTouchEnd);
    }
  }, {
    key: "scrollContainer",
    get: function get() {
      var container = function(node) {
        while (node && node.parentNode && node.parentNode !== document.body) {
          var style2 = window.getComputedStyle(node);
          if (
            // overflow 或者 overflowY 值为 scroll/auto
            (["scroll", "auto"].indexOf(style2.overflowY) > -1 || ["scroll", "auto"].indexOf(style2.overflow) > -1) && // height 或者 max-height 值大于 0
            (parseInt(style2.height, 10) > 0 || parseInt(style2.maxHeight, 10) > 0)
          ) {
            return node;
          }
          node = node.parentNode;
        }
      }(this.pull) || document.documentElement;
      return container;
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return getScrollTop(this.wrap);
    }
    // 该方法即将过期
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props5 = this.props, prefixCls = _this$props5.prefixCls, className = _this$props5.className, style2 = _this$props5.style, children = _this$props5.children;
      var _this$state3 = this.state, offsetY = _this$state3.offsetY, animationDuration = _this$state3.animationDuration, refreshState = _this$state3.refreshState, loadState = _this$state3.loadState;
      var cls = (0, import_classnames33.default)(prefixCls, className);
      var loadCls = (0, import_classnames33.default)("".concat(prefixCls, "__load"), _defineProperty({}, "".concat(prefixCls, "__load--show"), loadState >= LOAD_STATE.loading));
      var contentStyle = {
        WebkitTransition: "all ".concat(animationDuration, "ms"),
        transition: "all ".concat(animationDuration, "ms")
      };
      if (refreshState <= REFRESH_STATE.drop) {
        contentStyle.WebkitTransform = "translate3d(0, ".concat(offsetY, "px, 0)");
        contentStyle.transform = "translate3d(0, ".concat(offsetY, "px, 0)");
      }
      return import_react51.default.createElement(Drag, {
        onDragMove: this.onDragMove,
        onDragEnd: this.onDragEnd
      }, import_react51.default.createElement("div", {
        className: cls,
        style: style2
      }, import_react51.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        style: contentStyle,
        ref: function ref(ele) {
          _this2.pull = ele;
        }
      }, import_react51.default.createElement("div", {
        className: "".concat(prefixCls, "__refresh")
      }, this.renderRefresh()), import_react51.default.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, children), import_react51.default.createElement("div", {
        className: loadCls
      }, this.renderLoad()))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      var load = nextProps.load, refresh = nextProps.refresh;
      var _state$prevLoad = state.prevLoad, prevLoad = _state$prevLoad === void 0 ? {} : _state$prevLoad, _state$prevRefresh = state.prevRefresh, prevRefresh = _state$prevRefresh === void 0 ? {} : _state$prevRefresh;
      if ("load" in nextProps && load.state !== prevLoad.state) {
        return {
          loadState: load.state,
          prevLoad: load
        };
      }
      if ("refresh" in nextProps && refresh.state !== prevRefresh.state) {
        return {
          refreshState: refresh.state,
          prevRefresh: refresh
        };
      }
      return null;
    }
  }]);
  return Pull2;
}(import_react51.PureComponent);
Pull.defaultProps = {
  prefixCls: "za-pull",
  refresh: {
    state: REFRESH_STATE.normal,
    startDistance: 30,
    distance: 30
  },
  load: {
    state: LOAD_STATE.normal,
    distance: 0
  },
  animationDuration: 400,
  stayTime: 1e3
};

// node_modules/zarm/es/pull/index.js
var pull_default = config_receiver_default("Pull")(Pull);

// node_modules/zarm/es/radio/Radio.js
var import_react52 = __toESM(require_react());
var import_classnames34 = __toESM(require_classnames());
function _createSuper49(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct49();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct49() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getChecked3 = function getChecked4(props, defaultChecked) {
  if (typeof props.checked !== "undefined") {
    return props.checked;
  }
  if (typeof props.defaultChecked !== "undefined") {
    return props.defaultChecked;
  }
  return defaultChecked;
};
var Radio = function(_PureComponent) {
  _inherits(Radio2, _PureComponent);
  var _super = _createSuper49(Radio2);
  function Radio2() {
    var _this2;
    _classCallCheck(this, Radio2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      checked: getChecked3(_this2.props, false)
    };
    _this2.onValueChange = function(e) {
      var _this$props = _this2.props, disabled = _this$props.disabled, onChange2 = _this$props.onChange;
      var checked = _this2.state.checked;
      if (disabled) {
        return;
      }
      var newChecked = !checked;
      if (!("checked" in _this2.props)) {
        _this2.setState({
          checked: newChecked
        });
      }
      if (typeof onChange2 === "function") {
        onChange2(e);
      }
    };
    return _this2;
  }
  _createClass(Radio2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, type = _this$props2.type, shape = _this$props2.shape, value = _this$props2.value, checked = _this$props2.checked, defaultChecked = _this$props2.defaultChecked, disabled = _this$props2.disabled, id = _this$props2.id, children = _this$props2.children, onChange2 = _this$props2.onChange, rest = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "type", "shape", "value", "checked", "defaultChecked", "disabled", "id", "children", "onChange"]);
      var checkedState = this.state.checked;
      var cls = (0, import_classnames34.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--checked"), checkedState), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--untext"), !children), _classnames));
      var inputRender = import_react52.default.createElement("input", {
        id,
        type: "radio",
        className: "".concat(prefixCls, "__input"),
        value,
        disabled,
        checked: checkedState,
        onChange: this.onValueChange
      });
      var radioRender = import_react52.default.createElement("span", _extends({
        className: cls
      }, rest), import_react52.default.createElement("span", {
        className: "".concat(prefixCls, "__widget")
      }, import_react52.default.createElement("span", {
        className: "".concat(prefixCls, "__inner")
      })), children && import_react52.default.createElement("span", {
        className: "".concat(prefixCls, "__text")
      }, children), inputRender);
      if (type === "cell") {
        return import_react52.default.createElement(Cell, _extends({
          disabled,
          className,
          onClick: function onClick2() {
          }
        }, rest), radioRender);
      }
      if (type === "button") {
        return import_react52.default.createElement("button", _extends({
          type: "button",
          disabled,
          className: cls
        }, rest), children, inputRender);
      }
      return radioRender;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("checked" in nextProps && nextProps.checked !== state.prevChecked) {
        return {
          checked: nextProps.checked,
          prevChecked: nextProps.checked
        };
      }
      return null;
    }
  }]);
  return Radio2;
}(import_react52.PureComponent);
Radio.Group = void 0;
Radio.defaultProps = {
  prefixCls: "za-radio",
  disabled: false,
  shape: "radius"
};

// node_modules/zarm/es/radio/RadioGroup.js
var import_react53 = __toESM(require_react());
var import_classnames35 = __toESM(require_classnames());
function _createSuper50(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct50();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct50() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getChildChecked3 = function getChildChecked4(children) {
  var checkedValue = null;
  import_react53.default.Children.forEach(children, function(element) {
    if ((0, import_react53.isValidElement)(element) && element.props && element.props.checked) {
      checkedValue = element.props.value;
    }
  });
  return checkedValue;
};
var getValue6 = function getValue7(props) {
  var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  if (typeof props.value !== "undefined") {
    return props.value;
  }
  if (typeof props.defaultValue !== "undefined") {
    return props.defaultValue;
  }
  if (getChildChecked3(props.children)) {
    return getChildChecked3(props.children);
  }
  return defaultValue;
};
var RadioGroup = function(_PureComponent) {
  _inherits(RadioGroup2, _PureComponent);
  var _super = _createSuper50(RadioGroup2);
  function RadioGroup2() {
    var _this2;
    _classCallCheck(this, RadioGroup2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      value: getValue6(_this2.props)
    };
    _this2.onChildChange = function(value) {
      _this2.setState({
        value
      });
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(value);
      }
    };
    return _this2;
  }
  _createClass(RadioGroup2, [{
    key: "render",
    value: function render() {
      var _this2 = this, _classnames;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, size = _this$props.size, shape = _this$props.shape, type = _this$props.type, block = _this$props.block, disabled = _this$props.disabled, compact = _this$props.compact, ghost = _this$props.ghost, children = _this$props.children, onChange2 = _this$props.onChange, defaultValue = _this$props.defaultValue, value = _this$props.value, rest = _objectWithoutProperties(_this$props, ["prefixCls", "className", "size", "shape", "type", "block", "disabled", "compact", "ghost", "children", "onChange", "defaultValue", "value"]);
      var valueState = this.state.value;
      var items = import_react53.default.Children.map(children, function(element, index) {
        return (0, import_react53.cloneElement)(element, {
          key: index,
          type,
          shape,
          disabled: disabled || !!element.props.disabled,
          checked: valueState === element.props.value,
          onChange: function onChange3(e) {
            typeof element.props.onChange === "function" && element.props.onChange(e);
            _this2.onChildChange(element.props.value);
          }
        });
      });
      var cls = (0, import_classnames35.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(type), !!type), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--block"), block), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--compact"), compact), _defineProperty(_classnames, "".concat(prefixCls, "--ghost"), ghost), _classnames));
      return import_react53.default.createElement("div", _extends({
        className: cls
      }, rest), import_react53.default.createElement("div", {
        className: "".concat(prefixCls, "__inner")
      }, items));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ("value" in nextProps) {
        return {
          value: nextProps.value
        };
      }
      return null;
    }
  }]);
  return RadioGroup2;
}(import_react53.PureComponent);
RadioGroup.displayName = "RadioGroup";
RadioGroup.defaultProps = {
  prefixCls: "za-radio-group",
  shape: "radius",
  block: false,
  disabled: false,
  compact: false,
  ghost: false,
  size: "xs"
};

// node_modules/zarm/es/radio/index.js
Radio.Group = RadioGroup;
var radio_default = Radio;

// node_modules/zarm/es/search-bar/SearchBar.js
var import_react54 = __toESM(require_react());
var import_classnames36 = __toESM(require_classnames());
function _createSuper51(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct51();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct51() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var SearchBar = function(_PureComponent) {
  _inherits(SearchBar2, _PureComponent);
  var _super = _createSuper51(SearchBar2);
  function SearchBar2(props) {
    var _this2;
    _classCallCheck(this, SearchBar2);
    _this2 = _super.call(this, props);
    _this2.cancelRef = null;
    _this2.cancelOuterWidth = void 0;
    _this2.inputRef = null;
    _this2.state = {
      focus: false,
      value: props.defaultValue || props.value || "",
      isOnComposition: false
    };
    return _this2;
  }
  _createClass(SearchBar2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.calculatePositon(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props, cancelText = _this$props.cancelText, showCancel = _this$props.showCancel, locale = _this$props.locale;
      if (cancelText !== prevProps.cancelText || showCancel !== prevProps.showCancel || locale && prevProps.locale && locale.cancelText !== prevProps.locale.cancelText) {
        this.calculatePositon(this.props);
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      var onFocus2 = this.props.onFocus;
      this.setState({
        focus: true
      });
      this.focusAnim();
      onFocus2 && onFocus2();
    }
  }, {
    key: "onChange",
    value: function onChange2(value) {
      var onChange3 = this.props.onChange;
      var isOnComposition = this.state.isOnComposition;
      this.setState({
        value
      });
      if (!isOnComposition && onChange3) {
        onChange3(value);
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      var _this2 = this;
      var onBlur2 = this.props.onBlur;
      var _this$state = this.state, value = _this$state.value, focus = _this$state.focus;
      this.setState({
        focus: false
      }, function() {
        !value && _this2.blurAnim();
        focus && onBlur2 && onBlur2();
      });
    }
  }, {
    key: "onClear",
    value: function onClear() {
      var _this3 = this;
      var _this$props2 = this.props, onClear2 = _this$props2.onClear, onChange2 = _this$props2.onChange;
      this.setState({
        value: "",
        isOnComposition: false
      }, function() {
        _this3.focus();
      });
      onClear2 && onClear2("");
      onChange2 && onChange2("");
    }
  }, {
    key: "onCancel",
    value: function onCancel3() {
      var _this4 = this;
      var onCancel4 = this.props.onCancel;
      this.setState({
        value: "",
        isOnComposition: false
      }, function() {
        _this4.onBlur();
      });
      onCancel4 && onCancel4();
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(e) {
      var onSubmit2 = this.props.onSubmit;
      var value = this.state.value;
      e.preventDefault();
      this.inputRef && this.inputRef.blur();
      onSubmit2 && onSubmit2(value);
    }
  }, {
    key: "handleComposition",
    value: function handleComposition(e) {
      if (e.type === "compositionstart") {
        this.setState({
          isOnComposition: true
        });
      }
      if (e.type === "compositionend") {
        this.setState({
          isOnComposition: false
        });
        var onChange2 = this.props.onChange;
        var target = e.target;
        var _ref = target, value = _ref.value;
        onChange2 && onChange2(value);
      }
    }
    // 初始化搜索提示文字的位置
  }, {
    key: "calculatePositon",
    value: function calculatePositon(props) {
      if (!this.cancelRef)
        return;
      var showCancel = props.showCancel;
      var value = this.state.value;
      if (!showCancel) {
        var ml = parseInt(window.getComputedStyle(this.cancelRef, "")["margin-left"].split("px")[0], 10);
        this.cancelOuterWidth = Math.ceil(ml + this.cancelRef.getBoundingClientRect().width);
        this.cancelRef.style.cssText = "margin-right: -".concat(this.cancelOuterWidth, "px;");
      } else {
        this.cancelRef.style.cssText = "margin-right: 0px;";
      }
      if (value) {
        this.focusAnim();
      }
    }
  }, {
    key: "focusAnim",
    value: function focusAnim() {
      if (!this.cancelRef)
        return;
      this.cancelRef.style.cssText = "margin-right: 0px;";
      this.cancelRef.className += " animation-ease";
    }
  }, {
    key: "blurAnim",
    value: function blurAnim() {
      var showCancel = this.props.showCancel;
      if (!showCancel && this.cancelRef) {
        this.cancelRef.style.cssText = "margin-right: -".concat(this.cancelOuterWidth, "px;");
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.inputRef && this.inputRef.focus();
    }
  }, {
    key: "renderCancel",
    value: function renderCancel() {
      var _this5 = this;
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, cancelText = _this$props3.cancelText, locale = _this$props3.locale;
      return import_react54.default.createElement("div", {
        className: "".concat(prefixCls, "__cancel"),
        ref: function ref(cancelRef) {
          _this5.cancelRef = cancelRef;
        },
        onClick: function onClick2() {
          _this5.onCancel();
        }
      }, cancelText || locale && locale.cancelText);
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _this6 = this;
      var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, className = _this$props4.className, shape = _this$props4.shape, placeholder = _this$props4.placeholder, disabled = _this$props4.disabled, clearable = _this$props4.clearable, showCancel = _this$props4.showCancel, maxLength = _this$props4.maxLength, locale = _this$props4.locale;
      var _this$state2 = this.state, value = _this$state2.value, focus = _this$state2.focus;
      var cls = (0, import_classnames36.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--focus"), !!(showCancel || focus || value && value.length > 0)), _classnames));
      return import_react54.default.createElement("div", {
        className: cls
      }, import_react54.default.createElement("form", {
        action: "#",
        className: "".concat(prefixCls, "__form"),
        onSubmit: function onSubmit(e) {
          _this6.onSubmit(e);
        }
      }, import_react54.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, import_react54.default.createElement(icon_default, {
        type: "search",
        className: "".concat(prefixCls, "__icon")
      }), import_react54.default.createElement("div", {
        className: "".concat(prefixCls, "__mock")
      }, import_react54.default.createElement(InputBase, {
        className: "".concat(prefixCls, "__input"),
        type: "search",
        placeholder: placeholder || locale && locale.placeholder,
        value,
        maxLength,
        onFocus: function onFocus() {
          _this6.onFocus();
        },
        onCompositionStart: function onCompositionStart(e) {
          _this6.handleComposition(e);
        },
        onCompositionUpdate: function onCompositionUpdate(e) {
          _this6.handleComposition(e);
        },
        onCompositionEnd: function onCompositionEnd(e) {
          _this6.handleComposition(e);
        },
        onChange: function onChange2(val) {
          _this6.onChange(val);
        },
        onBlur: function onBlur() {
          _this6.onBlur();
        },
        onClear: function onClear() {
          _this6.onClear();
        },
        disabled,
        clearable,
        ref: function ref(inputRef) {
          _this6.inputRef = inputRef;
        }
      }))), this.renderCancel()));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("value" in nextProps && nextProps.value !== state.preValue) {
        return {
          value: nextProps.value,
          preValue: nextProps.value
        };
      }
      return null;
    }
  }]);
  return SearchBar2;
}(import_react54.PureComponent);
SearchBar.defaultProps = {
  prefixCls: "za-search-bar",
  shape: "radius",
  disabled: false,
  showCancel: false,
  clearable: true
};

// node_modules/zarm/es/search-bar/index.js
var search_bar_default = config_receiver_default("SearchBar")(SearchBar);

// node_modules/zarm/es/select/Select.js
var import_react55 = __toESM(require_react());
var import_classnames37 = __toESM(require_classnames());
var import_isEqual6 = __toESM(require_isEqual());
function _createSuper52(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct52();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct52() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Select = function(_PureComponent) {
  _inherits(Select2, _PureComponent);
  var _super = _createSuper52(Select2);
  function Select2(props) {
    var _this2;
    _classCallCheck(this, Select2);
    _this2 = _super.call(this, props);
    _this2.handleClick = function() {
      var disabled = _this2.props.disabled;
      if (disabled) {
        return false;
      }
      _this2.setState({
        visible: true
      });
    };
    _this2.onChange = function(selected) {
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(selected);
      }
    };
    _this2.onOk = function(selected) {
      var onOk = _this2.props.onOk;
      _this2.setState({
        selectValue: selected,
        visible: false
      }, function() {
        if (typeof onOk === "function") {
          onOk(selected);
        }
      });
    };
    _this2.onCancel = function() {
      var onCancel3 = _this2.props.onCancel;
      _this2.setState({
        visible: false
      });
      if (typeof onCancel3 === "function") {
        onCancel3();
      }
    };
    _this2.state = {
      visible: false,
      selectValue: parseProps_default.isValueValid(props.defaultValue || props.value) && parseProps_default.getSource(props).objValue
    };
    return _this2;
  }
  _createClass(Select2, [{
    key: "render",
    value: function render() {
      var _classnames;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, placeholder = _this$props.placeholder, className = _this$props.className, disabled = _this$props.disabled, displayRender2 = _this$props.displayRender, locale = _this$props.locale, value = _this$props.value, hasArrow = _this$props.hasArrow, others = _objectWithoutProperties(_this$props, ["prefixCls", "placeholder", "className", "disabled", "displayRender", "locale", "value", "hasArrow"]);
      var _this$state = this.state, visible = _this$state.visible, _this$state$selectVal = _this$state.selectValue, selectValue = _this$state$selectVal === void 0 ? [] : _this$state$selectVal;
      var cls = (0, import_classnames37.default)(prefixCls, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--placeholder"), !selectValue.length), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--arrow"), hasArrow), _classnames));
      return import_react55.default.createElement("div", {
        className: cls,
        onClick: this.handleClick
      }, import_react55.default.createElement("div", {
        className: "".concat(prefixCls, "__input")
      }, import_react55.default.createElement("div", {
        className: "".concat(prefixCls, "__value")
      }, selectValue.length && displayRender2(selectValue || []) || placeholder || locale.placeholder)), import_react55.default.createElement(picker_default, _extends({}, others, {
        className,
        visible,
        value,
        onOk: this.onOk,
        onChange: this.onChange,
        onCancel: this.onCancel
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!(0, import_isEqual6.default)(removeFnFromProps_default(props, ["onOk", "onCancel", "onChange"]), removeFnFromProps_default(state.prevProps, ["onOk", "onCancel", "onChange"]))) {
        return {
          prevProps: props,
          selectValue: parseProps_default.isValueValid(props.defaultValue || props.value) && parseProps_default.getSource(props).objValue
        };
      }
      return null;
    }
  }]);
  return Select2;
}(import_react55.PureComponent);
Select.defaultProps = {
  prefixCls: "za-select",
  dataSource: [],
  valueMember: "value",
  itemRender: function itemRender4(data) {
    return data && data.label;
  },
  cols: Infinity,
  hasArrow: true,
  maskClosable: true,
  displayRender: function displayRender(selected) {
    return selected.map(function(item) {
      return item && item.label;
    });
  },
  onClick: function onClick() {
  }
};

// node_modules/zarm/es/select/index.js
var select_default = config_receiver_default("Select")(Select);

// node_modules/zarm/es/slider/index.js
var import_react57 = __toESM(require_react());
var import_classnames38 = __toESM(require_classnames());

// node_modules/zarm/es/tooltip/index.js
var import_react56 = __toESM(require_react());
function _createSuper53(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct53();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct53() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Tooltip = function(_React$Component) {
  _inherits(Tooltip2, _React$Component);
  var _super = _createSuper53(Tooltip2);
  function Tooltip2() {
    _classCallCheck(this, Tooltip2);
    return _super.apply(this, arguments);
  }
  _createClass(Tooltip2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, children = _this$props.children, content = _this$props.content, others = _objectWithoutProperties(_this$props, ["children", "content"]);
      return !(content === "" || content === null || content === void 0) ? import_react56.default.createElement(popper_default2, _extends({
        content
      }, others), children) : children;
    }
  }], [{
    key: "updateAll",
    value: function updateAll() {
      popper_default2.update();
    }
  }]);
  return Tooltip2;
}(import_react56.default.Component);
Tooltip.defaultProps = {
  prefixCls: "za-tooltip",
  direction: "top",
  hasArrow: true,
  onVisibleChange: function onVisibleChange2() {
  }
};
var tooltip_default = Tooltip;

// node_modules/zarm/es/slider/utils/getClosestPoint.js
function getClosestPoint(val, _ref) {
  var marks = _ref.marks, step = _ref.step, min = _ref.min, max = _ref.max;
  if (max < min) {
    throw new Error('"max" should be greater than "min". Got "min" = '.concat(min, ', "max" = ').concat(max));
  }
  var points = Object.keys(marks || {}).map(parseFloat);
  if (step !== null) {
    var maxSteps = Math.floor((max - min) / step);
    var steps = Math.min((val - min) / step, maxSteps);
    var closestStep = Math.round(steps) * step + min;
    points.push(closestStep);
  }
  var diffs = points.map(function(point) {
    return Math.abs(val - point);
  });
  return points[diffs.indexOf(Math.min.apply(Math, _toConsumableArray(diffs)))];
}

// node_modules/zarm/es/slider/utils/getPrecision.js
function getPrecision(step) {
  var stepString = step.toString();
  var precision = 0;
  if (stepString.indexOf(".") >= 0) {
    precision = stepString.length - stepString.indexOf(".") - 1;
  }
  return precision;
}

// node_modules/zarm/es/slider/utils/ensureValuePrecision.js
function ensureValuePrecision(val, props) {
  var step = props.step;
  var closestPoint = Number.isFinite(getClosestPoint(val, props)) ? getClosestPoint(val, props) : 0;
  return step === null ? closestPoint : parseFloat(closestPoint.toFixed(getPrecision(step)));
}

// node_modules/zarm/es/slider/utils/getValue.js
var getValue8 = function getValue9(props, defaultValue) {
  if (typeof props.value !== "undefined") {
    return props.value;
  }
  if (typeof props.defaultValue !== "undefined") {
    return props.defaultValue || defaultValue;
  }
  return defaultValue;
};
var getValue_default = getValue8;

// node_modules/zarm/es/slider/utils/preventDefault.js
function preventDefault(event) {
  event.preventDefault();
}

// node_modules/zarm/es/slider/index.js
function ownKeys14(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread14(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys14(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys14(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper54(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct54();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct54() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Slider = function(_PureComponent) {
  _inherits(Slider2, _PureComponent);
  var _super = _createSuper54(Slider2);
  function Slider2() {
    var _this2;
    _classCallCheck(this, Slider2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.line = null;
    _this2.container = null;
    _this2.offsetStart = 0;
    _this2.state = {
      value: getValue_default(_this2.props, 0),
      prevPropsValue: getValue_default(_this2.props, 0),
      tooltip: false
    };
    _this2.init = function() {
      var value = _this2.state.value;
      _this2.offsetStart = _this2.getOffsetByValue(value);
    };
    _this2.getValueByOffset = function(offset3) {
      var _this$props = _this2.props, _this$props$min = _this$props.min, min = _this$props$min === void 0 ? 0 : _this$props$min, max = _this$props.max, vertical = _this$props.vertical;
      var percent = offset3 / _this2.getMaxOffset();
      var value = vertical ? (1 - percent) * (max - min) + min : Math.round(min + (max - min) * percent);
      return ensureValuePrecision(value, _this2.props);
    };
    _this2.getOffsetPercent = function(value) {
      var _this$props2 = _this2.props, min = _this$props2.min, max = _this$props2.max;
      var ratio = (value - min) / (max - min);
      return "".concat(ratio * 100, "%");
    };
    _this2.getOffsetByValue = function(value) {
      var _this$props3 = _this2.props, vertical = _this$props3.vertical, min = _this$props3.min, max = _this$props3.max;
      var maxOffset = _this2.getMaxOffset();
      var range2 = max - min;
      return vertical ? maxOffset * ((max - value) / range2) : maxOffset * ((value - min) / range2);
    };
    _this2.getMaxOffset = function() {
      if (_this2.line) {
        if (_this2.props.vertical) {
          return _this2.line.offsetHeight;
        }
        return _this2.line.offsetWidth;
      }
      return 0;
    };
    _this2.handleDragStart = function() {
      var disabled = _this2.props.disabled;
      if (disabled) {
        return;
      }
      _this2.setState({
        tooltip: true
      });
    };
    _this2.handleDragMove = function(event, dragState) {
      var _this$props4 = _this2.props, disabled = _this$props4.disabled, vertical = _this$props4.vertical;
      if (disabled) {
        return false;
      }
      tooltip_default.updateAll();
      event.stopPropagation();
      if (!events_default.supportsPassiveEvents) {
        event.preventDefault();
      }
      var _ref = dragState, offsetX = _ref.offsetX, offsetY = _ref.offsetY;
      var offset3 = vertical ? _this2.offsetStart + (offsetY || 0) : (_this2.offsetStart || 0) + (offsetX || 0);
      if (offset3 < 0) {
        offset3 = 0;
        var newValue = _this2.getValueByOffset(offset3);
        _this2.setState({
          value: newValue
        });
        return false;
      }
      var maxOffset = _this2.getMaxOffset();
      if (offset3 > maxOffset) {
        offset3 = maxOffset;
        var _newValue = _this2.getValueByOffset(offset3);
        _this2.setState({
          value: _newValue
        });
        return false;
      }
      var value = _this2.getValueByOffset(offset3);
      _this2.setState({
        value
      });
      return true;
    };
    _this2.handleDragEnd = function(_event, dragState) {
      var _this$props5 = _this2.props, vertical = _this$props5.vertical, onChange2 = _this$props5.onChange;
      var offsetX = dragState.offsetX, offsetY = dragState.offsetY;
      _this2.setState({
        tooltip: false
      });
      if (vertical) {
        if (Number.isNaN(offsetY)) {
          return;
        }
      } else if (Number.isNaN(offsetX)) {
        return;
      }
      _this2.offsetStart += vertical ? offsetY : offsetX;
      if (typeof onChange2 === "function") {
        onChange2(_this2.state.value);
      }
    };
    _this2.handleRef = function(ref) {
      var nextContainer = ref;
      var prevContainer = _this2.container;
      if (prevContainer !== nextContainer) {
        if (prevContainer) {
          prevContainer.removeEventListener("touchstart", preventDefault);
        }
        if (nextContainer) {
          nextContainer.addEventListener("touchstart", preventDefault, {
            passive: false
          });
        }
      }
      _this2.container = nextContainer;
    };
    _this2.renderMarkInfo = function() {
      var _this$props6 = _this2.props, prefixCls = _this$props6.prefixCls, showMark = _this$props6.showMark, _this$props6$marks = _this$props6.marks, marks = _this$props6$marks === void 0 ? {} : _this$props6$marks, vertical = _this$props6.vertical;
      var value = _this2.state.value;
      var isEmptyMarks = !isObject(marks) || JSON.stringify(marks) === "{}";
      if (showMark && isEmptyMarks) {
        console.error("请输入有效的 marks");
        return null;
      }
      if (isEmptyMarks) {
        return null;
      }
      var markKeys = Object.keys(marks || {});
      var markElement = markKeys.map(function(item) {
        var markStyle = _defineProperty({}, vertical ? "bottom" : "left", "".concat(item, "%"));
        return import_react57.default.createElement("span", {
          key: item,
          className: "".concat(prefixCls, "__mark"),
          style: markStyle
        }, marks[+item]);
      });
      var marksElement = showMark && import_react57.default.createElement("div", {
        className: "".concat(prefixCls, "__marks")
      }, markElement);
      var lineDot = markKeys.map(function(item) {
        var dotStyle = (0, import_classnames38.default)("".concat(prefixCls, "__line__dot"), _defineProperty({}, "".concat(prefixCls, "__line__dot--active"), value >= +item));
        var markStyle = _defineProperty({}, vertical ? "bottom" : "left", "".concat(item, "%"));
        return import_react57.default.createElement("span", {
          key: item,
          className: dotStyle,
          style: markStyle
        });
      });
      return import_react57.default.createElement(import_react57.default.Fragment, null, lineDot, marksElement);
    };
    return _this2;
  }
  _createClass(Slider2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.init();
      events_default.on(window, "resize", this.init);
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames2, _this2 = this;
      var _this$props7 = this.props, prefixCls = _this$props7.prefixCls, className = _this$props7.className, disabled = _this$props7.disabled, min = _this$props7.min, max = _this$props7.max, vertical = _this$props7.vertical, showMark = _this$props7.showMark;
      var _this$state = this.state, value = _this$state.value, tooltip = _this$state.tooltip;
      var offset3 = this.getOffsetPercent(value);
      var cls = (0, import_classnames38.default)(prefixCls, className, (_classnames2 = {}, _defineProperty(_classnames2, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames2, "".concat(prefixCls, "--vertical"), vertical), _defineProperty(_classnames2, "".concat(prefixCls, "--marked"), showMark), _classnames2));
      var handleStyle = _defineProperty({}, vertical ? "bottom" : "left", offset3 || 0);
      var lineBg = _defineProperty({}, vertical ? "height" : "width", offset3 || 0);
      return import_react57.default.createElement("div", {
        className: cls,
        ref: this.handleRef
      }, import_react57.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, import_react57.default.createElement("div", {
        className: "".concat(prefixCls, "__line"),
        ref: function ref(ele) {
          _this2.line = ele;
        }
      }, import_react57.default.createElement("div", {
        className: "".concat(prefixCls, "__line__bg"),
        style: lineBg
      }), this.renderMarkInfo()), import_react57.default.createElement(Drag, {
        onDragStart: this.handleDragStart,
        onDragMove: this.handleDragMove,
        onDragEnd: this.handleDragEnd
      }, import_react57.default.createElement("div", {
        className: "".concat(prefixCls, "__handle"),
        role: "slider",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value,
        "aria-orientation": vertical ? "vertical" : "horizontal",
        style: handleStyle
      }, import_react57.default.createElement(tooltip_default, {
        trigger: "manual",
        arrowPointAtCenter: true,
        visible: tooltip,
        content: value
      }, import_react57.default.createElement("div", {
        className: "".concat(prefixCls, "__handle__shadow")
      }))))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var value = nextProps.value;
      if (typeof value !== "undefined" && value !== prevState.prevPropsValue) {
        return _objectSpread14(_objectSpread14({}, prevState), {}, {
          value,
          prevPropsValue: value
        });
      }
      return null;
    }
    /**
     * 初始化
     */
  }]);
  return Slider2;
}(import_react57.PureComponent);
Slider.defaultProps = {
  prefixCls: "za-slider",
  disabled: false,
  showMark: false,
  vertical: false,
  step: 1,
  min: 0,
  max: 100,
  marks: {}
};

// node_modules/zarm/es/stepper/index.js
var import_react58 = __toESM(require_react());
var import_classnames39 = __toESM(require_classnames());
function _createSuper55(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct55();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct55() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var compareValue = function compareValue2(value, max, min) {
  if (typeof max === "number") {
    value = value > max ? max : value;
  }
  if (typeof min === "number") {
    value = value < min ? min : value;
  }
  return value;
};
var getPrecision2 = function getPrecision3(value) {
  var valueStr = value === null || value === void 0 ? void 0 : value.toString();
  if (valueStr && valueStr.indexOf("e-") >= 0) {
    return parseInt(valueStr.slice(valueStr.indexOf("-e")), 10);
  }
  var precision = 0;
  if (valueStr && valueStr.indexOf(".") >= 0) {
    precision = valueStr.length - valueStr.indexOf(".") - 1;
  }
  return precision;
};
var getMaxPrecision = function getMaxPrecision2(currentValue, step) {
  var stepPrecision = getPrecision2(step);
  var currentValuePrecision = getPrecision2(currentValue);
  return Math.max(currentValuePrecision, stepPrecision);
};
var getPrecisionFactor = function getPrecisionFactor2(currentValue, step) {
  var precision = getMaxPrecision(currentValue, step);
  return Math.pow(10, precision);
};
var formatValue = function formatValue2(currentValue, step) {
  var precision = getMaxPrecision(currentValue, step);
  if (precision > 0) {
    return Number(currentValue).toFixed(precision);
  }
  return Number(Number(currentValue).toFixed(precision));
};
var getValue10 = function getValue11(props, defaultValue) {
  var value = props.value, max = props.max, min = props.min, step = props.step;
  var tempValue = props.defaultValue === void 0 ? defaultValue : props.defaultValue;
  tempValue = value === void 0 ? tempValue : value;
  return formatValue(compareValue(tempValue, max, min), step);
};
var Stepper = function(_PureComponent) {
  _inherits(Stepper2, _PureComponent);
  var _super = _createSuper55(Stepper2);
  function Stepper2() {
    var _this2;
    _classCallCheck(this, Stepper2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      value: getValue10(_this2.props, 0),
      prevPropsValue: getValue10(_this2.props, 0),
      lastValue: getValue10(_this2.props, 0)
    };
    _this2.onInputChange = function(value) {
      var onInputChange = _this2.props.onInputChange;
      _this2.setState({
        value
      });
      if (typeof onInputChange === "function") {
        onInputChange(value);
      }
    };
    _this2.onInputBlur = function(value) {
      var _this$props = _this2.props, onChange2 = _this$props.onChange, step = _this$props.step, max = _this$props.max, min = _this$props.min;
      var currentValue = value;
      if (Number.isNaN(Number(value))) {
        currentValue = _this2.state.lastValue;
      }
      currentValue = formatValue(compareValue(currentValue, max, min), step);
      _this2.setState({
        value: currentValue,
        lastValue: currentValue
      });
      if (typeof onChange2 === "function") {
        onChange2(currentValue);
      }
    };
    _this2.onSubClick = function() {
      var step = _this2.props.step;
      var value = _this2.state.value;
      if (_this2.isSubDisabled()) {
        return;
      }
      var precisionFactor = getPrecisionFactor(value, step);
      var precision = getMaxPrecision(value, step);
      var newValue = (precisionFactor * Number(value) - precisionFactor * step) / precisionFactor;
      _this2.onInputBlur(newValue.toFixed(precision));
    };
    _this2.onPlusClick = function() {
      var step = _this2.props.step;
      var value = _this2.state.value;
      if (_this2.isPlusDisabled()) {
        return;
      }
      var precisionFactor = getPrecisionFactor(value, step);
      var precision = getMaxPrecision(value, step);
      var newValue = (precisionFactor * Number(value) + precisionFactor * step) / precisionFactor;
      _this2.onInputBlur(newValue.toFixed(precision));
    };
    _this2.isSubDisabled = function() {
      var _this$props2 = _this2.props, min = _this$props2.min, disabled = _this$props2.disabled;
      var value = _this2.state.value;
      if (min === null) {
        return false;
      }
      return value <= min || disabled;
    };
    _this2.isPlusDisabled = function() {
      var _this$props3 = _this2.props, max = _this$props3.max, disabled = _this$props3.disabled;
      var value = _this2.state.value;
      if (max === null) {
        return false;
      }
      return value >= max || disabled;
    };
    return _this2;
  }
  _createClass(Stepper2, [{
    key: "render",
    value: function render() {
      var _classnames, _this2 = this;
      var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, className = _this$props4.className, shape = _this$props4.shape, disabled = _this$props4.disabled, size = _this$props4.size, type = _this$props4.type, disableInput = _this$props4.disableInput;
      var value = this.state.value;
      var cls = (0, import_classnames39.default)(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _classnames));
      var inputCls = (0, import_classnames39.default)("".concat(prefixCls, "__input "), _defineProperty({}, "".concat(prefixCls, "__input--disabled"), disableInput));
      var buttonSize = size === "lg" ? "sm" : "xs";
      var inputProps = {
        className: inputCls,
        type,
        value,
        disabled: disabled || disableInput,
        clearable: false,
        onChange: function onChange2(v) {
          return !disabled && _this2.onInputChange(v);
        },
        onBlur: function onBlur() {
          return !disabled && _this2.onInputBlur(value);
        }
      };
      return import_react58.default.createElement("span", {
        className: cls
      }, import_react58.default.createElement(Button, {
        className: "".concat(prefixCls, "__sub"),
        size: buttonSize,
        disabled: this.isSubDisabled(),
        shape,
        onClick: this.onSubClick
      }, import_react58.default.createElement(icon_default, {
        type: "minus"
      })), import_react58.default.createElement(input_default, inputProps), import_react58.default.createElement(Button, {
        className: "".concat(prefixCls, "__plus"),
        size: buttonSize,
        disabled: this.isPlusDisabled(),
        shape,
        onClick: this.onPlusClick
      }, import_react58.default.createElement(icon_default, {
        type: "add"
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (typeof nextProps.value !== "undefined" && nextProps.value !== prevState.prevPropsValue) {
        var value = getValue10(nextProps, 0);
        return {
          value,
          lastValue: value,
          prevPropsValue: value
        };
      }
      return null;
    }
  }]);
  return Stepper2;
}(import_react58.PureComponent);
Stepper.displayName = "Stepper";
Stepper.defaultProps = {
  prefixCls: "za-stepper",
  shape: "radius",
  disabled: false,
  step: 1,
  type: "text",
  disableInput: false
};

// node_modules/zarm/es/carousel/index.js
var import_react59 = __toESM(require_react());
var import_classnames40 = __toESM(require_classnames());
function _createSuper56(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct56();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct56() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Carousel = function(_Component) {
  _inherits(Carousel2, _Component);
  var _super = _createSuper56(Carousel2);
  function Carousel2(_props) {
    var _this2;
    _classCallCheck(this, Carousel2);
    _this2 = _super.call(this, _props);
    _this2.carouselItems = void 0;
    _this2.moveInterval = void 0;
    _this2.translateX = 0;
    _this2.translateY = 0;
    _this2.onSlideTo = function(index) {
      _this2.onMoveTo(index, _this2.props.animationDuration);
    };
    _this2.onJumpTo = function(index) {
      _this2.onMoveTo(index, 0);
    };
    _this2.onMoveTo = function(index, animationDuration) {
      var dom = _this2.carouselItems;
      var _this$props = _this2.props, loop = _this$props.loop, children = _this$props.children, onChange2 = _this$props.onChange;
      var maxLength = children.length;
      var previousIndex = _this2.state.activeIndex;
      _this2.translateX = -dom.offsetWidth * (index + loop);
      _this2.translateY = -dom.offsetHeight * (index + loop);
      _this2.doTransition({
        x: _this2.translateX,
        y: _this2.translateY
      }, animationDuration);
      if (index > maxLength - 1) {
        index = 0;
      } else if (index < 0) {
        index = maxLength - 1;
      }
      var activeIndexChanged = previousIndex !== index;
      _this2.setState({
        activeIndex: index,
        activeIndexChanged
      });
      if (typeof onChange2 === "function" && activeIndexChanged) {
        onChange2(index);
      }
    };
    _this2.onDragStart = function() {
      var _this$props2 = _this2.props, swipeable = _this$props2.swipeable, children = _this$props2.children;
      if (!swipeable) {
        return false;
      }
      var activeIndex = _this2.state.activeIndex;
      var maxLength = children.length;
      if (activeIndex <= 0) {
        _this2.onJumpTo(0);
      } else if (activeIndex >= maxLength - 1) {
        _this2.onJumpTo(maxLength - 1);
      }
      _this2.pauseAutoPlay();
    };
    _this2.onDragMove = function(event, _ref) {
      var offsetX = _ref.offsetX, offsetY = _ref.offsetY;
      var swipeable = _this2.props.swipeable;
      if (!swipeable) {
        return false;
      }
      var distanceX = Math.abs(offsetX);
      var distanceY = Math.abs(offsetY);
      if (_this2.isDirectionX() && (distanceX < 5 || distanceX >= 5 && distanceY >= 1.73 * distanceX)) {
        return false;
      }
      if (!_this2.isDirectionX() && (distanceY < 5 || distanceY >= 5 && distanceX >= 1.73 * distanceY)) {
        return false;
      }
      if (!_this2.props.loop) {
        if (_this2.isLastIndex()) {
          if (_this2.isDirectionX() && offsetX < 0 || !_this2.isDirectionX() && offsetY < 0) {
            return false;
          }
        }
        if (_this2.isFirstIndex()) {
          if (_this2.isDirectionX() && offsetX > 0 || !_this2.isDirectionX() && offsetY > 0) {
            return false;
          }
        }
      }
      if (!events_default.supportsPassiveEvents) {
        event.preventDefault();
      }
      _this2.doTransition({
        x: _this2.translateX + offsetX,
        y: _this2.translateY + offsetY
      }, 0);
      return true;
    };
    _this2.onDragEnd = function(_event, _ref2) {
      var offsetX = _ref2.offsetX, offsetY = _ref2.offsetY, startTime = _ref2.startTime;
      var swipeable = _this2.props.swipeable;
      if (!swipeable) {
        return false;
      }
      if (!offsetX && !offsetY) {
        _this2.startAutoPlay();
        return;
      }
      var _this$props3 = _this2.props, moveDistanceRatio = _this$props3.moveDistanceRatio, moveTimeSpan = _this$props3.moveTimeSpan;
      var activeIndex = _this2.state.activeIndex;
      var dom = _this2.carouselItems;
      var timeSpan = (/* @__PURE__ */ new Date()).getTime() - startTime.getTime();
      var ratio = _this2.isDirectionX() ? Math.abs(offsetX / dom.offsetWidth) : Math.abs(offsetY / dom.offsetHeight);
      if (ratio >= moveDistanceRatio || timeSpan <= moveTimeSpan) {
        var action = _this2.isDirectionX() && offsetX > 0 || !_this2.isDirectionX() && offsetY > 0 ? "prev" : "next";
        activeIndex = action === "next" ? activeIndex + 1 : activeIndex - 1;
      }
      _this2.onSlideTo(activeIndex);
      _this2.startAutoPlay();
    };
    _this2.startAutoPlay = function() {
      var _this$props4 = _this2.props, direction = _this$props4.direction, loop = _this$props4.loop, autoPlay = _this$props4.autoPlay, autoPlayIntervalTime = _this$props4.autoPlayIntervalTime;
      _this2.moveInterval = autoPlay && setInterval(function() {
        var activeIndex = _this2.state.activeIndex;
        var isLeftOrUpDirection = ["left", "up"].indexOf(direction) > -1;
        activeIndex = isLeftOrUpDirection ? activeIndex + 1 : activeIndex - 1;
        if (!loop && (isLeftOrUpDirection ? _this2.isLastIndex() : _this2.isFirstIndex())) {
          _this2.pauseAutoPlay();
          return;
        }
        _this2.onSlideTo(activeIndex);
      }, autoPlayIntervalTime);
    };
    _this2.pauseAutoPlay = function() {
      if (_this2.moveInterval) {
        clearInterval(_this2.moveInterval);
      }
    };
    _this2.parseItems = function(props) {
      if (props.children.length === 0) {
        return;
      }
      var items = [].concat(props.children);
      var firstItem = items[0];
      var lastItem = items[items.length - 1];
      if (props.loop) {
        items.push(firstItem);
        items.unshift(lastItem);
      }
      var newItems = import_react59.default.Children.map(items, function(element, index) {
        return (0, import_react59.cloneElement)(element, {
          key: index,
          className: (0, import_classnames40.default)("".concat(props.prefixCls, "__item"), element.props.className)
        });
      });
      return newItems;
    };
    _this2.resize = function() {
      _this2.onJumpTo(_this2.state.activeIndex);
    };
    _this2.doTransition = function(offset3, animationDuration) {
      var dom = _this2.carouselItems;
      var x = 0;
      var y = 0;
      if (_this2.isDirectionX()) {
        x = offset3.x;
      } else {
        y = offset3.y;
      }
      dom.style.WebkitTransformDuration = "".concat(animationDuration, "ms");
      dom.style.transitionDuration = "".concat(animationDuration, "ms");
      dom.style.WebkitTransform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
      dom.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
    };
    _this2.transitionEnd = function() {
      var onChangeEnd = _this2.props.onChangeEnd;
      var _this$state = _this2.state, activeIndex = _this$state.activeIndex, activeIndexChanged = _this$state.activeIndexChanged;
      var dom = _this2.carouselItems;
      _this2.translateX = -dom.offsetWidth * (activeIndex + _this2.props.loop);
      _this2.translateY = -dom.offsetHeight * (activeIndex + _this2.props.loop);
      _this2.doTransition({
        x: _this2.translateX,
        y: _this2.translateY
      }, 0);
      if (typeof onChangeEnd === "function" && activeIndexChanged) {
        onChangeEnd(activeIndex);
      }
    };
    _this2.isLastIndex = function() {
      return _this2.state.activeIndex >= _this2.props.children.length - 1;
    };
    _this2.isFirstIndex = function() {
      return _this2.state.activeIndex <= 0;
    };
    _this2.isDirectionX = function() {
      return ["left", "right"].indexOf(_this2.props.direction) > -1;
    };
    _this2.renderPaginationItem = function(_result, index) {
      var prefixCls = _this2.props.prefixCls;
      var paginationItemCls = (0, import_classnames40.default)("".concat(prefixCls, "__pagination__item"), _defineProperty({}, "".concat(prefixCls, "__pagination__item--active"), index === _this2.state.activeIndex));
      return import_react59.default.createElement("div", {
        key: "pagination-".concat(index),
        className: paginationItemCls,
        onClick: function onClick2() {
          return _this2.onSlideTo(index);
        }
      });
    };
    _this2.renderPagination = function() {
      var _this$props5 = _this2.props, prefixCls = _this$props5.prefixCls, showPagination = _this$props5.showPagination, children = _this$props5.children;
      return showPagination && import_react59.default.createElement("div", {
        className: "".concat(prefixCls, "__pagination")
      }, import_react59.Children.map(children, _this2.renderPaginationItem));
    };
    _this2.state = {
      // items: [],
      activeIndex: _props.activeIndex,
      activeIndexChanged: false
    };
    return _this2;
  }
  _createClass(Carousel2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var activeIndex = this.props.activeIndex;
      events_default.on(window, "resize", this.resize);
      this.startAutoPlay();
      this.onJumpTo(activeIndex);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var activeIndex = this.props.activeIndex;
      if (activeIndex !== prevProps.activeIndex) {
        this.onSlideTo(activeIndex);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.pauseAutoPlay();
      events_default.off(window, "resize", this.resize);
      events_default.off(this.carouselItems, "webkitTransitionEnd", this.transitionEnd);
      events_default.off(this.carouselItems, "transitionend", this.transitionEnd);
    }
    // 滑动到指定编号
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props6 = this.props, prefixCls = _this$props6.prefixCls, className = _this$props6.className, height = _this$props6.height, style2 = _this$props6.style;
      var items = this.parseItems(this.props);
      var itemsStyle = {};
      var direction = this.isDirectionX() ? "horizontal" : "vertical";
      var cls = (0, import_classnames40.default)(prefixCls, className, "".concat(prefixCls, "--").concat(direction));
      if (!this.isDirectionX()) {
        itemsStyle.height = height;
      }
      var content = import_react59.default.createElement("div", {
        ref: function ref(ele) {
          _this2.carouselItems = ele;
        },
        className: "".concat(prefixCls, "__items"),
        onTransitionEnd: this.transitionEnd,
        style: itemsStyle
      }, items);
      return import_react59.default.createElement("div", {
        className: cls,
        style: style2
      }, import_react59.default.createElement(Drag, {
        onDragStart: this.onDragStart,
        onDragMove: this.onDragMove,
        onDragEnd: this.onDragEnd
      }, content), this.renderPagination());
    }
  }]);
  return Carousel2;
}(import_react59.Component);
Carousel.defaultProps = {
  prefixCls: "za-carousel",
  direction: "left",
  height: 160,
  loop: false,
  activeIndex: 0,
  animationDuration: 300,
  swipeable: true,
  autoPlay: false,
  autoPlayIntervalTime: 3e3,
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  showPagination: true
};

// node_modules/zarm/es/swipe-action/index.js
var import_react60 = __toESM(require_react());
var import_classnames41 = __toESM(require_classnames());
function _createSuper57(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct57();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct57() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var SwipeAction = function(_PureComponent) {
  _inherits(SwipeAction2, _PureComponent);
  var _super = _createSuper57(SwipeAction2);
  function SwipeAction2(props) {
    var _this2;
    _classCallCheck(this, SwipeAction2);
    _this2 = _super.call(this, props);
    _this2.isOpen = false;
    _this2.touchEnd = true;
    _this2.wrap = void 0;
    _this2.left = void 0;
    _this2.right = void 0;
    _this2.onDragStart = function() {
      if (_this2.isOpen) {
        _this2.touchEnd = false;
        _this2.close();
        return;
      }
      _this2.touchEnd = true;
    };
    _this2.onDragMove = function(event, _ref) {
      var offsetX = _ref.offsetX, offsetY = _ref.offsetY;
      var disabled = _this2.props.disabled;
      if (!_this2.touchEnd || disabled) {
        return false;
      }
      var offset3 = _this2.props.offset;
      var offsetLeft = _this2.state.offsetLeft;
      var btnsLeftWidth = _this2.left && _this2.left.offsetWidth;
      var btnsRightWidth = _this2.right && _this2.right.offsetWidth;
      if (offsetX > 0 && (!btnsLeftWidth || offsetLeft >= btnsLeftWidth + offset3)) {
        return false;
      }
      if (offsetX < 0 && (!btnsRightWidth || offsetLeft <= -btnsRightWidth - offset3)) {
        return false;
      }
      var distanceX = Math.abs(offsetX);
      var distanceY = Math.abs(offsetY);
      if (distanceX < 5 || distanceX >= 5 && distanceY >= 0.3 * distanceX) {
        return false;
      }
      if (!events_default.supportsPassiveEvents) {
        event.preventDefault();
      }
      _this2.doTransition({
        offsetLeft: offsetX,
        animationDuration: 0
      });
      return true;
    };
    _this2.onDragEnd = function(_event, _ref2) {
      var offsetX = _ref2.offsetX, startTime = _ref2.startTime;
      var _this$props = _this2.props, animationDuration = _this$props.animationDuration, moveDistanceRatio = _this$props.moveDistanceRatio, moveTimeSpan = _this$props.moveTimeSpan;
      var timeSpan = (/* @__PURE__ */ new Date()).getTime() - startTime.getTime();
      var btnsLeftWidth = _this2.left && _this2.left.offsetWidth;
      var btnsRightWidth = _this2.right && _this2.right.offsetWidth;
      var distanceX = 0;
      var isOpen = false;
      if (offsetX / btnsLeftWidth > moveDistanceRatio || offsetX > 0 && timeSpan <= moveTimeSpan) {
        distanceX = btnsLeftWidth;
        isOpen = true;
      } else if (offsetX / btnsRightWidth < -moveDistanceRatio || offsetX < 0 && timeSpan <= moveTimeSpan) {
        distanceX = -btnsRightWidth;
        isOpen = true;
      }
      if (isOpen && !_this2.isOpen) {
        _this2.open(distanceX);
      } else if (!isOpen && _this2.isOpen) {
        _this2.close();
      } else {
        _this2.doTransition({
          offsetLeft: distanceX,
          animationDuration
        });
      }
    };
    _this2.onCloseSwipe = function(e) {
      if (!_this2.wrap) {
        return;
      }
      if (_this2.isOpen) {
        var pNode = function(node) {
          while (node.parentNode && node.parentNode !== document.body) {
            if (node === _this2.wrap) {
              return node;
            }
            node = node.parentNode;
          }
        }(e.target);
        if (!pNode) {
          e.preventDefault();
          _this2.touchEnd = true;
          _this2.close();
        }
      }
    };
    _this2.open = function(offsetLeft) {
      var _this$props2 = _this2.props, animationDuration = _this$props2.animationDuration, onOpen = _this$props2.onOpen;
      _this2.isOpen = true;
      _this2.doTransition({
        offsetLeft,
        animationDuration
      });
      if (typeof onOpen === "function") {
        onOpen();
      }
    };
    _this2.close = function() {
      var _this$props3 = _this2.props, animationDuration = _this$props3.animationDuration, onClose = _this$props3.onClose;
      _this2.isOpen = false;
      _this2.doTransition({
        offsetLeft: 0,
        animationDuration
      });
      if (typeof onClose === "function") {
        onClose();
      }
    };
    _this2.doTransition = function(_ref3) {
      var offsetLeft = _ref3.offsetLeft, animationDuration = _ref3.animationDuration;
      _this2.setState({
        offsetLeft,
        animationDuration
      });
    };
    _this2.renderButton = function(button, index) {
      return (0, import_react60.cloneElement)(button, {
        key: +index,
        onClick: function onClick2(e) {
          var onClick3 = button.props.onClick;
          onClick3 && onClick3(e);
          if (_this2.props.autoClose) {
            _this2.close();
          }
        }
      });
    };
    _this2.renderButtons = function(buttons, direction) {
      if (!buttons || buttons.length === 0) {
        return;
      }
      var prefixCls = _this2.props.prefixCls;
      var cls = (0, import_classnames41.default)("".concat(prefixCls, "__actions"), "".concat(prefixCls, "__actions--").concat(direction));
      return import_react60.default.createElement("div", {
        className: cls,
        ref: function ref(el) {
          _this2[direction] = el;
        }
      }, buttons.map(_this2.renderButton));
    };
    _this2.state = {
      offsetLeft: 0
    };
    return _this2;
  }
  _createClass(SwipeAction2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      events_default.on(document.body, "touchstart", this.onCloseSwipe);
      events_default.on(document.body, "click", this.onCloseSwipe);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      events_default.off(document.body, "touchstart", this.onCloseSwipe);
      events_default.off(document.body, "click", this.onCloseSwipe);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, className = _this$props4.className, left = _this$props4.left, right = _this$props4.right, children = _this$props4.children;
      var _this$state = this.state, offsetLeft = _this$state.offsetLeft, animationDuration = _this$state.animationDuration;
      var cls = (0, import_classnames41.default)(prefixCls, className);
      var style2 = {
        WebkitTransitionDuration: "".concat(animationDuration, "ms"),
        transitionDuration: "".concat(animationDuration, "ms"),
        WebkitTransform: "translate3d(".concat(offsetLeft, "px, 0, 0)"),
        transform: "translate3d(".concat(offsetLeft, "px, 0, 0)")
      };
      return left || right ? import_react60.default.createElement("div", {
        className: cls,
        ref: function ref(wrap) {
          _this2.wrap = wrap;
        }
      }, this.renderButtons(left, "left"), this.renderButtons(right, "right"), import_react60.default.createElement(Drag, {
        onDragStart: this.onDragStart,
        onDragMove: this.onDragMove,
        onDragEnd: this.onDragEnd
      }, import_react60.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        style: style2
      }, children))) : children;
    }
  }]);
  return SwipeAction2;
}(import_react60.PureComponent);
SwipeAction.defaultProps = {
  prefixCls: "za-swipe-action",
  left: [],
  right: [],
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  animationDuration: 300,
  offset: 10,
  autoClose: true
};

// node_modules/zarm/es/switch/index.js
var import_react61 = __toESM(require_react());
var import_classnames42 = __toESM(require_classnames());
function _createSuper58(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct58();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct58() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getChecked5 = function getChecked6(props, defaultChecked) {
  if (typeof props.checked !== "undefined") {
    return props.checked;
  }
  if (typeof props.defaultChecked !== "undefined") {
    return props.defaultChecked;
  }
  return defaultChecked;
};
var Switch = function(_PureComponent) {
  _inherits(Switch2, _PureComponent);
  var _super = _createSuper58(Switch2);
  function Switch2() {
    var _this2;
    _classCallCheck(this, Switch2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.state = {
      checked: getChecked5(_this2.props, false)
    };
    _this2.onValueChange = function() {
      var _this$props = _this2.props, disabled = _this$props.disabled, onChange2 = _this$props.onChange;
      var checked = _this2.state.checked;
      if (disabled) {
        return;
      }
      var newChecked = !checked;
      if (!("checked" in _this2.props)) {
        _this2.setState({
          checked: newChecked
        });
      }
      if (typeof onChange2 === "function") {
        onChange2(newChecked);
      }
    };
    return _this2;
  }
  _createClass(Switch2, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, className = _this$props2.className, disabled = _this$props2.disabled, style2 = _this$props2.style;
      var checked = this.state.checked;
      var cls = (0, import_classnames42.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--disabled"), disabled));
      return import_react61.default.createElement("span", {
        className: cls,
        style: style2
      }, import_react61.default.createElement("input", {
        type: "checkbox",
        className: "".concat(prefixCls, "__input"),
        disabled,
        checked,
        onChange: this.onValueChange,
        value: checked ? "on" : "off"
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if (typeof nextProps.checked !== "undefined") {
        return {
          checked: nextProps.checked
        };
      }
      return null;
    }
  }]);
  return Switch2;
}(import_react61.PureComponent);
Switch.displayName = "Switch";
Switch.defaultProps = {
  prefixCls: "za-switch",
  disabled: false
};

// node_modules/zarm/es/tabs/Tabs.js
var import_react63 = __toESM(require_react());
var import_classnames44 = __toESM(require_classnames());

// node_modules/zarm/es/tabs/TabPanel.js
var import_react62 = __toESM(require_react());
var import_classnames43 = __toESM(require_classnames());
function _createSuper59(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct59();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct59() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var TabPanel = function(_PureComponent) {
  _inherits(TabPanel2, _PureComponent);
  var _super = _createSuper59(TabPanel2);
  function TabPanel2(props) {
    var _this2;
    _classCallCheck(this, TabPanel2);
    _this2 = _super.call(this, props);
    _this2.state = {
      selected: props.selected
    };
    return _this2;
  }
  _createClass(TabPanel2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, children = _this$props.children;
      var selected = this.state.selected;
      var cls = (0, import_classnames43.default)("".concat(prefixCls, "__panel"), className, _defineProperty({}, "".concat(prefixCls, "__panel--active"), selected));
      return import_react62.default.createElement("div", {
        className: cls,
        role: "tabpanel"
      }, children);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ("selected" in nextProps) {
        return {
          selected: nextProps.selected
        };
      }
      return null;
    }
  }]);
  return TabPanel2;
}(import_react62.PureComponent);
TabPanel.defaultProps = {
  prefixCls: "za-tabs"
};

// node_modules/zarm/es/tabs/util/index.js
function getTransformPropValue(v) {
  return {
    transform: v,
    WebkitTransform: v,
    MozTransform: v
  };
}
function getPxStyle(value) {
  var unit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "px";
  var vertical = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  value = vertical ? "0px, ".concat(value).concat(unit, ", 0px") : "".concat(value).concat(unit, ", 0px, 0px");
  return "translate3d(".concat(value, ")");
}

// node_modules/zarm/es/tabs/Tabs.js
function ownKeys15(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread15(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys15(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys15(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper60(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct60();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct60() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getSelectIndex = function getSelectIndex2(children) {
  var selectIndex;
  import_react63.default.Children.forEach(children, function(item, index) {
    if (item.props && item.props.selected) {
      selectIndex = index;
    }
  });
  return selectIndex;
};
var Tabs = function(_PureComponent) {
  _inherits(Tabs2, _PureComponent);
  var _super = _createSuper60(Tabs2);
  function Tabs2(props) {
    var _this2;
    _classCallCheck(this, Tabs2);
    _this2 = _super.call(this, props);
    _this2.carousel = void 0;
    _this2.layout = void 0;
    _this2.setTablistRef = function(ref) {
      _this2.layout = ref;
    };
    _this2.setCarouselRef = function(ref) {
      _this2.carousel = ref;
    };
    _this2.onTabChange = function(value) {
      var onChange2 = _this2.props.onChange;
      if (!("value" in _this2.props)) {
        _this2.setState({
          value
        });
      }
      typeof onChange2 === "function" && onChange2(value);
    };
    _this2.onTabClick = function(tab, index) {
      var _this$props = _this2.props, disabled = _this$props.disabled, swipeable = _this$props.swipeable;
      if (disabled || tab.props.disabled) {
        return;
      }
      if (swipeable) {
        _this2.carousel && _this2.carousel.onSlideTo(index);
        return;
      }
      _this2.onTabChange(index);
    };
    _this2.renderTabs = function(tab, index) {
      var _classnames;
      var _this$props2 = _this2.props, prefixCls = _this$props2.prefixCls, disabled = _this$props2.disabled;
      var value = _this2.state.value;
      var itemCls = (0, import_classnames44.default)("".concat(prefixCls, "__tab"), tab.props.className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "__tab--disabled"), disabled || tab.props.disabled), _defineProperty(_classnames, "".concat(prefixCls, "__tab--active"), value === index), _classnames));
      return import_react63.default.createElement("li", {
        role: "tab",
        key: +index,
        className: itemCls,
        onClick: function onClick2() {
          return _this2.onTabClick(tab, index);
        }
      }, tab.props.title);
    };
    _this2.caclLineSizePos = function() {
      var itemWidth = _this2.state.itemWidth;
      var value = _this2.currentValue;
      var _this$props3 = _this2.props, children = _this$props3.children, scrollable = _this$props3.scrollable;
      var ChildCount = import_react63.default.Children.count(children);
      var pos = 100 * value;
      if (scrollable && _this2.layout) {
        var el = _this2.layout.children[value];
        var _ref = el, _ref$offsetLeft = _ref.offsetLeft, offsetLeft = _ref$offsetLeft === void 0 ? 0 : _ref$offsetLeft, _ref$offsetTop = _ref.offsetTop, offsetTop = _ref$offsetTop === void 0 ? 0 : _ref$offsetTop;
        pos = _this2.isVertical ? offsetTop : offsetLeft;
      }
      var size = scrollable ? "".concat(itemWidth, "px") : "".concat(100 / ChildCount, "%");
      var transformValue = scrollable ? getPxStyle(pos, "px", _this2.isVertical) : getPxStyle(pos, "%", _this2.isVertical);
      var styleUl = getTransformPropValue(transformValue);
      var itemSize = _this2.isVertical ? {
        height: "".concat(size)
      } : {
        width: "".concat(size)
      };
      return _objectSpread15(_objectSpread15({}, styleUl), itemSize);
    };
    _this2.calculateScorllLeftLocation = function() {
      var scrollable = _this2.props.scrollable;
      if (!scrollable) {
        return false;
      }
      var value = _this2.currentValue;
      var index = value - 1 >= 0 ? value - 1 : 0;
      var prevTabItem = _this2.layout.childNodes[index];
      if (scrollable && _this2.layout && prevTabItem) {
        var _ref2 = prevTabItem, _ref2$offsetTop = _ref2.offsetTop, top = _ref2$offsetTop === void 0 ? 0 : _ref2$offsetTop, _ref2$offsetLeft = _ref2.offsetLeft, left = _ref2$offsetLeft === void 0 ? 0 : _ref2$offsetLeft;
        scrollTo(_this2.layout, top, left, 0.3);
      }
    };
    _this2.calculateLineWidth = function() {
      var scrollable = _this2.props.scrollable;
      if (!scrollable) {
        return;
      }
      var value = _this2.currentValue;
      var el = _this2.layout.children[value];
      var size = _this2.isVertical ? _this2.getComputedStyle(el, "height") : _this2.getComputedStyle(el, "width");
      _this2.setState({
        itemWidth: parseInt(size, 10)
      });
    };
    _this2.getComputedStyle = function(el, prop) {
      var value = "0";
      if (prop in el.style) {
        value = el.style[prop] || getComputedStyle(el).getPropertyValue(prop) || "0";
      }
      return value;
    };
    _this2.state = {
      value: props.value || props.defaultValue || getSelectIndex(props.children) || 0,
      itemWidth: 0
    };
    return _this2;
  }
  _createClass(Tabs2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var children = this.props.children;
      if (import_react63.default.Children.count(children)) {
        this.calculateLineWidth();
        this.calculateScorllLeftLocation();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevstate) {
      var prevValue = prevstate.value, prevChild = prevstate.children;
      var value = this.state.value;
      var children = this.props.children;
      if (prevValue !== value || prevChild !== children) {
        this.calculateLineWidth();
      }
      this.calculateScorllLeftLocation();
    }
  }, {
    key: "isVertical",
    get: function get() {
      var direction = this.props.direction;
      return direction === "vertical";
    }
  }, {
    key: "currentValue",
    get: function get() {
      var value = this.state.value;
      var children = this.props.children;
      var count = import_react63.default.Children.count(children);
      if (value < 0) {
        return 0;
      }
      if (value > count - 1) {
        return count - 1;
      }
      return value;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props4 = this.props, prefixCls = _this$props4.prefixCls, className = _this$props4.className, lineWidth = _this$props4.lineWidth, swipeable = _this$props4.swipeable, children = _this$props4.children, disabled = _this$props4.disabled, scrollable = _this$props4.scrollable, direction = _this$props4.direction;
      var value = this.currentValue;
      var classes = (0, import_classnames44.default)(prefixCls, className, "".concat(prefixCls, "--").concat(direction), _defineProperty({}, "".concat(prefixCls, "--scroll"), scrollable));
      var tabsRender = import_react63.default.Children.map(children, this.renderTabs);
      var contentRender;
      if (swipeable) {
        contentRender = import_react63.default.createElement(Carousel, {
          swipeable: !disabled,
          direction: direction === "vertical" ? "up" : "left",
          showPagination: false,
          activeIndex: value,
          ref: this.setCarouselRef,
          onChange: function onChange2(v) {
            _this2.onTabChange(v);
          }
        }, import_react63.default.Children.map(children, function(item, index) {
          return import_react63.default.createElement("div", {
            key: +index
          }, item.props.children);
        }));
      } else {
        contentRender = import_react63.default.Children.map(children, function(item, index) {
          return item.props.children && import_react63.default.createElement(TabPanel, _extends({}, item.props, {
            selected: value === index
          }));
        });
      }
      var lineStyle = this.caclLineSizePos();
      var lineInnerRender;
      if (lineWidth) {
        lineStyle.backgroundColor = "transparent";
        lineInnerRender = import_react63.default.createElement("span", {
          className: "".concat(prefixCls, "__line__inner"),
          style: {
            width: lineWidth
          }
        });
      }
      return import_react63.default.createElement("div", {
        className: classes
      }, import_react63.default.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, import_react63.default.createElement("ul", {
        className: "".concat(prefixCls, "__tablist"),
        role: "tablist",
        ref: this.setTablistRef
      }, tabsRender, import_react63.default.createElement("div", {
        className: "".concat(prefixCls, "__line"),
        style: lineStyle
      }, lineInnerRender))), import_react63.default.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, contentRender));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("value" in nextProps && nextProps.value !== state.prevValue) {
        return {
          value: nextProps.value,
          prevValue: nextProps.value
        };
      }
      return null;
    }
  }]);
  return Tabs2;
}(import_react63.PureComponent);
Tabs.Panel = void 0;
Tabs.defaultProps = {
  prefixCls: "za-tabs",
  disabled: false,
  swipeable: false,
  scrollable: false,
  direction: "horizontal"
};

// node_modules/zarm/es/tabs/index.js
Tabs.Panel = TabPanel;
var tabs_default = Tabs;

// node_modules/zarm/es/toast/index.js
var import_react64 = __toESM(require_react());
var import_react_dom6 = __toESM(require_react_dom());
function ownKeys16(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread16(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys16(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys16(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper61(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct61();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct61() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var contentIsToastProps = function contentIsToastProps2(content) {
  return !!content && _typeof(content) === "object" && "content" in content;
};
var Toast = function(_Component) {
  _inherits(Toast2, _Component);
  var _super = _createSuper61(Toast2);
  function Toast2() {
    var _this2;
    _classCallCheck(this, Toast2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.timer = 0;
    _this2.state = {
      visible: _this2.props.visible
    };
    _this2.afterClose = function() {
      var afterClose = _this2.props.afterClose;
      if (Toast2.zarmToast) {
        Toast2.toastContainer.removeChild(Toast2.zarmToast);
        Toast2.zarmToast = null;
      }
      if (typeof afterClose === "function") {
        afterClose();
      }
    };
    _this2._hide = function() {
      _this2.setState({
        visible: false
      });
    };
    return _this2;
  }
  _createClass(Toast2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoClose();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;
      if (prevProps.visible !== visible) {
        if (visible === true) {
          this.setState({
            visible: true
          });
          this.autoClose();
        } else {
          clearTimeout(this.timer);
          this._hide();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timer);
    }
  }, {
    key: "autoClose",
    value: function autoClose() {
      var _this2 = this;
      var stayTime = this.props.stayTime;
      if (stayTime > 0) {
        this.timer = setTimeout(function() {
          _this2._hide();
          clearTimeout(_this2.timer);
        }, stayTime);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, stayTime = _this$props.stayTime, content = _this$props.content, others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "stayTime", "content"]);
      var visible = this.state.visible;
      return import_react64.default.createElement(popup_default, _extends({
        direction: "center",
        maskType: "transparent",
        width: "70%"
      }, others, {
        visible,
        afterClose: this.afterClose
      }), import_react64.default.createElement("div", {
        className: prefixCls
      }, import_react64.default.createElement("div", {
        className: "".concat(prefixCls, "__container")
      }, content)));
    }
  }]);
  return Toast2;
}(import_react64.Component);
Toast.hideHelper = void 0;
Toast.zarmToast = void 0;
Toast.toastContainer = void 0;
Toast.show = function(content) {
  Toast.unmountNode();
  if (!Toast.zarmToast) {
    Toast.zarmToast = document.createElement("div");
    Toast.zarmToast.classList.add("za-toast-container");
    if (contentIsToastProps(content) && content.className) {
      Toast.zarmToast.classList.add(content.className);
    }
    Toast.toastContainer = contentIsToastProps(content) && content.mountContainer ? getMountContainer(content.mountContainer) : getMountContainer();
    Toast.toastContainer.appendChild(Toast.zarmToast);
  }
  if (Toast.zarmToast) {
    var props = contentIsToastProps(content) ? _objectSpread16(_objectSpread16(_objectSpread16({}, Toast.defaultProps), content), {}, {
      mountContainer: false,
      visible: true
    }) : _objectSpread16(_objectSpread16({}, Toast.defaultProps), {}, {
      visible: true,
      mountContainer: false,
      content
    });
    Toast.hideHelper = function() {
      import_react_dom6.default.render(import_react64.default.createElement(Toast, _extends({}, props, {
        visible: false
      })), Toast.zarmToast);
    };
    import_react_dom6.default.render(import_react64.default.createElement(Toast, props), Toast.zarmToast);
  }
};
Toast.hide = function() {
  if (Toast.zarmToast) {
    Toast.hideHelper();
  }
};
Toast.unmountNode = function() {
  var zarmToast = Toast.zarmToast;
  if (zarmToast) {
    import_react_dom6.default.render(import_react64.default.createElement(import_react64.default.Fragment, null), zarmToast);
    Toast.toastContainer.removeChild(zarmToast);
    Toast.zarmToast = null;
  }
};
Toast.defaultProps = {
  prefixCls: "za-toast",
  visible: false,
  stayTime: 3e3,
  mask: false
};

// node_modules/zarm/es/nav-bar/index.js
var import_react65 = __toESM(require_react());
var import_classnames45 = __toESM(require_classnames());
function _createSuper62(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct62();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct62() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var NavBar = function(_React$PureComponent) {
  _inherits(NavBar2, _React$PureComponent);
  var _super = _createSuper62(NavBar2);
  function NavBar2() {
    _classCallCheck(this, NavBar2);
    return _super.apply(this, arguments);
  }
  _createClass(NavBar2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, prefixCls = _this$props.prefixCls, className = _this$props.className, style2 = _this$props.style, title = _this$props.title, left = _this$props.left, right = _this$props.right;
      var cls = (0, import_classnames45.default)(prefixCls, className);
      var titleCls = "".concat(prefixCls, "__title");
      var sideCls = "".concat(prefixCls, "__side");
      var leftCls = "".concat(sideCls, " ").concat(prefixCls, "__side--left");
      var rightCls = "".concat(sideCls, " ").concat(prefixCls, "__side--right");
      return import_react65.default.createElement("div", {
        style: style2,
        className: cls
      }, import_react65.default.createElement("div", {
        className: leftCls
      }, left), import_react65.default.createElement("div", {
        className: titleCls
      }, title), import_react65.default.createElement("div", {
        className: rightCls
      }, right));
    }
  }]);
  return NavBar2;
}(import_react65.default.PureComponent);
NavBar.displayName = "NavBar";
NavBar.defaultProps = {
  prefixCls: "za-nav-bar"
};

// node_modules/zarm/es/marquee/index.js
var import_react66 = __toESM(require_react());
var import_classnames46 = __toESM(require_classnames());

// node_modules/zarm/es/marquee/constants.js
var DIRECTION_LEFT = "left";
var DIRECTION_RIGHT = "right";
var DIRECTION_UP = "up";
var DIRECTION_DOWN = "down";

// node_modules/zarm/es/marquee/modifiers.js
var getHorizontal = function getHorizontal2(distance, key) {
  return "@-webkit-keyframes ".concat(key, " {\n      100% {\n        -webkit-transform: translate3d(").concat(distance, "px, 0, 0);\n        transform: translate3d(").concat(distance, "px, 0, 0);\n      }\n    }\n    @keyframes ").concat(key, " {\n      100% {\n        -webkit-transform: translate3d(").concat(distance, "px, 0, 0);\n        transform: translate3d(").concat(distance, "px, 0, 0);\n      }\n    }");
};
var getVertical = function getVertical2(distance, key) {
  return "@-webkit-keyframes ".concat(key, " {\n    100% {\n      -webkit-transform: translate3d(0, ").concat(distance, "px, 0);\n      transform: translate3d(0, ").concat(distance, "px, 0);\n    }\n  }\n  @keyframes ").concat(key, " {\n    100% {\n      -webkit-transform: translate3d(0, ").concat(distance, "px, 0);\n      transform: translate3d(0, ").concat(distance, "px, 0);\n    }\n  }");
};
var directionLeft = function directionLeft2(distance, key) {
  return getHorizontal(-distance, key);
};
var directionRight = function directionRight2(distance, key) {
  return getHorizontal(distance, key);
};
var directionUp = function directionUp2(distance, key) {
  return getVertical(-distance, key);
};
var directionDown = function directionDown2(distance, key) {
  return getVertical(distance, key);
};
var animationModifier = function animationModifier2(duration, loop, delay, key) {
  var infinite = loop ? "infinite" : 1;
  return "".concat(duration, "ms ").concat(key, " ").concat(delay, "ms linear ").concat(infinite);
};
var getKeyFrameModifier = function getKeyFrameModifier2(direction) {
  var dir = direction.toLowerCase();
  switch (dir) {
    case DIRECTION_LEFT:
      return directionLeft;
    case DIRECTION_RIGHT:
      return directionRight;
    case DIRECTION_UP:
      return directionUp;
    case DIRECTION_DOWN:
      return directionDown;
    default:
      return directionLeft;
  }
};

// node_modules/zarm/es/marquee/index.js
function _createSuper63(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct63();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct63() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ANIMATION_DURATION = 6e3;
var ANIMATION_DELAY = 0;
var LOOP = true;
var CLIENT_RECT = {
  bottom: 0,
  height: 0,
  left: 0,
  right: 0,
  top: 0,
  width: 0
};
var Marquee = function(_PureComponent) {
  _inherits(Marquee2, _PureComponent);
  var _super = _createSuper63(Marquee2);
  function Marquee2() {
    var _this2;
    _classCallCheck(this, Marquee2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.container = null;
    _this2.scrollItem = null;
    _this2.containerBoundingRect = CLIENT_RECT;
    _this2.boundingRect = CLIENT_RECT;
    _this2.setScrollItemPosition = function() {
      var direction = _this2.props.direction;
      var dir = direction.toLowerCase();
      var container = _this2.containerBoundingRect;
      var rect = _this2.boundingRect;
      var modifier = "";
      switch (dir) {
        case DIRECTION_LEFT:
          modifier = "translate3d(".concat(container.width, "px, 0, 0)");
          break;
        case DIRECTION_RIGHT:
          modifier = "translate3d(-".concat(rect.width, "px, 0, 0)");
          break;
        case DIRECTION_UP:
          modifier = "translate3d(0, ".concat(_this2.props.height, "px, 0)");
          break;
        case DIRECTION_DOWN:
          modifier = "translate3d(0, -".concat(rect.height, "px ,0)");
          break;
        default:
          modifier = "translate3d(".concat(rect.width, "px, 0, 0)");
      }
      _this2.container.style.transform = modifier;
      _this2.container.style.webkitTransform = modifier;
    };
    _this2.generateKey = function() {
      var _this$props = _this2.props, prefixCls = _this$props.prefixCls, direction = _this$props.direction;
      var id = Date.now();
      return "".concat(prefixCls, "-").concat(direction, "-").concat(id).toUpperCase();
    };
    _this2.animationLoop = function() {
      var _this$props2 = _this2.props, direction = _this$props2.direction, _this$props2$loop = _this$props2.loop, loop = _this$props2$loop === void 0 ? LOOP : _this$props2$loop, _this$props2$animatio = _this$props2.animationDuration, animationDuration = _this$props2$animatio === void 0 ? ANIMATION_DURATION : _this$props2$animatio, _this$props2$animatio2 = _this$props2.animationDelay, animationDelay = _this$props2$animatio2 === void 0 ? ANIMATION_DELAY : _this$props2$animatio2;
      var key = _this2.generateKey();
      var modifier = getKeyFrameModifier(direction);
      var style2 = document.createElement("style");
      style2.type = "text/css";
      style2.innerHTML = modifier(_this2.getDistance(), key);
      document.getElementsByTagName("head")[0].appendChild(style2);
      var animation = animationModifier(animationDuration, loop, animationDelay, key);
      _this2.container.style.animation = animation;
      _this2.container.style.webkitTransform = animation;
    };
    return _this2;
  }
  _createClass(Marquee2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.containerBoundingRect = this.container.getBoundingClientRect();
      this.boundingRect = this.scrollItem.getBoundingClientRect();
      this.setScrollItemPosition();
      this.animationLoop();
    }
  }, {
    key: "getDistance",
    value: function getDistance3() {
      var direction = this.props.direction;
      var dir = direction.toLowerCase();
      switch (dir) {
        case DIRECTION_LEFT:
          return this.boundingRect.width;
        case DIRECTION_RIGHT:
          return this.containerBoundingRect.width;
        case DIRECTION_UP:
          return this.boundingRect.height;
        case DIRECTION_DOWN:
          return this.containerBoundingRect.height;
        default:
          return this.boundingRect.width;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className, height = _this$props3.height, width = _this$props3.width, children = _this$props3.children;
      var cls = (0, import_classnames46.default)(prefixCls, className);
      var style2 = this.props.style;
      style2 = style2 || {};
      style2.width = width;
      style2.height = height;
      return import_react66.default.createElement("div", {
        className: cls
      }, import_react66.default.createElement("div", {
        className: "".concat(prefixCls, "__body"),
        ref: function ref(el) {
          _this2.container = el;
        },
        style: style2
      }, import_react66.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        ref: function ref(el) {
          _this2.scrollItem = el;
        }
      }, children)));
    }
  }]);
  return Marquee2;
}(import_react66.PureComponent);
Marquee.displayName = "CheckboxGroup";
Marquee.defaultProps = {
  prefixCls: "za-marquee",
  direction: "left",
  loop: LOOP,
  animationDuration: ANIMATION_DURATION,
  animationDelay: ANIMATION_DELAY
};

// node_modules/zarm/es/tab-bar/TabBar.js
var import_react67 = __toESM(require_react());
var import_classnames47 = __toESM(require_classnames());
function _createSuper64(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct64();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct64() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var TabBar = function(_PureComponent) {
  _inherits(TabBar2, _PureComponent);
  var _super = _createSuper64(TabBar2);
  function TabBar2() {
    var _this2;
    _classCallCheck(this, TabBar2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.onChildChange = function(value) {
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(value);
      }
    };
    _this2.getSelected = function(index, itemKey) {
      var _this$props = _this2.props, activeKey = _this$props.activeKey, defaultActiveKey = _this$props.defaultActiveKey;
      if (!activeKey) {
        if (!defaultActiveKey && index === 0) {
          return true;
        }
        return defaultActiveKey === itemKey;
      }
      return activeKey === itemKey;
    };
    return _this2;
  }
  _createClass(TabBar2, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props, visible = _this$props2.visible, prefixCls = _this$props2.prefixCls, className = _this$props2.className, children = _this$props2.children, style2 = _this$props2.style;
      var cls = (0, import_classnames47.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--hidden"), !visible));
      var items = import_react67.default.Children.map(children, function(element, index) {
        if (!import_react67.default.isValidElement(element))
          return null;
        var itemKey = element.props.itemKey || index;
        return (0, import_react67.cloneElement)(element, {
          key: index,
          disabled: element.props.disabled,
          onChange: function onChange2() {
            return _this2.onChildChange(itemKey);
          },
          badge: element.props.badge,
          title: element.props.title,
          icon: element.props.icon,
          itemKey,
          style: element.props.style,
          selected: _this2.getSelected(index, itemKey)
        });
      });
      return import_react67.default.createElement("div", {
        className: cls,
        style: style2
      }, items);
    }
  }]);
  return TabBar2;
}(import_react67.PureComponent);
TabBar.Item = void 0;
TabBar.defaultProps = {
  prefixCls: "za-tab-bar",
  visible: true
};
var TabBar_default = TabBar;

// node_modules/zarm/es/tab-bar/TabBarItem.js
var import_react68 = __toESM(require_react());
var import_classnames48 = __toESM(require_classnames());
function _createSuper65(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct65();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct65() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var TabBarItem = function(_PureComponent) {
  _inherits(TabBarItem2, _PureComponent);
  var _super = _createSuper65(TabBarItem2);
  function TabBarItem2() {
    var _this2;
    _classCallCheck(this, TabBarItem2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.change = function(value) {
      var onChange2 = _this2.props.onChange;
      if (typeof onChange2 === "function") {
        onChange2(value);
      }
    };
    return _this2;
  }
  _createClass(TabBarItem2, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props, prefixCls = _this$props.prefixCls, title = _this$props.title, icon = _this$props.icon, badge = _this$props.badge, style2 = _this$props.style, itemKey = _this$props.itemKey, selected = _this$props.selected, _this$props$activeIco = _this$props.activeIcon, activeIcon = _this$props$activeIco === void 0 ? icon : _this$props$activeIco;
      var cls = (0, import_classnames48.default)("".concat(prefixCls, "__item"), _defineProperty({}, "".concat(prefixCls, "--active"), selected));
      var contentRender = import_react68.default.createElement(import_react68.default.Fragment, null, import_react68.default.createElement("div", {
        className: "".concat(prefixCls, "__icon")
      }, selected ? activeIcon : icon), import_react68.default.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title));
      return import_react68.default.createElement("div", {
        className: cls,
        style: style2,
        onClick: function onClick2() {
          _this2.change(itemKey);
        }
      }, badge ? import_react68.default.createElement(Badge, badge, contentRender) : contentRender);
    }
  }]);
  return TabBarItem2;
}(import_react68.PureComponent);
TabBarItem.defaultProps = {
  prefixCls: "za-tab-bar"
};
var TabBarItem_default = TabBarItem;

// node_modules/zarm/es/tab-bar/index.js
TabBar_default.Item = TabBarItem_default;
var tab_bar_default = TabBar_default;

// node_modules/zarm/es/image-preview/ImagePreview.js
var import_react70 = __toESM(require_react());

// node_modules/zarm/es/pinch-zoom/index.js
var import_react69 = __toESM(require_react());
function _createSuper66(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct66();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct66() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function getDistance2(a, b) {
  if (!b)
    return 0;
  return Math.sqrt(Math.pow(b.clientX - a.clientX, 2) + Math.pow(b.clientY - a.clientY, 2));
}
function range(num, min, max) {
  return Math.min(Math.max(num, min), max);
}
var PinchZoom = function(_Component) {
  _inherits(PinchZoom2, _Component);
  var _super = _createSuper66(PinchZoom2);
  function PinchZoom2(props) {
    var _this2;
    _classCallCheck(this, PinchZoom2);
    _this2 = _super.call(this, props);
    _this2._container = void 0;
    _this2.startTouchX = 0;
    _this2.startTouchY = 0;
    _this2.moveX = 0;
    _this2.moveY = 0;
    _this2.startMoveX = 0;
    _this2.startMoveY = 0;
    _this2.deltaX = 0;
    _this2.deltaY = 0;
    _this2.moving = false;
    _this2.zooming = false;
    _this2.scale = 1;
    _this2.startScale = void 0;
    _this2.prevDistance = 0;
    _this2.originHeight = void 0;
    _this2.originWidth = void 0;
    _this2.getMaxMoveX = function() {
      if (_this2.originWidth) {
        return Math.max(0, (_this2.scale * _this2.originWidth - window.innerWidth) / 2);
      }
      return 0;
    };
    _this2.touchstart = function(event) {
      var touches = event.touches;
      _this2.startTouchX = touches[0].clientX;
      _this2.startTouchY = touches[0].clientY;
      _this2.startMoveX = _this2.moveX;
      _this2.startMoveY = _this2.moveY;
      _this2.moving = touches.length === 1 && _this2.scale !== 1;
      _this2.zooming = touches.length === 2;
      if (_this2.zooming) {
        _this2.startScale = _this2.scale;
        _this2.prevDistance = getDistance2(touches[0], touches[1]);
      }
    };
    _this2.updateTransform = function(scale, x, y) {
      var moveX = scale > 1 ? x : 0;
      var moveY = scale > 1 ? y : 0;
      _this2._container.current.style.setProperty("--x", "".concat(moveX, "px"));
      _this2._container.current.style.setProperty("--y", "".concat(moveY, "px"));
      _this2._container.current.style.setProperty("--scale", scale);
    };
    _this2.touchmove = function(event) {
      var touches = event.touches;
      _this2.deltaX = touches[0].clientX - _this2.startTouchX;
      _this2.deltaY = touches[0].clientY - _this2.startTouchY;
      if (_this2.moving) {
        var moveX = _this2.deltaX + _this2.startMoveX;
        var moveY = _this2.deltaY + _this2.startMoveY;
        var maxMoveX = _this2.getMaxMoveX();
        var maxMoveY = _this2.getMaxMoveY();
        _this2.moveX = range(moveX, -maxMoveX, maxMoveX);
        _this2.moveY = range(moveY, -maxMoveY, maxMoveY);
      }
      var _this$props = _this2.props, minScale = _this$props.minScale, maxScale = _this$props.maxScale, onChange2 = _this$props.onChange;
      if (_this2.zooming && touches.length === 2) {
        var distance = getDistance2(touches[0], touches[1]);
        var scale = _this2.startScale * distance / _this2.prevDistance;
        _this2.scale = range(minScale, scale, maxScale);
      }
      _this2.updateTransform(_this2.scale, _this2.moveX, _this2.moveY);
      if (typeof onChange2 === "function") {
        onChange2({
          scale: _this2.scale,
          x: _this2.moveX,
          y: _this2.moveY
        });
      }
      if (_this2.moving || _this2.zooming) {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    _this2.touchEnd = function(event) {
      var stopPropagation3 = false;
      if (_this2.moving || _this2.zooming) {
        stopPropagation3 = true;
        if (_this2.moving && _this2.startMoveX === _this2.moveX && _this2.startMoveY === _this2.moveY) {
          stopPropagation3 = false;
        }
        if (!event.touches.length) {
          if (_this2.zooming) {
            _this2.moveX = range(_this2.moveX, -_this2.getMaxMoveX(), _this2.getMaxMoveX());
            _this2.moveY = range(_this2.moveY, -_this2.getMaxMoveY(), _this2.getMaxMoveY());
            _this2.zooming = false;
            _this2.updateTransform(_this2.scale, _this2.moveX, _this2.moveY);
          }
          _this2.moving = false;
          _this2.startTouchX = 0;
          _this2.startTouchY = 0;
          _this2.startScale = 1;
        }
      }
      if (stopPropagation3) {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    _this2.onload = function(event) {
      var windowWidth = window.innerWidth;
      var windowHeight = window.innerHeight;
      var _event$target = event.target, naturalWidth = _event$target.naturalWidth, naturalHeight = _event$target.naturalHeight;
      var windowRatio = windowHeight / windowWidth;
      var imageRatio = naturalHeight / naturalWidth;
      var vertical = imageRatio > windowRatio;
      if (vertical) {
        _this2.originWidth = windowHeight / imageRatio;
        _this2.originHeight = windowHeight;
      } else {
        _this2.originWidth = windowWidth;
        _this2.originHeight = windowWidth * imageRatio;
      }
    };
    _this2._container = import_react69.default.createRef();
    return _this2;
  }
  _createClass(PinchZoom2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      events_default.on(this._container.current, "touchstart", this.touchstart);
      events_default.on(document.documentElement, "touchmove", this.touchmove);
      events_default.on(document.documentElement, "touchend", this.touchEnd);
      events_default.on(document.documentElement, "touchcancel", this.touchEnd);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      events_default.off(this._container.current, "touchstart", this.touchstart);
      events_default.off(document.documentElement, "touchmove", this.touchmove);
      events_default.off(document.documentElement, "touchend", this.touchEnd);
      events_default.off(document.documentElement, "touchcancel", this.touchEnd);
    }
  }, {
    key: "getMaxMoveY",
    value: function getMaxMoveY() {
      if (this.originHeight) {
        return Math.max(0, (this.scale * this.originHeight - window.innerHeight) / 2);
      }
      return 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props, children = _this$props2.children, className = _this$props2.className, prefixCls = _this$props2.prefixCls;
      var child = import_react69.default.Children.map(children, function(element, index) {
        return import_react69.default.cloneElement(element, {
          key: +index,
          onLoad: _this2.onload
        });
      });
      return import_react69.default.createElement("div", {
        ref: this._container,
        className: "".concat(className, " ").concat(prefixCls)
      }, child);
    }
  }]);
  return PinchZoom2;
}(import_react69.Component);
PinchZoom.defaultProps = {
  prefixCls: "za-pinch-zoom",
  minScale: 1,
  maxScale: 3
};

// node_modules/zarm/es/image-preview/utils/loadStatus.js
var LOAD_STATUS;
(function(LOAD_STATUS2) {
  LOAD_STATUS2["before"] = "loadBefore";
  LOAD_STATUS2["start"] = "loadStart";
  LOAD_STATUS2["end"] = "loadEnd";
  LOAD_STATUS2["after"] = "loadAfter";
})(LOAD_STATUS || (LOAD_STATUS = {}));
var loadStatus_default = LOAD_STATUS;

// node_modules/zarm/es/image-preview/utils/formatImages.js
function isImageString(image) {
  return isString(image);
}
function isImageObject(image) {
  return isObject(image);
}
var formatImages = function formatImages2(images) {
  var previewImages = [];
  images.forEach(function(image) {
    if (isImageString(image)) {
      previewImages.push({
        url: image
      });
    } else if (isImageObject(image)) {
      previewImages.push({
        url: image.url,
        originUrl: image.originUrl,
        loaded: loadStatus_default.before
      });
    }
  });
  return previewImages;
};
var formatImages_default = formatImages;

// node_modules/zarm/es/image-preview/utils/showOriginButton.js
var showOriginButton = function showOriginButton2(images, index) {
  if (images && typeof index === "number" && images[index] && images[index].originUrl) {
    return true;
  }
  return false;
};
var showOriginButton_default = showOriginButton;

// node_modules/zarm/es/image-preview/ImagePreview.js
function _createSuper67(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct67();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct67() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var parseState5 = function parseState6(props) {
  var visible = props.visible, images = props.images;
  return {
    visible,
    images: formatImages_default(images)
  };
};
var ImagePreview = function(_Component) {
  _inherits(ImagePreview2, _Component);
  var _super = _createSuper67(ImagePreview2);
  function ImagePreview2() {
    var _this2;
    _classCallCheck(this, ImagePreview2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.doubleClickTimer = void 0;
    _this2.touchStartTime = void 0;
    _this2.moving = void 0;
    _this2.state = parseState5(_this2.props);
    _this2.onChange = function(index) {
      var onChange2 = _this2.props.onChange;
      _this2.setState({
        currentIndex: index
      }, function() {
        if (typeof onChange2 === "function") {
          onChange2(index);
        }
      });
    };
    _this2.close = function() {
      if (_this2.moving) {
        return false;
      }
      var onClose = _this2.props.onClose;
      if (typeof onClose === "function") {
        onClose();
      }
    };
    _this2.loadOrigin = function() {
      var _this$state = _this2.state, _this$state$currentIn = _this$state.currentIndex, currentIndex = _this$state$currentIn === void 0 ? 0 : _this$state$currentIn, images = _this$state.images;
      var _images$currentIndex = images[currentIndex], originUrl = _images$currentIndex.originUrl, loaded = _images$currentIndex.loaded;
      if (loaded !== loadStatus_default.before || !originUrl) {
        return;
      }
      images[currentIndex].loaded = loadStatus_default.start;
      _this2.setState({
        images
      });
      var img = new Image();
      img.onload = function() {
        images[currentIndex].loaded = loadStatus_default.end;
        images[currentIndex].url = originUrl;
        _this2.setState({
          images
        });
        setTimeout(function() {
          images[currentIndex].loaded = loadStatus_default.after;
          _this2.setState({
            images
          });
        }, 1500);
      };
      img.src = originUrl;
    };
    _this2.onWrapperTouchStart = function() {
      _this2.touchStartTime = Date.now();
    };
    _this2.onWrapperTouchEnd = function() {
      var deltaTime = Date.now() - _this2.touchStartTime;
      var onClose = _this2.props.onClose;
      if (deltaTime < 300) {
        if (!_this2.doubleClickTimer && !_this2.moving) {
          _this2.doubleClickTimer = setTimeout(function() {
            _this2.doubleClickTimer = null;
            if (typeof onClose === "function") {
              onClose();
            }
          }, 300);
        } else {
          _this2.doubleClickTimer && clearTimeout(_this2.doubleClickTimer);
          _this2.doubleClickTimer = null;
        }
      }
      _this2.moving = false;
    };
    _this2.onWrapperTouchMove = function() {
      if (_this2.touchStartTime) {
        _this2.moving = true;
      }
    };
    _this2.onWrapperMouseDown = function() {
      _this2.touchStartTime = Date.now();
    };
    _this2.onWrapperMouseUp = function() {
      setTimeout(function() {
        _this2.moving = false;
      }, 0);
      _this2.touchStartTime = 0;
    };
    _this2.renderImages = function() {
      var _this$props = _this2.props, prefixCls = _this$props.prefixCls, minScale = _this$props.minScale, maxScale = _this$props.maxScale;
      var images = _this2.state.images;
      return images.map(function(item, i) {
        return import_react70.default.createElement("div", {
          className: "".concat(prefixCls, "__item"),
          key: +i
        }, import_react70.default.createElement(PinchZoom, {
          className: "".concat(prefixCls, "__item__img"),
          minScale,
          maxScale
        }, import_react70.default.createElement("img", {
          src: item.url,
          alt: "",
          draggable: false
        })));
      });
    };
    return _this2;
  }
  _createClass(ImagePreview2, [{
    key: "renderPagination",
    value: function renderPagination() {
      var _this$props2 = this.props, prefixCls = _this$props2.prefixCls, showPagination = _this$props2.showPagination;
      var _this$state2 = this.state, _this$state2$currentI = _this$state2.currentIndex, currentIndex = _this$state2$currentI === void 0 ? 0 : _this$state2$currentI, visible = _this$state2.visible, images = _this$state2.images;
      if (visible && showPagination && images && images.length > 1) {
        return import_react70.default.createElement("div", {
          className: "".concat(prefixCls, "__index")
        }, currentIndex + 1, " / ", images.length);
      }
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, locale = _this$props3.locale, activeIndex = _this$props3.activeIndex;
      var _this$state3 = this.state, _this$state3$currentI = _this$state3.currentIndex, currentIndex = _this$state3$currentI === void 0 ? 0 : _this$state3$currentI, visible = _this$state3.visible, images = _this$state3.images;
      var loaded = images[currentIndex].loaded;
      return import_react70.default.createElement(popup_default, {
        direction: "center",
        visible,
        className: prefixCls
      }, import_react70.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        onTouchStart: this.onWrapperTouchStart,
        onTouchEnd: this.onWrapperTouchEnd,
        onTouchCancel: this.onWrapperTouchEnd,
        onTouchMove: this.onWrapperTouchMove,
        onMouseDown: this.onWrapperMouseDown,
        onMouseMove: this.onWrapperTouchMove,
        onMouseUp: this.onWrapperMouseUp,
        onClick: this.close
      }, import_react70.default.createElement(Carousel, {
        showPagination: false,
        onChange: this.onChange,
        activeIndex: currentIndex
      }, visible ? this.renderImages() : [])), import_react70.default.createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, loaded && showOriginButton_default(images, activeIndex) && loaded !== loadStatus_default.after ? import_react70.default.createElement("button", {
        className: "".concat(prefixCls, "__origin__button"),
        onClick: this.loadOrigin
      }, loaded === loadStatus_default.start ? import_react70.default.createElement(ActivityIndicator, {
        className: "".concat(prefixCls, "__loading"),
        type: "spinner"
      }) : "", locale && locale[loaded]) : "", this.renderPagination()));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ("visible" in nextProps && nextProps.visible !== state.prevVisible || "activeIndex" in nextProps && nextProps.activeIndex !== state.prevActiveIndex) {
        return {
          visible: nextProps.visible,
          activeIndex: nextProps.activeIndex,
          currentIndex: nextProps.activeIndex,
          images: formatImages_default(nextProps.images),
          prevVisible: nextProps.visible,
          prevActiveIndex: nextProps.activeIndex
        };
      }
      return null;
    }
  }]);
  return ImagePreview2;
}(import_react70.Component);
ImagePreview.defaultProps = {
  prefixCls: "za-image-preview",
  activeIndex: 0,
  showPagination: true,
  visible: false
};

// node_modules/zarm/es/image-preview/index.js
var image_preview_default = config_receiver_default("ImagePreview")(ImagePreview);

// node_modules/zarm/es/config-provider/index.js
var config_provider_default = ConfigProvider;

// node_modules/zarm/es/locale-provider/index.js
var _dec;
var _class;
function _createSuper68(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct68();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct68() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var LocaleProvider = (_dec = warnIfDeprecated([{
  oldComponent: "LocaleProvider",
  newComponent: "ConfigProvider"
}]), _dec(_class = function(_ConfigProvider) {
  _inherits(LocaleProvider2, _ConfigProvider);
  var _super = _createSuper68(LocaleProvider2);
  function LocaleProvider2() {
    _classCallCheck(this, LocaleProvider2);
    return _super.apply(this, arguments);
  }
  return LocaleProvider2;
}(config_provider_default)) || _class);

// node_modules/zarm/es/stack-picker/StackPicker.js
var import_react72 = __toESM(require_react());
var import_classnames49 = __toESM(require_classnames());

// node_modules/zarm/es/stack-picker/Actions.js
var import_react71 = __toESM(require_react());
var Actions_default = function(_ref) {
  var prefixCls = _ref.prefixCls, cancelText = _ref.cancelText, okText = _ref.okText, title = _ref.title, handleCancel = _ref.handleCancel, handleOk = _ref.handleOk, locale = _ref.locale;
  return import_react71.default.createElement("div", {
    className: "".concat(prefixCls, "__header")
  }, import_react71.default.createElement("div", {
    className: "".concat(prefixCls, "__cancel"),
    onClick: handleCancel
  }, cancelText || locale.cancelText), import_react71.default.createElement("div", {
    className: "".concat(prefixCls, "__title")
  }, title), import_react71.default.createElement("div", {
    className: "".concat(prefixCls, "__submit"),
    onClick: handleOk
  }, okText || locale.okText));
};

// node_modules/zarm/es/stack-picker/StackPicker.js
var stopPropagation = function stopPropagation2(e) {
  e.stopPropagation();
};
var StackPicker_default = (0, import_react72.memo)(function(_ref) {
  var _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "za-stack-picker" : _ref$prefixCls, className = _ref.className, dataSource = _ref.dataSource, defaultValue = _ref.defaultValue, value = _ref.value, _ref$displayMember = _ref.displayMember, displayMember = _ref$displayMember === void 0 ? "label" : _ref$displayMember, _ref$valueMember = _ref.valueMember, valueMember = _ref$valueMember === void 0 ? "value" : _ref$valueMember, _ref$title = _ref.title, title = _ref$title === void 0 ? "请选择" : _ref$title, _ref$visible = _ref.visible, visible = _ref$visible === void 0 ? false : _ref$visible, _ref$cols = _ref.cols, cols = _ref$cols === void 0 ? Infinity : _ref$cols, _ref$labelAddon = _ref.labelAddon, labelAddon = _ref$labelAddon === void 0 ? " > " : _ref$labelAddon, displayRender2 = _ref.displayRender, _ref$itemRender = _ref.itemRender, itemRender5 = _ref$itemRender === void 0 ? function(data) {
    return data[displayMember];
  } : _ref$itemRender, onChangeValidate = _ref.onChangeValidate, cancelText = _ref.cancelText, okText = _ref.okText, onChange2 = _ref.onChange, onOk = _ref.onOk, onCancel3 = _ref.onCancel, _ref$maskClosable = _ref.maskClosable, maskClosable = _ref$maskClosable === void 0 ? false : _ref$maskClosable, locale = _ref.locale;
  var _useState = (0, import_react72.useState)(""), _useState2 = _slicedToArray(_useState, 2), errorMsg = _useState2[0], setErrorMsg = _useState2[1];
  var _useState3 = (0, import_react72.useState)([]), _useState4 = _slicedToArray(_useState3, 2), currentValue = _useState4[0], setCurrentValue = _useState4[1];
  var _useState5 = (0, import_react72.useState)(visible), _useState6 = _slicedToArray(_useState5, 2), currentVisible = _useState6[0], setCurrentVisible = _useState6[1];
  var handleObtainItem = (0, import_react72.useCallback)(function(list, _value) {
    return list.find(function(item) {
      return item[valueMember] === _value;
    });
  }, [valueMember]);
  (0, import_react72.useEffect)(function() {
    setCurrentVisible(visible);
  }, [visible]);
  (0, import_react72.useEffect)(function() {
    var initValue = [];
    var v = value || defaultValue || [];
    v.reduce(function(accumulator, _currentValue) {
      var valueItem = handleObtainItem(accumulator, _currentValue);
      if (valueItem) {
        initValue.push(valueItem);
        return valueItem.children || [];
      }
      return [];
    }, dataSource);
    setCurrentValue(initValue);
  }, [dataSource, handleObtainItem, value, defaultValue]);
  var handleMaskClick = function handleMaskClick2() {
    if (!maskClosable)
      return;
    if (onCancel3) {
      if (typeof onCancel3 !== "function") {
        console.error("onCancel need a function");
      } else {
        onCancel3();
      }
    }
    setCurrentVisible(!currentVisible);
  };
  var handleCancel = function handleCancel2() {
    if (onCancel3) {
      if (typeof onCancel3 !== "function") {
        console.error("onCancel need a function");
      } else {
        onCancel3();
      }
    }
  };
  var columnDataList = (0, import_react72.useMemo)(function() {
    var group = [];
    var _dataSource = dataSource;
    var i = 0;
    while (_dataSource) {
      group.push(_dataSource);
      var colVal = currentValue[i];
      var childrenData = ((colVal ? handleObtainItem(_dataSource, colVal[valueMember]) : _dataSource[0]) || {}).children;
      if (childrenData && childrenData.length && i < cols - 1) {
        _dataSource = childrenData;
      } else {
        _dataSource = null;
      }
      i += 1;
    }
    return group;
  }, [cols, currentValue, dataSource, handleObtainItem, valueMember]);
  var handleChange = function handleChange2(e, index, item) {
    stopPropagation(e);
    var _value = currentValue.slice(0, index);
    if (item && typeof index === "number") {
      _value[index] = item;
    }
    setCurrentValue(_value);
    if (onChangeValidate) {
      if (typeof onChangeValidate !== "function") {
        console.error("onChangeValidate need a function");
      } else {
        var _errorMsg = onChangeValidate(value);
        setErrorMsg(_errorMsg);
      }
    }
    if (onChange2) {
      if (typeof onChange2 !== "function") {
        console.error("onChange need a function");
      } else {
        onChange2(_value.map(function(v) {
          return v[valueMember];
        }));
      }
    }
  };
  var handleOk = function handleOk2() {
    if (onOk) {
      if (typeof onOk !== "function") {
        console.error("onOk need a function");
      } else {
        onOk(currentValue.map(function(v) {
          return v[valueMember];
        }));
      }
    }
  };
  var handleItemRender = function handleItemRender2(item) {
    return itemRender5(item);
  };
  var handleDisplayRender = function handleDisplayRender2() {
    var _currentValue = currentValue.map(function(_ref2) {
      var children = _ref2.children, others = _objectWithoutProperties(_ref2, ["children"]);
      return others;
    });
    if (displayRender2) {
      if (typeof displayRender2 !== "function") {
        console.error("displayRender need a function");
        return "";
      }
      return displayRender2(_currentValue);
    }
    return _currentValue.map(function(item) {
      return handleItemRender(item);
    }).join(labelAddon);
  };
  return import_react72.default.createElement(popup_default, {
    visible: currentVisible,
    onMaskClick: handleMaskClick,
    direction: "bottom"
  }, import_react72.default.createElement("div", {
    className: (0, import_classnames49.default)(prefixCls, className)
  }, import_react72.default.createElement("div", {
    className: "".concat(prefixCls, "__container")
  }, import_react72.default.createElement("div", {
    className: "".concat(prefixCls, "__wrapper")
  }, import_react72.default.createElement(Actions_default, {
    prefixCls,
    cancelText,
    okText,
    title,
    handleCancel,
    handleOk,
    locale
  }), import_react72.default.createElement("div", {
    className: "".concat(prefixCls, "__crumbs")
  }, import_react72.default.createElement("p", null, "选择：", handleDisplayRender()), errorMsg && import_react72.default.createElement("p", {
    className: "".concat(prefixCls, "__crumbs-error")
  }, errorMsg)), import_react72.default.createElement("div", {
    className: "".concat(prefixCls, "__group")
  }, columnDataList.map(function(group, index) {
    var columnClass = (0, import_classnames49.default)("".concat(prefixCls, "__stack-column"), _defineProperty({}, "".concat(prefixCls, "__stack-column--hidden"), !currentValue[index] || !currentValue[index][valueMember]));
    return import_react72.default.createElement("div", {
      className: columnClass,
      key: +index,
      onClick: function onClick2(e) {
        return handleChange(e, index - 1);
      }
    }, import_react72.default.createElement("div", {
      className: "".concat(prefixCls, "__stack-column-wrapper"),
      onClick: function onClick2(e) {
        return stopPropagation(e);
      }
    }, group.map(function(item, i) {
      var isActive = currentValue[index] && currentValue[index][valueMember] === item[valueMember];
      var columnItemClass = (0, import_classnames49.default)("".concat(prefixCls, "__stack-column-item"), _defineProperty({}, "".concat(prefixCls, "__stack-column-item--active"), isActive));
      var label = handleItemRender(item);
      return import_react72.default.createElement("div", {
        key: "".concat(label).concat(+i),
        className: columnItemClass,
        onClick: function onClick2(e) {
          return handleChange(e, index, item);
        }
      }, label);
    })));
  }))))));
});

// node_modules/zarm/es/stack-picker/index.js
var stack_picker_default = config_receiver_default("StackPicker")(StackPicker_default);

// node_modules/zarm/es/affix/Affix.js
var import_react73 = __toESM(require_react());
var import_classnames50 = __toESM(require_classnames());
function _createSuper69(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct69();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct69() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DEFAULT_SCROLL_CONTAINER = canUseDOM ? window : void 0;
var Affix = function(_PureComponent) {
  _inherits(Affix2, _PureComponent);
  var _super = _createSuper69(Affix2);
  function Affix2() {
    var _this2;
    _classCallCheck(this, Affix2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super.call.apply(_super, [this].concat(args));
    _this2.savePlaceholderNode = (0, import_react73.createRef)();
    _this2.saveFixedNode = (0, import_react73.createRef)();
    _this2.saveFixedNodeTop = "offsetBottom" in _this2.props ? -1e4 : 1e4;
    _this2.state = {
      affixed: false,
      width: 0,
      height: 0
    };
    _this2.onPositionUpdate = throttle_default(function() {
      var onChange2 = _this2.props.onChange;
      var affixed = _this2.state.affixed;
      var target = _this2.savePlaceholderNode.current;
      if (!target) {
        return false;
      }
      var _target$getBoundingCl = target === null || target === void 0 ? void 0 : target.getBoundingClientRect(), top = _target$getBoundingCl.top, width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      _this2.saveFixedNodeTop = top;
      var currentAffixed = _this2.affixed;
      if (currentAffixed !== affixed) {
        _this2.setState({
          affixed: currentAffixed,
          // use 'auto' when get width or height is 0
          width: width === 0 ? "auto" : width,
          height: height === 0 ? "auto" : height
        });
        onChange2 && onChange2(currentAffixed);
      }
    }, 10);
    return _this2;
  }
  _createClass(Affix2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var offsetBottom = this.props.offsetBottom;
      setTimeout(function() {
        var container = _this2.container, onPositionUpdate = _this2.onPositionUpdate;
        events_default.on(container, "scroll", onPositionUpdate);
        if (typeof offsetBottom !== "undefined") {
          _this2.onPositionUpdate();
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this3 = this;
      setTimeout(function() {
        var container = _this3.container, onPositionUpdate = _this3.onPositionUpdate;
        events_default.off(container, "scroll", onPositionUpdate);
      });
    }
  }, {
    key: "container",
    get: function get() {
      var scrollContainer = this.props.scrollContainer;
      var container = typeof scrollContainer === "function" ? scrollContainer() : scrollContainer;
      return !container ? window : container;
    }
  }, {
    key: "containerRect",
    get: function get() {
      var container = this.container;
      if (!canUseDOM) {
        return {
          top: 0,
          bottom: 0
        };
      }
      return container !== window ? container.getBoundingClientRect() : {
        top: 0,
        bottom: container.innerHeight,
        width: 0,
        height: 0
      };
    }
  }, {
    key: "affixed",
    get: function get() {
      var containerRect = this.containerRect, saveFixedNodeTop = this.saveFixedNodeTop;
      var _this$props = this.props, offsetTop = _this$props.offsetTop, offsetBottom = _this$props.offsetBottom;
      if (typeof offsetBottom !== "undefined" && saveFixedNodeTop + offsetBottom >= containerRect.bottom) {
        return true;
      }
      if (typeof offsetBottom === "undefined" && typeof offsetTop !== "undefined" && saveFixedNodeTop - offsetTop <= containerRect.top) {
        return true;
      }
      return false;
    }
  }, {
    key: "affixStyle",
    get: function get() {
      var containerRect = this.containerRect;
      var _this$props2 = this.props, offsetTop = _this$props2.offsetTop, offsetBottom = _this$props2.offsetBottom;
      var _this$state = this.state, width = _this$state.width, height = _this$state.height;
      if (this.affixed && typeof offsetBottom !== "undefined") {
        return {
          position: "fixed",
          bottom: offsetBottom,
          width,
          height
        };
      }
      if (this.affixed && typeof offsetTop !== "undefined") {
        return {
          position: "fixed",
          top: containerRect.top + offsetTop,
          width,
          height
        };
      }
      return {};
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, className = _this$props3.className, children = _this$props3.children;
      var cls = (0, import_classnames50.default)(prefixCls, className);
      if (!this.affixed) {
        return import_react73.default.createElement("div", {
          ref: this.savePlaceholderNode
        }, children);
      }
      return import_react73.default.createElement("div", {
        ref: this.savePlaceholderNode
      }, import_react73.default.createElement("div", {
        className: cls,
        ref: this.saveFixedNode,
        style: this.affixStyle
      }, children));
    }
  }]);
  return Affix2;
}(import_react73.PureComponent);
Affix.displayName = "Affix";
Affix.defaultProps = {
  prefixCls: "za-affix",
  scrollContainer: DEFAULT_SCROLL_CONTAINER,
  offsetTop: 0
};

// node_modules/zarm/es/affix/index.js
var affix_default = Affix;
export {
  action_sheet_default as ActionSheet,
  ActivityIndicator,
  affix_default as Affix,
  BackToTop,
  Badge,
  Button,
  CalendarView as Calendar,
  Carousel,
  Cell,
  checkbox_default as Checkbox,
  collapse_default as Collapse,
  config_provider_default as ConfigProvider,
  config_receiver_default as ConfigReceiver,
  date_picker_default as DatePicker,
  date_picker_view_default as DatePickerView,
  date_select_default as DateSelect,
  Drag,
  FilePicker,
  icon_default as Icon,
  image_preview_default as ImagePreview,
  input_default as Input,
  keyboard_default as Keyboard,
  KeyboardPicker,
  Loading,
  LocaleProvider,
  Marquee,
  Mask,
  Message,
  modal_default as Modal,
  NavBar,
  NoticeBar,
  Panel,
  picker_default as Picker,
  picker_view_default as PickerView,
  popper_default2 as Popper,
  popup_default as Popup,
  Progress,
  pull_default as Pull,
  radio_default as Radio,
  Scroller,
  search_bar_default as SearchBar,
  select_default as Select,
  Slider,
  stack_picker_default as StackPicker,
  Stepper,
  SwipeAction,
  Switch,
  tab_bar_default as TabBar,
  tabs_default as Tabs,
  Toast,
  tooltip_default as Tooltip,
  trigger_default2 as Trigger,
  wheel_default as Wheel
};
/*! Bundled license information:

classnames/dedupe.js:
  (*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)

better-scroll/dist/better-scroll.esm.js:
  (*!
   * better-scroll / better-scroll
   * (c) 2016-2021 ustbhuangyi
   * Released under the MIT License.
   *)
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

popper.js/dist/esm/popper.js:
  (**!
   * @fileOverview Kickass library to create and place poppers near their reference elements.
   * @version 1.16.1
   * @license
   * Copyright (c) 2016 Federico Zivolo and contributors
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)
*/
//# sourceMappingURL=zarm.js.map
